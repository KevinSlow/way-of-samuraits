{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/Posts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/MyPost.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","className","s","descriptionBlock","type","htmlType","lg","formSummaryError","CreateField","MyInput","TextArea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contacts","ProfileInfo","savePhoto","saveProfile","mainPhoto","src","photos","large","userPhoto","alt","target","files","length","initialValues","formData","then","Post","item","message","likesCount","id","maxLength10","maxLengthCreator","ReduxAddPost","required","MyPost","postsBlock","MyPosts","React","memo","postsElements","post","p","values","addPosts","newPostText","MyPostsContainer","connect","state","profilePage","posts","actions","addPostAction","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","setUserProfile","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.0305d488.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__sodEd\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3dvhv\",\"contact\":\"ProfileInfo_contact__3h1io\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__366-i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__3NYyy\",\"postsBlock\":\"MyPosts_postsBlock__2xEpi\",\"posts\":\"MyPosts_posts__SPSS6\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Input } from \"antd\";\n\ntype ProfileStatusWithHooksType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span onDoubleClick={activateEditMode}>\n            {props.status || \"No Status\"}\n          </span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <Input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport lg from \"../../Common/FormsControls/FormsControls.module.css\";\nimport {\n  CreateField,\n  GetStringKeys,\n  MyInput,\n  TextArea,\n} from \"../../Common/FormsControls/FormsControls\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { ProfileType } from \"../../../types/types\";\nimport { Button } from \"antd\";\n\ntype PropsTypes = {\n  profile: ProfileType;\n};\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\n\nconst ProfileDataForm: React.FC<\n  InjectedFormProps<ProfileType, PropsTypes> & PropsTypes\n> = ({ profile, handleSubmit, error }) => {\n  return (\n    <form onSubmit={handleSubmit} className={s.descriptionBlock}>\n      <div>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Save\n        </Button>\n      </div>\n      {error && <div className={lg.formSummaryError}>{error}</div>}\n      <div>\n        {\" \"}\n        Full Name{\" \"}\n        <div>\n          {CreateField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], MyInput)}\n        </div>\n      </div>\n      {/*<div>{profile.aboutMe}</div>*/}\n\n      <div>\n        Looking for a Job{\" \"}\n        {CreateField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], MyInput, {\n          type: \"checkbox\",\n        })}\n      </div>\n\n      <div>\n        <b>My proffesional skills:</b>\n        {CreateField<ProfileTypeKeys>(\n          \"My proffesional skills\",\n          \"lookingForAJobDescription\",\n          [],\n          TextArea\n        )}\n      </div>\n\n      <div>About Me: </div>\n      {CreateField<ProfileTypeKeys>(\"About Me\", \"aboutMe\", [], TextArea)}\n      <div>\n        <div>\n          <b>Contacts:</b> :{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <div key={key} className={s.contact}>\n                <strong>\n                  {key}: {CreateField(key, \"contacts.\" + key, [], MyInput)}\n                </strong>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsTypes>({\n  form: \"edit-profile\",\n})(ProfileDataForm);\nexport default ProfileDataFormReduxForm;\n","import React, { ChangeEvent, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport PreLoader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/img/image.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport { ContactsType, ProfileType } from \"../../../types/types\";\nimport { Button, Input } from \"antd\";\n\ntype PropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\nconst ProfileInfo: React.FC<PropsType> = ({\n  profile,\n  savePhoto,\n  isOwner,\n  status,\n  updateStatus,\n  saveProfile,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <PreLoader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: ProfileType) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      {/*<div>*/}\n      {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\n      {/*</div>*/}\n      <img\n        className={s.mainPhoto}\n        src={profile.photos.large || userPhoto}\n        alt=\"\"\n      />\n      {isOwner && <Input type={\"file\"} onChange={onMainPhotoSelected} />}\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      {editMode ? (\n        <ProfileDataForm\n          profile={profile}\n          initialValues={profile}\n          onSubmit={onSubmit}\n        />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          goToEditMode={() => setEditMode(true)}\n        />\n      )}\n    </div>\n  );\n};\n\ntype ProfileDataPropsType = {\n  profile: ProfileType;\n  isOwner: boolean;\n  goToEditMode: () => void;\n};\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\n  profile,\n  isOwner,\n  goToEditMode,\n  ...props\n}) => {\n  return (\n    <div className={s.descriptionBlock}>\n      {isOwner && (\n        <div>\n          <Button onClick={goToEditMode}>edit</Button>\n        </div>\n      )}\n      <div>\n        Full Name\n        <div>{profile.fullName}</div>\n      </div>\n      <div>\n        About Me\n        <div>{profile.aboutMe}</div>\n      </div>\n      <div>\n        {profile.lookingForAJob && (\n          <div>\n            lookingForAJobDescription{\" \"}\n            <div>{profile.lookingForAJobDescription}</div>\n          </div>\n        )}\n      </div>\n      <div>\n        Looking for a Job: <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n      </div>\n      <div>\n        <div>\n          <b>Contacts:</b> :{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <Contacts\n                contactTitle={key}\n                contactValue={profile.contacts[key as keyof ContactsType]}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype ContactsPropsType = {\n  contactTitle: string;\n  contactValue: string;\n};\n\nconst Contacts: React.FC<ContactsPropsType> = ({\n  contactTitle,\n  contactValue,\n}) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b> : {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport s from \"./Post.module.css\";\nimport { PostType } from \"../../../../types/types\";\n\nconst Post = (props: PostType) => {\n  return (\n    <div className={s.item} key={props.id}>\n      <img\n        src=\"https://scontent-iev1-1.xx.fbcdn.net/v/t1.0-1/s320x320/79515135_10111007623880301_5111576226921709568_o.jpg?_nc_cat=1&ccb=2&_nc_sid=7206a8&_nc_ohc=mxG7b1NaBW8AX9WDBHa&_nc_ht=scontent-iev1-1.xx&tp=7&oh=6d7c5fda78fa67cf7b4724ff55b2ada8&oe=603827AD\"\n        alt=\"\"\n      />\n      {props.message}\n      <div>\n        <span>Like</span> {props.likesCount}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import s from \"./MyPosts.module.css\";\nimport React from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport {\n  maxLengthCreator,\n  required,\n} from \"../../../utils/Validators/validators\";\nimport {\n  CreateField,\n  GetStringKeys,\n  TextArea,\n} from \"../../Common/FormsControls/FormsControls\";\nimport { Button } from \"antd\";\n\nconst maxLength10 = maxLengthCreator(10);\ntype PropsType = {\n  onSubmit: (values: AddPostFormValuesType) => void;\n};\nexport type AddPostFormValuesType = {\n  newPostText: string;\n};\ntype mapDispatchToProps = {};\ntype AddPostFormTypeKeys = GetStringKeys<AddPostFormValuesType>;\nconst AddPost: React.FC<\n  InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType\n> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      {CreateField<AddPostFormTypeKeys>(\n        \"Post Message\",\n        \"newPostText\",\n        [required, maxLength10],\n        TextArea\n      )}\n      <Button>Add Post</Button>\n    </form>\n  );\n};\n\nconst ReduxAddPost = reduxForm<AddPostFormValuesType, PropsType>({\n  form: \"add-post\",\n})(AddPost);\n\nexport const MyPost: React.FC<AddPostFormValuesType & PropsType> = (props) => {\n  return (\n    <>\n      <div className={s.postsBlock}>\n        <h3>New Post</h3>\n        <ReduxAddPost onSubmit={props.onSubmit} />\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport Post from \"./Post/Post\";\nimport { AddPostFormValuesType, MyPost } from \"./MyPost\";\nimport { PostType } from \"../../../types/types\";\nimport { Input } from \"antd\";\nimport { Checkbox } from \"../../Common/FormsControls/FormsControls\";\n\nexport type MapPropsType = {\n  post: Array<PostType>;\n};\nexport type DispatchPropsType = {\n  addPosts: (newPostText: string) => void;\n};\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = React.memo(\n  (props) => {\n    let postsElements = props.post.map((p) => {\n      return <Post message={p.message} likesCount={p.likesCount} id={p.id} />;\n    });\n    const onSubmit = (values: AddPostFormValuesType) => {\n      props.addPosts(values.newPostText);\n    };\n    return (\n      <div>\n        <MyPost onSubmit={onSubmit} newPostText={\"\"} />\n\n        <div>{postsElements}</div>\n      </div>\n    );\n  }\n);\n\nexport default MyPosts;\n","import React from \"react\";\nimport { RootStoreType } from \"../../../redux/_store\";\nimport { connect } from \"react-redux\";\nimport Profile from \"../Profile\";\nimport MyPosts from \"./MyPosts\";\nimport { PostType } from \"../../../types/types\";\nimport { actions } from \"../../../redux/profileReducer\";\nimport { StateType } from \"../../../redux/reduxStore\";\n\ntype myPostsContainerPropsType = {\n  store: RootStoreType;\n};\n\ntype MapStateToProps = {\n  post: Array<PostType>;\n  newPostText: string;\n};\n\ntype MapDispatchToProps = {\n  addPosts: (newPostText: string) => void;\n};\n\nconst mapStateToProps = (state: StateType): MapStateToProps => {\n  return {\n    post: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  } as MapStateToProps;\n};\n\nconst MyPostsContainer = connect<\n  MapStateToProps,\n  MapDispatchToProps,\n  {},\n  StateType\n>(mapStateToProps, { addPosts: actions.addPostAction })(MyPosts);\n\nexport default MyPostsContainer;\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\n\nimport { ProfileType } from \"../../types/types\";\n\ntype Profile = {\n  isOwner: boolean;\n  status: string;\n  updateStatus: () => void;\n  savePhoto: () => void;\n};\n\ntype ProfileTypeProps = {\n  setUserProfile: (userId: number) => void;\n  getStatus: (userId: number) => void;\n  savePhoto: (file: File) => void;\n  updateStatus: (status: string) => void;\n  status: string;\n  saveProfile: (Profile: ProfileType) => Promise<any>;\n  isOwner: boolean;\n  profile: ProfileType | null;\n};\n\nconst Profile = (props: ProfileTypeProps) => {\n  return (\n    <div>\n      <ProfileInfo\n        saveProfile={props.saveProfile}\n        savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\n\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nimport { ProfileType } from \"../../types/types\";\nimport {\n  getStatus,\n  getUserProfile,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from \"../../redux/profileReducer\";\nimport { AppState } from \"../../redux/reduxStore\";\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n  getUserProfile: (userId: number) => void;\n  getStatus: (userId: number) => void;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\ntype PathParamsType = {\n  userId: string;\n};\n\ntype PropsType = MapPropsType &\n  DispatchPropsType &\n  RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n  constructor(props: PropsType) {\n    super(props);\n  }\n\n  refreshProfile() {\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        // todo: may be replace push with Redirect??\n        this.props.history.push(\"/login\");\n      }\n    }\n\n    if (!userId) {\n      console.error(\n        \"ID should exists in URI params or in state ('authorizedUserId')\"\n      );\n    } else {\n      this.props.getUserProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        getStatus={this.props.getStatus}\n        saveProfile={this.props.saveProfile}\n        setUserProfile={this.props.getUserProfile}\n        status={this.props.status}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      />\n    );\n  }\n}\n\nlet mapStateToProps = (state: AppState) => {\n  //console.log('mapStateToProps PROFILE')\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter\n)(ProfileContainer);\n"],"sourceRoot":""}