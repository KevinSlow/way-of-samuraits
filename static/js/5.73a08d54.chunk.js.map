{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItems.module.css","components/Dialogs/DialogItem/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","name","Message","message","maxLength","maxLengthCreator","ReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","send","Dialogs","state","dialogsPage","dialogElements","dialogs","map","d","messagesElements","messages","m","chatBlocks","chatFirst","chatSecond","chatThread","values","console","log","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","addDialogActionCreator","Component","RedirectComponent","this","React"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,cAAc,6BAA6B,GAAK,oBAAoB,WAAa,4BAA4B,UAAY,2BAA2B,WAAa,4BAA4B,KAAO,sBAAsB,WAAa,4BAA4B,gBAAgB,+BAA+B,iBAAiB,gCAAgC,cAAc,6BAA6B,sBAAsB,qCAAqC,QAAU,2B,oBCA5pBD,EAAOC,QAAU,CAAC,OAAS,8B,uHCkBZC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,eAAC,IAAD,CAASC,GAAIL,EAAb,cAAqBD,EAAMO,KAA3B,UCEGC,EARC,SAACR,GACb,OAEQ,6BAAKA,EAAMS,W,iCCkBjBC,EAAYC,YAAiB,KA+C7BC,EAAmBC,YAAU,CACjCC,KAAM,wBADiBD,EAhBF,SAACb,GACtB,OACE,qBAAKG,UAAU,QAAf,SACE,uBAAMY,SAAUf,EAAMgB,aAAtB,UACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBH,KAAM,iBACNe,YAAa,uBAEf,wBAAQnB,UAAWC,IAAEmB,eAUdC,EAjDC,SAACxB,GACf,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACrC,cAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAiBL,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAG/B6B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OACxC,cAAC,EAAD,CAAoBxB,QAASwB,EAAExB,SAAjBwB,EAAE/B,OAQlB,OACE,8BACE,sBAAKC,UAAWC,IAAE8B,WAAlB,UACE,qBAAK/B,UAAWC,IAAE+B,UAAlB,SAA8BR,IAC9B,sBAAKxB,UAAWC,IAAEgC,WAAlB,UACE,oBAAIjC,UAAWC,IAAEiC,WAAjB,SAA8BN,IAC9B,cAACnB,EAAD,CAAkBG,SAXJ,SAACuB,GACrBC,QAAQC,IAAIF,GACZtC,EAAMyC,YAAYH,EAAOI,4B,uDCzCzBC,EAA6B,SAAClB,GAAD,MAAkB,CACjDmB,OAAQnB,EAAMoB,KAAKD,S,YCsBNE,4BACbC,aAfsB,SAACtB,GACvB,MAAO,CACLC,YAAaD,EAAMC,gBAII,SAACsB,GAC1B,MAAO,CACLP,YAAa,SAACC,GACZM,EAASC,YAAuBP,UDf/B,SAA6BQ,GAAiC,IAC7DC,EAD4D,uKAG9D,OAAKC,KAAKpD,MAAM4C,OACT,cAACM,EAAD,eAAgBE,KAAKpD,QADG,cAAC,IAAD,CAAUM,GAAI,eAHiB,GAClC+C,IAAMH,WAWtC,OAJiCH,YAAQJ,EAARI,CAC/BI,KCWWL,CAGbtB","file":"static/js/5.73a08d54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1K0Lf\",\"dialogItems\":\"Dialogs_dialogItems__Bb7ML\",\"active\":\"Dialogs_active__2YNs0\",\"messages\":\"Dialogs_messages__2_Q8g\",\"message\":\"Dialogs_message__1rGvK\",\"text-center\":\"Dialogs_text-center__2uRE7\",\"cf\":\"Dialogs_cf__2T-fW\",\"chatBlocks\":\"Dialogs_chatBlocks__BD3ao\",\"chatFirst\":\"Dialogs_chatFirst__1DF5G\",\"chatSecond\":\"Dialogs_chatSecond__4iTXz\",\"send\":\"Dialogs_send__PFoVi\",\"chatThread\":\"Dialogs_chatThread__1FBb7\",\"show-chat-odd\":\"Dialogs_show-chat-odd__37s1o\",\"show-chat-even\":\"Dialogs_show-chat-even__2KCsM\",\"chat-window\":\"Dialogs_chat-window__TM8zu\",\"chat-window-message\":\"Dialogs_chat-window-message__gM9gc\",\"credits\":\"Dialogs_credits__1xWyY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItems_dialog__101JV\"};","import React from \"react\";\r\nimport s from './DialogItems.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React, { ChangeEvent } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItems\";\nimport Message from \"./Message/Message\";\nimport { DialogPageType } from \"../../redux/store\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { TextArea } from \"../Common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/Validators/validators\";\n\ntype StatePropsType = {\n  dialogsPage: DialogPageType;\n  sendMessage: (newMessageBody: string) => void;\n  updateNewMessageBody: (text: string) => void;\n  isAuth: boolean;\n};\n\ntype DialogPropsType = {\n  dialogs: Array<DialogsItemsType>;\n  messages: Array<MessagesItemsType>;\n};\ntype DialogsItemsType = {\n  name: string;\n  id: number;\n};\n\ntype MessagesItemsType = {\n  message: string;\n};\n\nconst maxLength = maxLengthCreator(100);\n\nconst Dialogs = (props: StatePropsType) => {\n  let state = props.dialogsPage;\n\n  let dialogElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ));\n\n  let messagesElements = state.messages.map((m) => (\n    <Message key={m.id} message={m.message} />\n  ));\n\n  const addNewMessage = (values: any) => {\n    console.log(values);\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div>\n      <div className={s.chatBlocks}>\n        <div className={s.chatFirst}>{dialogElements}</div>\n        <div className={s.chatSecond}>\n          <ul className={s.chatThread}>{messagesElements}</ul>\n          <ReduxMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AddMessageForm = (props: any) => {\n  return (\n    <div className=\"write\">\n      <form onSubmit={props.handleSubmit}>\n        <Field\n          component={TextArea}\n          validate={[required, maxLength]}\n          name={\"newMessageBody\"}\n          placeholder={\"Enter your message\"}\n        />\n        <button className={s.send}></button>\n      </form>\n    </div>\n  );\n};\n\nconst ReduxMessageForm = reduxForm({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n\nexport default Dialogs;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nlet mapStateToPropsForRedirect = (state?: any) => ({\n  isAuth: state.auth.isAuth,\n});\nexport function withAuthRedirect<T>(Component: React.ComponentType) {\n  class RedirectComponent extends React.Component<any, any> {\n    render() {\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\n      return <Component {...(this.props as T)} />;\n    }\n  }\n\n  let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n\n  return ConnectedRedirectComponent;\n}\n","import React from \"react\";\nimport { addDialogActionCreator } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { RootStoreType } from \"../../redux/store\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\ntype dialogsContainerPropsType = {\n  store: RootStoreType;\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    sendMessage: (newMessageBody: string) => {\n      dispatch(addDialogActionCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}