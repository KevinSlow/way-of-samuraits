{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItems.module.css","components/Dialogs/DialogItem/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","name","Message","message","maxLength","maxLengthCreator","ReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","send","Dialogs","state","dialogsPage","dialogElements","dialogs","map","d","messagesElements","messages","m","chatBlocks","chatFirst","chatSecond","chatThread","values","console","log","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","addDialogActionCreator","Component","RedirectComponent","this","React"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,cAAc,6BAA6B,GAAK,oBAAoB,WAAa,4BAA4B,UAAY,2BAA2B,WAAa,4BAA4B,KAAO,sBAAsB,WAAa,4BAA4B,gBAAgB,+BAA+B,iBAAiB,gCAAgC,cAAc,6BAA6B,sBAAsB,qCAAqC,QAAU,2B,oBCA5pBD,EAAOC,QAAU,CAAC,OAAS,8B,uHCkBZC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,eAAC,IAAD,CAASC,GAAIL,EAAb,cAAqBD,EAAMO,KAA3B,UCEGC,EARC,SAACR,GACb,OAEQ,6BAAKA,EAAMS,W,iCCuBjBC,EAAYC,YAAiB,KAiD7BC,EAAmBC,YAAU,CAC/BC,KAAM,wBADeD,EAXF,SAACb,GACpB,OACI,qBAAKG,UAAU,QAAf,SACI,uBAAMY,SAAUf,EAAMgB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAYH,KAAM,iBAAmBe,YAAa,uBACnG,wBAASnB,UAAWC,IAAEmB,eAWvBC,EApDC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAGdC,EAAiBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAiBL,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAE3E6B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OACtC,cAAC,EAAD,CAAoBxB,QAASwB,EAAExB,SAAjBwB,EAAE/B,OAUpB,OACI,8BACI,sBAAKC,UAAWC,IAAE8B,WAAlB,UACI,qBAAK/B,UAAWC,IAAE+B,UAAlB,SACKR,IAEL,sBAAKxB,UAAWC,IAAEgC,WAAlB,UACI,oBAAIjC,UAAWC,IAAEiC,WAAjB,SACKN,IAEL,cAACnB,EAAD,CAAkBG,SAhBZ,SAACuB,GACnBC,QAAQC,IAAIF,GACZtC,EAAMyC,YAAYH,EAAOI,4B,uDC/C7BC,EAA6B,SAAClB,GAAD,MAAkB,CACjDmB,OAAQnB,EAAMoB,KAAKD,S,QCsBNE,4BACbC,aAfsB,SAACtB,GACvB,MAAO,CACLC,YAAaD,EAAMC,gBAII,SAACsB,GAC1B,MAAO,CACLP,YAAa,SAACC,GACZM,EAASC,YAAuBP,UDfN,SAACQ,GAAoB,IAC7CC,EAD4C,uKAG9C,OAAKC,KAAKpD,MAAM4C,OACT,cAACM,EAAD,eAAeE,KAAKpD,QADI,cAAC,IAAD,CAAUM,GAAI,eAHC,GAClB+C,IAAMH,WAWtC,OAJiCH,YAAQJ,EAARI,CAC/BI,KCWWL,CAGbtB","file":"static/js/5.12749ab1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1K0Lf\",\"dialogItems\":\"Dialogs_dialogItems__Bb7ML\",\"active\":\"Dialogs_active__2YNs0\",\"messages\":\"Dialogs_messages__2_Q8g\",\"message\":\"Dialogs_message__1rGvK\",\"text-center\":\"Dialogs_text-center__2uRE7\",\"cf\":\"Dialogs_cf__2T-fW\",\"chatBlocks\":\"Dialogs_chatBlocks__BD3ao\",\"chatFirst\":\"Dialogs_chatFirst__1DF5G\",\"chatSecond\":\"Dialogs_chatSecond__4iTXz\",\"send\":\"Dialogs_send__PFoVi\",\"chatThread\":\"Dialogs_chatThread__1FBb7\",\"show-chat-odd\":\"Dialogs_show-chat-odd__37s1o\",\"show-chat-even\":\"Dialogs_show-chat-even__2KCsM\",\"chat-window\":\"Dialogs_chat-window__TM8zu\",\"chat-window-message\":\"Dialogs_chat-window-message__gM9gc\",\"credits\":\"Dialogs_credits__1xWyY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItems_dialog__101JV\"};","import React from \"react\";\r\nimport s from './DialogItems.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/Validators/validators\";\r\n\r\n\r\ntype StatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageBody: string) => void,\r\n    updateNewMessageBody: (text: string) => void,\r\n    isAuth: boolean\r\n};\r\n\r\ntype DialogPropsType = {\r\n    dialogs: Array<DialogsItemsType>,\r\n    messages: Array<MessagesItemsType>,\r\n\r\n}\r\ntype DialogsItemsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\ntype MessagesItemsType = {\r\n    message: string,\r\n\r\n}\r\n\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\n\r\nconst Dialogs = (props: StatePropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages.map((m) => (\r\n        <Message key={m.id} message={m.message}/>\r\n    ))\r\n\r\n\r\n    const addNewMessage = (values: any) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.chatBlocks}>\r\n                <div className={s.chatFirst}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.chatSecond}>\r\n                    <ul className={s.chatThread}>\r\n                        {messagesElements}\r\n                    </ul>\r\n                    <ReduxMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <div className=\"write\">\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={TextArea} validate={[required, maxLength]} name={\"newMessageBody\"}  placeholder={\"Enter your message\"}/>\r\n                <button  className={s.send}></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxMessageForm = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nlet mapStateToPropsForRedirect = (state?: any) => ({\n  isAuth: state.auth.isAuth,\n});\nexport const withAuthRedirect = (Component: any) => {\n  class RedirectComponent extends React.Component<any, any> {\n    render() {\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\n      return <Component {...this.props} />;\n    }\n  }\n\n  let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n\n  return ConnectedRedirectComponent;\n};\n","import React from \"react\";\nimport { addDialogActionCreator } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { RootStoreType } from \"../../redux/store\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\ntype dialogsContainerPropsType = {\n  store: RootStoreType;\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    sendMessage: (newMessageBody: string) => {\n      dispatch(addDialogActionCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}