{"version":3,"sources":["pages/chat/chatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","Dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","window","gMessages","Messages","obj","TypeError","messages","messagesAncorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","push","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","console","log","src","photo","width","alt","userName","AddMessageForm","dispatch","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"6LAwBMA,EAAiB,WACrB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKH,UAS3D,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,IAGD,gCACc,UAAXN,GACC,8EAEF,cAAC,EAAD,IACA,cAAC,EAAD,QAMNO,OAAOC,UAAY,GAEnB,IAAMC,EAAqB,SAAC,ICjDb,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDgDH,IAClC,IAAMC,EAAWX,aAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKS,YACvDC,EAAmBC,iBAAuB,MAFf,EAGOC,oBAAS,GAHhB,mBAG1BC,EAH0B,KAGZC,EAHY,KAwBjC,OARAb,qBAAU,WACW,IAAD,EAAdY,IACF,UAAAH,EAAiBK,eAAjB,SAA0BC,eAAe,CAAEC,SAAU,cAEtD,CAACR,IAGJJ,UAAUa,KAAKT,GAEb,sBACEU,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,SAvBkB,SAACC,GACrB,IAAIC,EAAUD,EAAEE,cAEdC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYlC,UAIGL,EAASsB,KAAI,SAACC,EAAGC,GAAJ,OACZ,cAACC,EAAD,CAASC,QAASH,GAAQA,EAAEI,OAE9B,qBAAKC,IAAK3B,QAKVwB,EAAkDI,IAAMC,MAC5D,YAAkB,IAAfJ,EAAc,EAAdA,QAGD,OAFAK,QAAQC,IAAI,iBAGV,gCACE,qBAAKC,IAAKP,EAAQQ,MAAOxB,MAAO,CAAEyB,MAAO,QAAUC,IAAI,KAAM,IAC7D,4BAAIV,EAAQW,WACZ,uBACCX,EAAQA,QACT,6BAMFY,EAA2B,WAC/B,IAAMC,EAAWpD,cADoB,EAEPgB,mBAAS,IAFF,mBAE9BuB,EAF8B,KAErBc,EAFqB,OAGCrC,mBACpC,WAJmC,mBAO/Bf,GAP+B,UAOtBC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKH,WAW3D,OACE,gCACE,8BACE,0BACEqD,SAAU,SAAC3B,GAAD,OAAO0B,EAAW1B,EAAEE,cAAc0B,QAC5CA,MAAOhB,MAGX,8BACE,wBAAQiB,SAAqB,UAAXvD,EAAoBwD,QAlBjB,WACpBlB,IAILa,EAASM,YAAYnB,IACrBc,EAAW,MAYP,wBAQOM,UAzHY,WACzB,OACE,8BACE,cAAC,EAAD","file":"static/js/6.17a38f0c.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from \"../../redux/chatReducer\";\nimport { AppState, StateType } from \"../../redux/reduxStore\";\n\nexport type ChatMessageType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n};\n\nconst ChatPage: React.FC = () => {\n  return (\n    <div>\n      <Chat />\n    </div>\n  );\n};\n\nconst Chat: React.FC = () => {\n  const Dispatch = useDispatch();\n  const status = useSelector((state: AppState) => state.chat.status);\n\n  useEffect(() => {\n    Dispatch(startMessagesListening());\n    return () => {\n      Dispatch(stopMessagesListening());\n    };\n  }, []);\n\n  return (\n    <div>\n      {status === \"error\" && (\n        <div>Some error occured. Please refresh the page</div>\n      )}\n      <Messages />\n      <AddMessageForm />\n    </div>\n  );\n};\n\n// @ts-ignore\nwindow.gMessages = [];\n\nconst Messages: React.FC = ({}) => {\n  const messages = useSelector((state: AppState) => state.chat.messages);\n  const messagesAncorRef = useRef<HTMLDivElement>(null);\n  const [isAutoScroll, setIsAutoScroll] = useState(false);\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    var element = e.currentTarget;\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight\n      ) < 300\n    ) {\n      !isAutoScroll && setIsAutoScroll(true);\n    } else {\n      isAutoScroll && setIsAutoScroll(false);\n    }\n  };\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAncorRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  //@ts-ignore\n  gMessages.push(messages);\n  return (\n    <div\n      style={{ height: \"200px\", overflowY: \"auto\" }}\n      onScroll={scrollHandler}\n    >\n      {messages.map((m, index) => (\n        <Message message={m} key={m.id} />\n      ))}\n      <div ref={messagesAncorRef}></div>\n    </div>\n  );\n};\n\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(\n  ({ message }) => {\n    console.log(\">>>>> MESSAGE\");\n\n    return (\n      <div>\n        <img src={message.photo} style={{ width: \"30px\" }} alt=\"\" />{\" \"}\n        <b>{message.userName}</b>\n        <br />\n        {message.message}\n        <hr />\n      </div>\n    );\n  }\n);\n\nconst AddMessageForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n  const [readyStatus, setReadyStatus] = useState<\"pending\" | \"ready\">(\n    \"pending\"\n  );\n\n  const status = useSelector((state: AppState) => state.chat.status);\n\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    }\n\n    dispatch(sendMessage(message));\n    setMessage(\"\");\n  };\n  debugger;\n  return (\n    <div>\n      <div>\n        <textarea\n          onChange={(e) => setMessage(e.currentTarget.value)}\n          value={message}\n        />\n      </div>\n      <div>\n        <button disabled={status !== \"ready\"} onClick={sendMessageHandler}>\n          send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}