{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItems.module.css","components/Dialogs/DialogItem/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","name","Message","message","maxLength","maxLengthCreator","ReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","CreateField","required","TextArea","type","htmlType","Dialogs","state","dialogsPage","dialogElements","dialogs","map","d","messagesElements","messages","m","chatBlocks","chatFirst","chatSecond","chatThread","values","console","log","addDialogAction","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","actions","compose","connect","WrappedComponent","restProps"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,cAAc,6BAA6B,GAAK,oBAAoB,WAAa,4BAA4B,UAAY,2BAA2B,WAAa,4BAA4B,KAAO,sBAAsB,WAAa,4BAA4B,gBAAgB,+BAA+B,iBAAiB,gCAAgC,cAAc,6BAA6B,sBAAsB,qCAAqC,QAAU,2B,qBCA5pBD,EAAOC,QAAU,CAAC,OAAS,8B,iHCkBZC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,eAAC,IAAD,CAASC,GAAIL,EAAb,cAAqBD,EAAMO,KAA3B,UCEGC,EARC,SAACR,GACb,OAEQ,6BAAKA,EAAMS,W,mCCyBjBC,EAAYC,YAAiB,KA2D7BC,EAAmBC,YAAgD,CACvEC,KAAM,wBADiBD,EAjBrB,SAACb,GACH,OACE,qBAAKG,UAAU,QAAf,SACE,uBAAMY,SAAUf,EAAMgB,aAAtB,UACGC,YACC,qBACA,iBACA,CAACC,IAAUR,GACXS,IACA,CAAEC,KAAM,SAEV,cAAC,IAAD,CAAQC,SAAU,SAAlB,4BAUOC,EAnDyB,SAACtB,GACvC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACrC,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBL,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,OAG/B2B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OACxC,cAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,SAAjBsB,EAAE7B,OAQlB,OACE,8BACE,sBAAKC,UAAWC,IAAE4B,WAAlB,UACE,qBAAK7B,UAAWC,IAAE6B,UAAlB,SAA8BR,IAC9B,sBAAKtB,UAAWC,IAAE8B,WAAlB,UACE,oBAAI/B,UAAWC,IAAE+B,WAAjB,SAA8BN,IAC9B,cAACjB,EAAD,CAAkBG,SAXJ,SAACqB,GACrBC,QAAQC,IAAIF,GACZpC,EAAMuC,gBAAgBH,EAAOI,4B,wBCxD7BC,EAA6B,SAAClB,GAAD,MAAuB,CACtDmB,OAAQnB,EAAMoB,KAAKD,S,qBCSrBL,QAAQC,IAAIM,KACGC,sBACbC,aAPsB,SAACvB,GACvB,MAAO,CACLC,YAAaD,EAAMC,eAKd,eAAuBoB,ODJzB,SACLG,GAgBA,OAPiCD,YAK/BL,EAL+BK,EAPwB,SAAC9C,GACzBA,EAAzB0C,OAD6D,IAClDM,EADiD,YACnChD,EADmC,YAElE,OAAKA,EAAM0C,OAEJ,cAACK,EAAD,eAAwBC,IAFL,cAAC,IAAD,CAAU1C,GAAI,gBCF7BuC,CAGbvB","file":"static/js/4.728cd711.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1K0Lf\",\"dialogItems\":\"Dialogs_dialogItems__Bb7ML\",\"active\":\"Dialogs_active__2YNs0\",\"messages\":\"Dialogs_messages__2_Q8g\",\"message\":\"Dialogs_message__1rGvK\",\"text-center\":\"Dialogs_text-center__2uRE7\",\"cf\":\"Dialogs_cf__2T-fW\",\"chatBlocks\":\"Dialogs_chatBlocks__BD3ao\",\"chatFirst\":\"Dialogs_chatFirst__1DF5G\",\"chatSecond\":\"Dialogs_chatSecond__4iTXz\",\"send\":\"Dialogs_send__PFoVi\",\"chatThread\":\"Dialogs_chatThread__1FBb7\",\"show-chat-odd\":\"Dialogs_show-chat-odd__37s1o\",\"show-chat-even\":\"Dialogs_show-chat-even__2KCsM\",\"chat-window\":\"Dialogs_chat-window__TM8zu\",\"chat-window-message\":\"Dialogs_chat-window-message__gM9gc\",\"credits\":\"Dialogs_credits__1xWyY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItems_dialog__101JV\"};","import React from \"react\";\r\nimport s from './DialogItems.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React, { ChangeEvent, Props } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItems\";\nimport Message from \"./Message/Message\";\nimport { DialogPageType } from \"../../redux/_store\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport {\n  CreateField,\n  MyInput,\n  TextArea,\n} from \"../Common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/Validators/validators\";\nimport { InitialStateType } from \"../../redux/dialogsReducer\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button } from \"antd\";\n\ntype StatePropsType = {\n  dialogsPage: DialogPageType;\n  addDialogAction: (newMessageBody: string) => void;\n  updateNewMessageBody: (text: string) => void;\n  isAuth: boolean;\n};\n\ntype DialogPropsType = {\n  dialogs: Array<DialogsItemsType>;\n  messages: Array<MessagesItemsType>;\n};\ntype DialogsItemsType = {\n  name: string;\n  id: number;\n};\n\ntype MessagesItemsType = {\n  message: string;\n};\n\nconst maxLength = maxLengthCreator(100);\n\ntype OwnPropsType = {\n  dialogsPage: InitialStateType;\n  addDialogAction: (newMessageBody: string) => void;\n};\nexport type NewMessageFormValuesType = {\n  newMessageBody: string;\n};\ntype PropsType = {};\ntype NewMessageValuesTypeKeys = Extract<keyof NewMessageFormValuesType, string>;\n\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\n  let state = props.dialogsPage;\n\n  let dialogElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ));\n\n  let messagesElements = state.messages.map((m) => (\n    <Message key={m.id} message={m.message} />\n  ));\n\n  const addNewMessage = (values: { newMessageBody: string }) => {\n    console.log(values);\n    props.addDialogAction(values.newMessageBody);\n  };\n\n  return (\n    <div>\n      <div className={s.chatBlocks}>\n        <div className={s.chatFirst}>{dialogElements}</div>\n        <div className={s.chatSecond}>\n          <ul className={s.chatThread}>{messagesElements}</ul>\n          <ReduxMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n};\nconst AddMessageForm: React.FC<\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\n> = (props) => {\n  return (\n    <div className=\"write\">\n      <form onSubmit={props.handleSubmit}>\n        {CreateField<NewMessageValuesTypeKeys>(\n          \"Enter your message\",\n          \"newMessageBody\",\n          [required, maxLength],\n          TextArea,\n          { type: \"text\" }\n        )}\n        <Button htmlType={\"submit\"}>Button</Button>\n      </form>\n    </div>\n  );\n};\n\nconst ReduxMessageForm = reduxForm<NewMessageFormValuesType & PropsType>({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n\nexport default Dialogs;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { StateType } from \"../redux/reduxStore\";\n\nlet mapStateToPropsForRedirect = (state: StateType) => ({\n  isAuth: state.auth.isAuth,\n});\n\ntype MapStateToPropsType = {\n  isAuth: boolean;\n};\n\nexport function withAuthRedirect<WCP>(\n  WrappedComponent: React.ComponentType<WCP>\n) {\n  const RedirectComponent: React.FC<MapStateToPropsType> = (props) => {\n    let { isAuth, ...restProps } = props;\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\n\n    return <WrappedComponent {...((restProps as unknown) as WCP)} />;\n  };\n\n  let ConnectedRedirectComponent = connect<\n    MapStateToPropsType,\n    {},\n    WCP,\n    StateType\n  >(mapStateToPropsForRedirect)(RedirectComponent);\n\n  return ConnectedRedirectComponent;\n}\n","import React, { ComponentType } from \"react\";\nimport Dialogs from \"./Dialogs\";\n\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nimport { actions } from \"../../redux/dialogsReducer\";\nimport { StateType } from \"../../redux/reduxStore\";\n\nconst mapStateToProps = (state: StateType) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\nconsole.log(actions);\nexport default compose<ComponentType>(\n  connect(mapStateToProps, { ...actions }),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}