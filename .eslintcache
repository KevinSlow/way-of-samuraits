[{"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts":"1","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx":"2","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx":"3","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx":"4","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx":"5","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx":"6","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx":"8","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx":"9","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx":"11","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx":"12","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx":"13","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx":"14","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx":"15","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx":"16","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx":"17","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx":"18","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx":"19","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"21","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx":"22","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx":"23","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx":"24","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx":"26","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts":"27","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts":"28","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts":"29","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts":"30","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts":"31","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts":"32","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts":"33","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts":"34","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts":"35","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx":"36","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts":"37","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"38","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts":"39","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts":"40","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"41","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts":"42","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts":"43","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts":"44","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts":"45","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx":"46","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx":"47","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx":"48","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx":"49","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx":"50","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"51","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\types\\types.ts":"52","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\usersAPI.ts":"53","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\authAPI.ts":"54","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\profileAPI.ts":"55","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\securityAPI.ts":"56","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\_store.ts":"57"},{"size":545,"mtime":1611361149495,"results":"58","hashOfConfig":"59"},{"size":318,"mtime":1609113482435,"results":"60","hashOfConfig":"59"},{"size":3448,"mtime":1611420086447,"results":"61","hashOfConfig":"59"},{"size":260,"mtime":1609113482443,"results":"62","hashOfConfig":"59"},{"size":444,"mtime":1609113482444,"results":"63","hashOfConfig":"59"},{"size":2694,"mtime":1611417880749,"results":"64","hashOfConfig":"59"},{"size":535,"mtime":1611418525564,"results":"65","hashOfConfig":"59"},{"size":266,"mtime":1609113482446,"results":"66","hashOfConfig":"59"},{"size":3725,"mtime":1609113482447,"results":"67","hashOfConfig":"59"},{"size":522,"mtime":1610912448138,"results":"68","hashOfConfig":"59"},{"size":2892,"mtime":1611188634745,"results":"69","hashOfConfig":"59"},{"size":152,"mtime":1609113482449,"results":"70","hashOfConfig":"59"},{"size":1724,"mtime":1611362597932,"results":"71","hashOfConfig":"59"},{"size":149,"mtime":1609113482451,"results":"72","hashOfConfig":"59"},{"size":703,"mtime":1610308705295,"results":"73","hashOfConfig":"59"},{"size":1072,"mtime":1611368543019,"results":"74","hashOfConfig":"59"},{"size":680,"mtime":1609423638531,"results":"75","hashOfConfig":"59"},{"size":949,"mtime":1611417929706,"results":"76","hashOfConfig":"59"},{"size":2498,"mtime":1611368631130,"results":"77","hashOfConfig":"59"},{"size":2901,"mtime":1609636414947,"results":"78","hashOfConfig":"59"},{"size":1590,"mtime":1610240282472,"results":"79","hashOfConfig":"59"},{"size":112,"mtime":1609636333869,"results":"80","hashOfConfig":"59"},{"size":1126,"mtime":1610239127799,"results":"81","hashOfConfig":"59"},{"size":2525,"mtime":1611357025199,"results":"82","hashOfConfig":"59"},{"size":829,"mtime":1611420126652,"results":"83","hashOfConfig":"59"},{"size":467,"mtime":1609636316800,"results":"84","hashOfConfig":"59"},{"size":41,"mtime":1609113482462,"results":"85","hashOfConfig":"59"},{"size":2873,"mtime":1611366514395,"results":"86","hashOfConfig":"59"},{"size":1616,"mtime":1611416716332,"results":"87","hashOfConfig":"59"},{"size":3905,"mtime":1611413988158,"results":"88","hashOfConfig":"59"},{"size":1378,"mtime":1611416180238,"results":"89","hashOfConfig":"59"},{"size":738,"mtime":1610231488735,"results":"90","hashOfConfig":"59"},{"size":3993,"mtime":1611369119086,"results":"91","hashOfConfig":"59"},{"size":441,"mtime":1609113482467,"results":"92","hashOfConfig":"59"},{"size":241,"mtime":1609636311793,"results":"93","hashOfConfig":"59"},{"size":997,"mtime":1609113482452,"results":"94","hashOfConfig":"59"},{"size":387,"mtime":1611103717328,"results":"95","hashOfConfig":"59"},{"size":1763,"mtime":1611187349431,"results":"96","hashOfConfig":"59"},{"size":1021,"mtime":1611366497336,"results":"97","hashOfConfig":"59"},{"size":777,"mtime":1610237016616,"results":"98","hashOfConfig":"59"},{"size":1161,"mtime":1609698389271,"results":"99","hashOfConfig":"59"},{"size":1271,"mtime":1611368068028,"results":"100","hashOfConfig":"59"},{"size":1107,"mtime":1609113482463,"results":"101","hashOfConfig":"59"},{"size":449,"mtime":1609113482466,"results":"102","hashOfConfig":"59"},{"size":250,"mtime":1610129999299,"results":"103","hashOfConfig":"59"},{"size":1788,"mtime":1610240043855,"results":"104","hashOfConfig":"59"},{"size":1442,"mtime":1609636302115,"results":"105","hashOfConfig":"59"},{"size":2141,"mtime":1609113482456,"results":"106","hashOfConfig":"59"},{"size":862,"mtime":1610239911430,"results":"107","hashOfConfig":"59"},{"size":289,"mtime":1611418830744,"results":"108","hashOfConfig":"59"},{"size":1513,"mtime":1611186760030,"results":"109","hashOfConfig":"59"},{"size":1266,"mtime":1611368614255,"results":"110","hashOfConfig":"59"},{"size":816,"mtime":1611359785710,"results":"111","hashOfConfig":"59"},{"size":992,"mtime":1611361149454,"results":"112","hashOfConfig":"59"},{"size":1185,"mtime":1611413571797,"results":"113","hashOfConfig":"59"},{"size":356,"mtime":1611361797959,"results":"114","hashOfConfig":"59"},{"size":3208,"mtime":1611366085207,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7p7rf",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"218"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx",["252","253"],"import React, { ComponentType, Suspense } from \"react\";\n\nimport \"./App.css\";\n\nimport Nav from \"./components/Navbar/Nav\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport {\n  HashRouter,\n  Redirect,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport { RootStoreType } from \"./redux/_store\";\n\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport { connect, Provider } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport PreLoader from \"./components/Common/Preloader/Preloader\";\nimport store from \"./redux/reduxStore\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport { AppState, StateType } from \"./types/types\";\n\nconst DialogsContainer = React.lazy(\n  () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst ProfileContainer = React.lazy(\n  () => import(\"./components/Profile/ProfileContainer\")\n);\nconst UsersContainer = React.lazy(\n  () => import(\"./components/Users/UsersContainer\")\n);\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n  initializeApp: () => void;\n};\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error Occurred\");\n    // console.error(promiseRejectionEvent);\n  };\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnhandledErrors\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <PreLoader />;\n    }\n\n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainer />\n        <Nav />\n        <div className=\"app-wrapper-content\">\n          <Switch>\n            <Route exact render={() => <Redirect to={\"/profile\"} />} path=\"/\" />\n            <Route\n              exact\n              render={() => withSuspense(DialogsContainer)}\n              path=\"/dialogs\"\n            />\n            <Route\n              exact\n              render={withSuspense(ProfileContainer)}\n              path=\"/profile/:userId?\"\n            />\n            <Route exact component={News} path=\"/news\" />\n            <Route exact component={Music} path=\"/music\" />\n            <Route exact component={Settings} path=\"/settings\" />\n            <Route\n              exact\n              render={() => <UsersContainer pageTitle={\"Самураи\"} />}\n              path=\"/users\"\n            />\n            <Route exact render={withSuspense(LoginPage)} path=\"/login\" />\n            <Route exact render={() => <div>404 Not Found</div>} path=\"*\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StateType) => ({\n  initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nexport const SamuraiJSApp: React.FC = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <Suspense fallback={<div>Loading... </div>}>\n          <AppContainer />\n        </Suspense>\n      </Provider>\n    </HashRouter>\n  );\n};\n\nexport default SamuraiJSApp;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx",["254","255","256","257","258","259","260"],"import React, { ChangeEvent, Props } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItems\";\nimport Message from \"./Message/Message\";\nimport { DialogPageType } from \"../../redux/_store\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport {\n  CreateField,\n  Input,\n  TextArea,\n} from \"../Common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/Validators/validators\";\nimport { InitialStateType } from \"../../redux/dialogsReducer\";\nimport { Redirect } from \"react-router-dom\";\n\ntype StatePropsType = {\n  dialogsPage: DialogPageType;\n  sendMessage: (newMessageBody: string) => void;\n  updateNewMessageBody: (text: string) => void;\n  isAuth: boolean;\n};\n\ntype DialogPropsType = {\n  dialogs: Array<DialogsItemsType>;\n  messages: Array<MessagesItemsType>;\n};\ntype DialogsItemsType = {\n  name: string;\n  id: number;\n};\n\ntype MessagesItemsType = {\n  message: string;\n};\n\nconst maxLength = maxLengthCreator(100);\n\ntype OwnPropsType = {\n  dialogsPage: InitialStateType;\n  sendMessage: (newMessageBody: string) => void;\n};\nexport type NewMessageFormValuesType = {\n  newMessageBody: string;\n};\ntype PropsType = {};\ntype NewMessageValuesTypeKeys = Extract<keyof NewMessageFormValuesType, string>;\n\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\n  let state = props.dialogsPage;\n\n  let dialogElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ));\n\n  let messagesElements = state.messages.map((m) => (\n    <Message key={m.id} message={m.message} />\n  ));\n\n  const addNewMessage = (values: { newMessageBody: string }) => {\n    console.log(values);\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div>\n      <div className={s.chatBlocks}>\n        <div className={s.chatFirst}>{dialogElements}</div>\n        <div className={s.chatSecond}>\n          <ul className={s.chatThread}>{messagesElements}</ul>\n          <ReduxMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AddMessageForm: React.FC<\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\n> = (props) => {\n  return (\n    <div className=\"write\">\n      <form onSubmit={props.handleSubmit}>\n        {CreateField<NewMessageValuesTypeKeys>(\n          \"Enter your message\",\n          \"newMessageBody\",\n          [required, maxLength],\n          TextArea,\n          { type: \"text\" }\n        )}\n\n        <button className={s.send}></button>\n      </form>\n    </div>\n  );\n};\n\nconst ReduxMessageForm = reduxForm<NewMessageFormValuesType & PropsType>({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n\nexport default Dialogs;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx",["261"],"import React, { ComponentType } from \"react\";\nimport Dialogs from \"./Dialogs\";\n\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { StateType } from \"../../types/types\";\nimport { actions } from \"../../redux/dialogsReducer\";\n\nconst mapStateToProps = (state: StateType) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nexport default compose<ComponentType>(\n  connect(mapStateToProps, { ...actions }),\n  withAuthRedirect\n)(Dialogs);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx",["262"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx",["263"],"import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { CreateField, Input } from \"../Common/FormsControls/FormsControls\";\nimport { required } from \"../../utils/Validators/validators\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport s from \"../Common/FormsControls/FormsControls.module.css\";\nimport { StateType } from \"../../types/types\";\n\ntype LoginFormOwnProps = {\n  captchaUrl: string | null;\n};\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\n> = ({ handleSubmit, error, captchaUrl, ...restProps }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {CreateField<LoginFormValuesTypeKeys>(\n        \"email\",\n        \"email\",\n        [required],\n        Input,\n        { type: \"text\" }\n      )}\n      {CreateField<LoginFormValuesTypeKeys>(\n        \"password\",\n        \"password\",\n        [required],\n        Input,\n        {\n          type: \"password\",\n        }\n      )}\n      {CreateField<LoginFormValuesTypeKeys>(\n        \"\",\n        \"rememberMe\",\n        [],\n        Input,\n        { type: \"checkbox\" },\n        \"remember Me\"\n      )}\n\n      {captchaUrl && <img src={captchaUrl} alt=\"\" />}\n      {captchaUrl &&\n        CreateField<LoginFormValuesTypeKeys>(\n          \"Symbols from image\",\n          \"captcha\",\n          [required],\n          Input,\n          {}\n        )}\n\n      {error && <div className={s.formSummaryError}>{error}</div>}\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n  form: \"login\",\n})(LoginForm);\n\ntype MapStatePropsType = {\n  captchaUrl: string | null;\n  isAuth: boolean;\n};\ntype MapDispatchPropsType = {\n  login: (\n    email: number | null,\n    password: string,\n    rememberMe: string | null,\n    captcha: null | undefined\n  ) => void;\n};\n\nexport type LoginFormValuesType = {\n  captcha: null | undefined;\n  rememberMe: string | null;\n  password: string;\n  email: number | null;\n};\n\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>;\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n  const onSubmit = (formData: LoginFormValuesType) => {\n    console.log(formData);\n\n    props.login(\n      formData.email,\n      formData.password,\n      formData.rememberMe,\n      formData.captcha\n    );\n  };\n\n  if (props.isAuth) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\n  captchaUrl: state.auth.captchaUrl,\n  isAuth: state.auth.isAuth,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx",["264"],"import React from \"react\";\nimport s from \"./Nav.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport _store from \"../../redux/_store\";\n\ntype NavStateType = {\n  state: NavPropsType;\n};\n\ntype NavPropsType = {\n  friends: Array<FriendsType>;\n};\n\ntype FriendsType = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nconst Nav = () => {\n  let { sideBar: state } = _store.getState();\n\n  let friendsMessages = state.friends.map((f: FriendsType) => (\n    <div className={s.friendsBlock}>\n      <img className={s.friendsImg} src={f.imgUrl} alt=\"friends\" />\n      <NavLink to={\"/profile/\" + f.id}>\n        <p>{f.name}</p>\n      </NavLink>\n    </div>\n  ));\n\n  return (\n    <div>\n      <nav className={s.nav}>\n        <div className={`${s.item}`}>\n          <NavLink to=\"/profile\" activeClassName={s.active}>\n            Profile\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/dialogs\" activeClassName={s.active}>\n            Messages\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/news\" activeClassName={s.active}>\n            News\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/music\" activeClassName={s.active}>\n            Music\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/settings\" activeClassName={s.active}>\n            Settings\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/users\" activeClassName={s.active}>\n            Users\n          </NavLink>\n        </div>\n        <div className={s.friendsBlocks}>{friendsMessages}</div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Nav;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx",["265","266","267"],"import React from \"react\";\nimport { RootStoreType } from \"../../../redux/_store\";\nimport { connect } from \"react-redux\";\nimport Profile from \"../Profile\";\nimport MyPosts, { PostType } from \"./MyPosts\";\nimport { StateType } from \"../../../types/types\";\nimport { actions } from \"../../../redux/profileReducer\";\n\ntype myPostsContainerPropsType = {\n  store: RootStoreType;\n};\n\ntype MapStateToProps = {\n  post: Array<PostType>;\n  newPostText: string;\n};\n\ntype MapDispatchToProps = {\n  addPosts: (newPostText: string) => void;\n};\n\nconst mapStateToProps = (state: StateType): MapStateToProps => {\n  return {\n    post: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchToProps => {\n  return {\n    addPosts: (newPostText) => {\n      dispatch(actions.addPostActionCreator(newPostText));\n    },\n  };\n};\n\nconst MyPostsContainer: any = connect<\n  MapStateToProps,\n  unknown,\n  MapDispatchToProps,\n  StateType\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(MyPosts);\n\nexport default MyPostsContainer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx",["268"],"import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\n\nimport { ProfileType } from \"../../types/types\";\n\ntype Profile = {\n  isOwner: boolean;\n  status: string;\n  updateStatus: () => void;\n  savePhoto: () => void;\n};\n\ntype ProfileTypeProps = {\n  setUserProfile: (userId: number | null) => void;\n  getStatus: (userId: number) => void;\n  savePhoto: () => void;\n  updateStatus: () => void;\n  status: string;\n  saveProfile: () => void;\n  isOwner: boolean;\n  profile: ProfileType | null;\n};\n\nconst Profile = (props: ProfileTypeProps) => {\n  return (\n    <div>\n      <ProfileInfo\n        saveProfile={props.saveProfile}\n        savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx",["269"],"import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getStatus,\n  savePhoto,\n  saveProfile,\n  setUserProfile,\n  updateStatus,\n} from \"../../redux/profileReducer\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport {\n  DispatchType,\n  ProfileType,\n  StateType,\n  UserType,\n} from \"../../types/types\";\n\ntype MapStateToPropsType = {\n  authorizedUserId: number | null;\n  status: string;\n  profile: ProfileType | null;\n  isAuth: boolean;\n};\n\ntype MapDispatchPropsType = {\n  setUserProfile: (userId: number | null) => void;\n  getStatus: (userId: number) => void;\n  savePhoto: () => void;\n  updateStatus: () => void;\n  saveProfile: () => void;\n};\n\ntype OwnPropsType = {};\n\nexport type ProfileContainerType = MapStateToPropsType &\n  MapDispatchPropsType &\n  OwnPropsType;\n\nclass ProfileContainer extends React.Component<\n  StateType &\n    ProfileContainerType &\n    DispatchType &\n    RouteComponentProps<{ userId: string }>\n> {\n  refreshProfile() {\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.setUserProfile(userId);\n    if (typeof userId === \"number\") {\n      this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<any>,\n    prevState: Readonly<any>,\n    snapshot?: any\n  ) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        status={this.props.status}\n        saveProfile={this.props.saveProfile}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      />\n    );\n  }\n}\n\nlet mapStateToProps = (state: StateType): MapStateToPropsType => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n});\n\nexport default compose<any>(\n  connect<MapStateToPropsType, OwnPropsType, MapDispatchPropsType, StateType>(\n    mapStateToProps,\n    {\n      setUserProfile,\n      getStatus,\n      updateStatus,\n      savePhoto,\n      saveProfile,\n    }\n  ),\n  withRouter\n)(ProfileContainer);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["270"],"import React, { ChangeEvent, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport PreLoader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/img/image.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({\n  profile,\n  savePhoto,\n  isOwner,\n  status,\n  updateStatus,\n  saveProfile,\n}: any) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <PreLoader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: any) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      {/*<div>*/}\n      {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\n      {/*</div>*/}\n      <img\n        className={s.mainPhoto}\n        src={profile.photos.large || userPhoto}\n        alt=\"\"\n      />\n      {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      {editMode ? (\n        <ProfileDataForm\n          // @ts-ignore\n          profile={profile}\n          initialValues={profile}\n          onSubmit={onSubmit}\n        />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          goToEditMode={() => setEditMode(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode, ...props }: any) => {\n  return (\n    <div className={s.descriptionBlock}>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>\n      )}\n      <div>\n        Full Name\n        <div>{profile.fullName}</div>\n      </div>\n      <div>\n        About Me\n        <div>{profile.aboutMe}</div>\n      </div>\n      <div>\n        {profile.lookingForAJob && (\n          <div>\n            lookingForAJobDescription{\" \"}\n            <div>{profile.lookingForAJobDescription}</div>\n          </div>\n        )}\n      </div>\n      <div>\n        Looking for a Job: <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n      </div>\n      <div>\n        <div>\n          <b>Contacts:</b> :{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <Contacts\n                contactTitle={key}\n                contactValue={profile.contacts[key]}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Contacts = ({ contactTitle, contactValue }: any) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b> : {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx",["271"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { follow, requestUsers, unfollow } from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport PreLoader from \"../Common/Preloader/Preloader\";\nimport { compose } from \"redux\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getPageSize,\n  getTotalUserCount,\n  getUsers,\n} from \"../../redux/users-selectors\";\nimport { StateType, UserType } from \"../../types/types\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\ntype MapStateToPropsType = {\n  currentPage: number;\n  pageSize: number;\n  isFetching: boolean;\n  totalUserCount: number;\n  users: UserType[];\n  followingInProgress: number[];\n};\n\ntype MapDispatchPropsType = {\n  follow: (userId: number) => void;\n  getUsers: (currentPage: number, pageSize: number) => void;\n  unfollow: (userId: number) => void;\n};\n\ntype OwnPropsType = {\n  pageTitle: string;\n};\n\nexport type UserPropsContainerType = MapStateToPropsType &\n  MapDispatchPropsType &\n  OwnPropsType;\n\nclass UsersContainer extends React.Component<\n  UserPropsContainerType,\n  StateType\n> {\n  componentDidMount() {\n    let { currentPage, pageSize } = this.props;\n    this.props.getUsers(currentPage, pageSize);\n  }\n\n  onPageChanged = (pageNumber: number) => {\n    let { pageSize } = this.props;\n    this.props.getUsers(pageNumber, pageSize);\n  };\n\n  render(): JSX.Element {\n    return (\n      <>\n        <h2>{this.props.pageTitle}</h2>\n        {this.props.isFetching ? (\n          <PreLoader />\n        ) : (\n          <Users\n            totalUserCount={this.props.totalUserCount}\n            pageSize={this.props.pageSize}\n            currentPage={this.props.currentPage}\n            onPageChanged={this.onPageChanged}\n            users={this.props.users}\n            follow={this.props.follow}\n            unfollow={this.props.unfollow}\n            followingInProgress={this.props.followingInProgress}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state: StateType): MapStateToPropsType => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUserCount: getTotalUserCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n  };\n};\n\nexport default compose<any>(\n  connect<MapStateToPropsType, MapDispatchPropsType, OwnPropsType, StateType>(\n    mapStateToProps,\n    {\n      follow,\n      unfollow: unfollow,\n      getUsers: requestUsers,\n    }\n  )\n)(UsersContainer);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts",["272","273"],"import { FormAction, stopSubmit } from \"redux-form\";\nimport { AppState, PhotosType, ProfileType, StateType } from \"../types/types\";\nimport { profileAPI } from \"../api/profileAPI\";\nimport store, {\n  ActionsType,\n  BaseThunkType,\n  InferActionsTypes,\n} from \"./reduxStore\";\n\nconst initialState = {\n  posts: [\n    { id: 1, message: \"Hi\", likesCount: 10 },\n    { id: 2, message: \"How is your day?\", likesCount: 20 },\n    { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n    { id: 4, message: \"Svetlana\", likesCount: 50 },\n    { id: 5, message: \"Trysa\", likesCount: 100 },\n    { id: 6, message: \"Fine\", likesCount: 3 },\n  ],\n  profile: null as ProfileType | null,\n  status: \"\",\n  newPostText: \"\",\n};\n\nconst profileReducer = (\n  state: initialStateType = initialState,\n  action: ProfileAction\n) => {\n  switch (action.type) {\n    case \"SN/PROFILE/ADD-POST\": {\n      let newPost = {\n        id: 5,\n        message: action.newPostText,\n        likesCount: 0,\n      };\n      return {\n        ...state,\n        posts: [...state.posts, newPost],\n        newPostText: \"\",\n      };\n    }\n\n    case \"SN/PROFILE/SET_STATUS\": {\n      return {\n        ...state,\n        status: action.status,\n      };\n    }\n    case \"SN/PROFILE/SET_USER_PROFILE\": {\n      return { ...state, profile: action.profile };\n    }\n\n    case \"SN/PROFILE/DELETE_POST\": {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.id !== action.postId),\n      };\n    }\n\n    case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\n      };\n    }\n  }\n  return state;\n};\n\nexport const actions = {\n  addPostActionCreator: (newPostText: string) =>\n    ({\n      type: \"SN/PROFILE/ADD-POST\",\n      newPostText,\n    } as const),\n  setUserProfileSuccess: (profile: ProfileType) =>\n    ({\n      type: \"SN/PROFILE/SET_USER_PROFILE\",\n      profile,\n    } as const),\n  deletePost: (postId: number) =>\n    ({\n      type: \"SN/PROFILE/DELETE_POST\",\n      postId,\n    } as const),\n  setStatus: (status: string) =>\n    ({\n      type: \"SN/PROFILE/SET_STATUS\",\n      status,\n    } as const),\n  savePhotoSuccess: (photos: PhotosType) =>\n    ({\n      type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\",\n      photos,\n    } as const),\n};\n// -----------\n// Redux-Thunk for async query\n// -----------\n\nexport const setUserProfile = (userId: number | null): ThunksType => async (\n  dispatch\n) => {\n  const data = await profileAPI.getUsersProfile(userId);\n  dispatch(actions.setUserProfileSuccess(data));\n};\n\nexport const getStatus = (userId: number): ThunksType => async (dispatch) => {\n  const data = await profileAPI.getStatus(userId);\n  dispatch(actions.setStatus(data));\n};\n\nexport const updateStatus = (status: string): ThunksType => async (\n  dispatch\n) => {\n  try {\n    let data = await profileAPI.updateStatus(status);\n    if (data.resultCode === 0) {\n      dispatch(actions.setStatus(status));\n    }\n  } catch (error) {\n    alert(error);\n  }\n};\n\nexport const savePhoto = (file: File): ThunksType => async (dispatch) => {\n  const data = await profileAPI.savePhoto(file);\n\n  if (data.resultCode === 0) {\n    dispatch(actions.savePhotoSuccess(data.data.photos));\n  }\n};\n\nexport const saveProfile = (profile: ProfileType): ThunksType => async (\n  dispatch\n) => {\n  const userId = store.getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n\n  if (data.resultCode === 0) {\n    if (userId != null) {\n      dispatch(setUserProfile(userId));\n    } else {\n      throw new Error(\"userId can't be null\");\n    }\n  } else {\n    dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }));\n    return Promise.reject(data.messages[0]);\n  }\n};\n\nexport type initialStateType = typeof initialState;\nexport type ProfileAction = InferActionsTypes<typeof actions>;\ntype ThunksType = BaseThunkType<ActionsType | FormAction>;\n\nexport default profileReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts",["274","275","276","277","278","279","280","281"],"import { updateObjectInArray } from \"../hoc/objectsHelpers\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport {\n  AppState,\n  DispatchType,\n  IActionRecucerType,\n  StateType,\n  UserType,\n} from \"../types/types\";\nimport { Dispatch } from \"react\";\n\nimport { usersAPI } from \"../api/usersAPI\";\nimport { BaseThunkType, InferActionsTypes } from \"./reduxStore\";\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 5,\n  totalUserCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] as Array<number>,\n};\n\ntype InitialState = typeof initialState;\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialState => {\n  switch (action.type) {\n    case \"FOLLOW\":\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        }),\n      };\n    case \"UNFOLLOW\":\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: false,\n        }),\n      };\n    case \"SET_USERS\":\n      return { ...state, users: action.users };\n\n    case \"SET_CURRENT_PAGE\":\n      return { ...state, currentPage: action.currentPage };\n\n    case \"SET_TOTAL_USERS_COUNT\":\n      return { ...state, totalUserCount: action.count };\n\n    case \"TOGGLE_IS_FETCHING\":\n      return { ...state, isFetching: action.isFetching };\n\n    case \"TOGGLE_FOLLOWING_PROGRESS\":\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter((id) => id != action.userId),\n      };\n  }\n  return state;\n};\n\nexport const actions = {\n  followSuccess: (userId: number) =>\n    ({\n      type: \"FOLLOW\",\n      userId,\n    } as const),\n  unfollowSuccess: (userId: number) =>\n    ({\n      type: \"UNFOLLOW\",\n      userId,\n    } as const),\n  setUsers: (users: Array<UserType>) =>\n    ({\n      type: \"SET_USERS\",\n      users,\n    } as const),\n\n  setCurrentPage: (currentPage: number) =>\n    ({\n      type: \"SET_CURRENT_PAGE\",\n      currentPage: currentPage,\n    } as const),\n  setTotalUserCount: (totalUserCount: number) =>\n    ({\n      type: \"SET_TOTAL_USERS_COUNT\",\n      count: totalUserCount,\n    } as const),\n  setIsFetching: (isFetching: boolean) =>\n    ({\n      type: \"TOGGLE_IS_FETCHING\",\n      isFetching,\n    } as const),\n  setFollowingProgress: (isFetching: boolean, userId: number) =>\n    ({\n      type: \"TOGGLE_FOLLOWING_PROGRESS\",\n      isFetching,\n      userId,\n    } as const),\n};\n\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\n  return async (dispatch, getState) => {\n    dispatch(actions.setIsFetching(true));\n    dispatch(actions.setCurrentPage(page));\n\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(actions.setIsFetching(false));\n    dispatch(actions.setUsers(data.items));\n    dispatch(actions.setTotalUserCount(data.totalCount));\n  };\n};\n\nconst _followUnfollowFlow = async (\n  dispatch: Dispatch<ActionsTypes>,\n  userId: number,\n  apiMethod: any,\n  actionCreator: (userId: number) => ActionsTypes\n) => {\n  dispatch(actions.setFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(actions.setFollowingProgress(false, userId));\n};\nexport const follow = (userId: number): ThunkType => {\n  return async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.followUsers.bind(usersAPI),\n      actions.followSuccess\n    );\n  };\n};\nexport const unfollow = (userId: number): ThunkType => {\n  return async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.unfollowUsers.bind(usersAPI),\n      actions.unfollowSuccess\n    );\n  };\n};\n\ntype ThunkType = BaseThunkType<ActionsTypes>;\ntype ActionsTypes = InferActionsTypes<typeof actions>;\n\nexport default usersReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx",["282"],"import React from \"react\";\nimport s from \"./FormsControls.module.css\";\nimport {\n  FieldValidatorType,\n  required,\n} from \"../../../utils/Validators/validators\";\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\n\ntype FormControlPropsType = {\n  meta: WrappedFieldMetaProps;\n};\n\nconst FormControl: React.FC<FormControlPropsType> = ({\n  meta: { touched, error },\n  children,\n}) => {\n  const hasError = touched && error;\n\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      <div>{children}</div>\n      <span>{hasError && error}</span>\n    </div>\n  );\n};\n\nexport type TextAreaTypes = {};\n\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\nexport type LoginFormPropertiesType =\n  | \"email\"\n  | \"password\"\n  | \"rememberMe\"\n  | \"captcha\"\n  | \"fullName\"\n  | \"lookingForAJob\"\n  | \"lookingForAJobDescription\"\n  | \"aboutMe\"\n  | \"contacts\"\n  | \"string\";\n\nexport function CreateField<FormKeysType extends string>(\n  placeholder: string | undefined,\n  name: FormKeysType,\n  validators: FieldValidatorType[],\n  component: React.FC<WrappedFieldProps>,\n  restProps = {},\n  text = \"\"\n) {\n  return (\n    <div>\n      <Field\n        type=\"text\"\n        validate={validators}\n        name={name}\n        placeholder={placeholder}\n        component={component}\n        {...restProps}\n      />{\" \"}\n      {text}\n    </div>\n  );\n}\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts",["283","284","285","286","287","288"],"import { setAuthUserData } from \"./auth-reducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport {\n  AppState,\n  DispatchType,\n  IActionRecucerType,\n  StateType,\n} from \"../types/types\";\n\nimport { ActionsType, BaseThunkType } from \"./reduxStore\";\n\ntype InitialStateType = typeof initialState;\n\nlet initialState = {\n  initialized: false,\n  globalError: null,\n};\n\ntype ThunkAppType = BaseThunkType<ActionsType>;\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case \"SN/APP/SET_INITIALIZED_SUCCESS\":\n      return {\n        ...state,\n        initialized: true,\n      };\n  }\n  return state;\n};\n\nexport const actions = {\n  initializedSuccess: () => ({\n    type: \"SN/APP/SET_INITIALIZED_SUCCESS\",\n  }),\n};\n\nexport const initializeApp = () => {\n  return (dispatch: any) => {\n    let promise = dispatch(setAuthUserData());\n    Promise.all([promise]).then(() => {\n      dispatch(actions.initializedSuccess());\n    });\n  };\n};\n\nexport default appReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts",["289","290","291","292","293"],"import profileReducer, { actions } from \"./profileReducer\";\nimport React, { createElement } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../App\";\n\nconst state = {\n  posts: [\n    { id: 1, message: \"Hi\", likesCount: 10 },\n    { id: 2, message: \"How is your day?\", likesCount: 20 },\n    { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n    { id: 4, message: \"Svetlana\", likesCount: 50 },\n  ],\n  newPostText: \"it-kamasutra.com!\",\n  profile: null,\n  status: \"\",\n};\n\ntest(\"after deleting messages,increment expected \", () => {\n  // 1. Test Data\n\n  let action = actions.deletePost(1);\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(3);\n});\n\ntest(\"Posts length should be incremented\", () => {\n  // 1. Test Data\n\n  let action = actions.addPostActionCreator(\"New Post\");\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(5);\n});\n\ntest(\"after deleting length shouldnt be decrement id ID is incorrect\", () => {\n  // 1. Test Data\n\n  let action = actions.deletePost(10000);\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(4);\n});\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts",["294","295"],"import dialogsReducer, {addDialogActionCreator, deleteDialog} from \"./dialogsReducer\";\r\n\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ]\r\n}\r\ntest('deleting messages ', () => {\r\n    // 1. Test Data\r\n    let action = deleteDialog(1);\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.dialogs.length).toBe(5);\r\n});\r\ntest('add messages ', () => {\r\n    // 1. Test Data\r\n    let action = addDialogActionCreator(\"New Message\");\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.messages.length).toBe(7);\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts",["296","297","298"],"import usersReducer, {followSuccess} from \"./usersReducer\";\r\n\r\nlet State = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\ntest('follow', () => {\r\n    // 1. Test Data\r\n    // let action = followSuccess(2);\r\n    // /// 2. Action\r\n    // let newState = usersReducer(State, action)\r\n    // /// 3. Expectation\r\n    // expect(State.followed).toBe(true);\r\n});\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx",["299"],"import React from \"react\";\nimport s from \"./users.module.css\";\nimport userPhoto from \"../../assets/img/image.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport UsersPagination from \"../Common/Pagination/Pagination\";\n\nlet User = ({ user, followingInProgress, ...props }: any) => {\n  return (\n    <div key={user.id}>\n      <span>\n        <div>\n          <NavLink to={\"/profile/\" + user.id}>\n            <img\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\n              alt=\"#\"\n              className={s.usersPhoto}\n            />\n          </NavLink>\n        </div>\n        <div>\n          {user.followed ? (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.unfollow(user.id);\n              }}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.follow(user.id);\n              }}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </span>\n      <span>\n        <div>{user.name}</div>\n        <div>{user.status}</div>\n      </span>\n      <span>\n        {/*<div>{u.location.country}</div>*/}\n        {/*<div>{u.location.city}</div>*/}\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx",["300","301"],"import React from \"react\";\r\nimport { create } from \"react-test-renderer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nfunction Button(props:any) {\r\n    return <button>Nothing to do for now</button>;\r\n}\r\n\r\ndescribe(\"Profile Status Component\", () => {\r\n    test(\"status from props should be in the state\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const instance = component.getInstance()\r\n        expect(instance.state.status).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"status from props\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span).not.toBeNull();\r\n    });\r\n\r\n    test(\"status from input\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        expect(() => {\r\n            let input = root.findByType(\"input\")\r\n        }).toThrow();\r\n    });\r\n    test(\"auto creation span with status should be displayed with correct status\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span.children[0]).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"input should be displayed in editMode instead of span\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        span.props.onDoubleClick();\r\n        let input = root.findByType(\"input\");\r\n        expect(input.props.value).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"callback should be called\", () => {\r\n        const mockCallback = jest.fn();\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} updateStatus={mockCallback} />);\r\n        const instance = component.getInstance();\r\n        // @ts-ignore\r\n        instance.deactivateEditMode();\r\n        expect(mockCallback.mock.calls.length).toBe(1);\r\n    });\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\types\\types.ts",["302","303","304","305"],"import _store from \"../redux/_store\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport store, { rootReducer } from \"../redux/reduxStore\";\n\nexport type StateType = ReturnType<AppState>;\nexport type AppState = typeof rootReducer;\nexport type DispatchType = typeof store.dispatch;\nexport interface IActionRecucerType {\n  type: string;\n  newPostText: string;\n  status: string;\n  profile: null;\n  postId: number;\n  userId: number;\n  users: number[];\n  currentPage: number;\n  count: number;\n  isFetching: boolean;\n  newMessageBody: string;\n  dialogId: number;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n};\nexport type PhotosType = {\n  small: string | null;\n  large: string | null;\n};\nexport type ProfileType = {\n  userId: number;\n  lookingForAJob: string;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: PhotosType;\n};\n\ntype PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type UserType = {\n  id: number;\n  name: string;\n  uniqueUrlName: string | null;\n  photos: PhotosType;\n  status: string | null;\n  followed: boolean;\n};\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\usersAPI.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\authAPI.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\profileAPI.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\securityAPI.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\_store.ts",["306","307","308"],"import profileReducer, { ProfileAction } from \"./profileReducer\";\n\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\ntype DialogType = {\n  id: number;\n  name: string;\n};\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type sideBar = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nexport type ProfilePageType = {\n  posts: Array<PostType>;\n  newPostText: string;\n  profile: null;\n  status: string;\n};\n\nexport type DialogPageType = {\n  messages: MessageType[];\n  dialogs: DialogType[];\n};\n\nexport type sideBarType = {\n  friends: sideBar[];\n};\n\nexport type RootStateType = {\n  profilePage: ProfilePageType;\n  dialogsPage: DialogPageType;\n  sideBar: sideBarType;\n  usersPage: null;\n};\n\nexport type RootStoreType = {\n  _state: RootStateType;\n  _callSubscriber: () => void;\n  getState: () => RootStateType;\n  subscribe: (observer: () => void) => void;\n  dispatch: (action: any) => void;\n};\n\nlet _store: RootStoreType = {\n  _state: {\n    profilePage: {\n      posts: [\n        { id: 1, message: \"Hi\", likesCount: 10 },\n        { id: 2, message: \"How is your day?\", likesCount: 20 },\n        { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n        { id: 4, message: \"Svetlana\", likesCount: 50 },\n        { id: 5, message: \"Trysa\", likesCount: 100 },\n        { id: 6, message: \"Fine\", likesCount: 3 },\n      ],\n      newPostText: \"it-kamasutra.com!\",\n      profile: null,\n      status: \"\",\n    },\n    dialogsPage: {\n      messages: [\n        { id: 1, message: \"Hi\" },\n        { id: 2, message: \"How is your day?\" },\n        { id: 3, message: \"Fine, tahnks\" },\n        { id: 4, message: \"Svetlana\" },\n        { id: 5, message: \"Trysa\" },\n        { id: 6, message: \"Fine\" },\n      ],\n      dialogs: [\n        { id: 1, name: \"Dimich123\" },\n        { id: 2, name: \"Andrew\" },\n        { id: 3, name: \"Valera\" },\n        { id: 4, name: \"Sveta\" },\n        { id: 5, name: \"Polina\" },\n        { id: 6, name: \"Sasha\" },\n      ],\n    },\n    sideBar: {\n      friends: [\n        {\n          id: 1,\n          name: \"Kiril\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 2,\n          name: \"Ivan\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 3,\n          name: \"Petrovich\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n      ],\n    },\n    usersPage: null,\n  },\n  getState() {\n    return this._state;\n  },\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n  dispatch: function (action: any) {\n    let { profilePage, dialogsPage, sideBar } = this._state;\n    profileReducer(profilePage, action);\n    dialogsReducer(dialogsPage, action);\n    sidebarReducer(sideBar, action);\n    this._callSubscriber();\n  },\n};\n\nexport default _store;\n// window._store = _store;\n",{"ruleId":"309","severity":1,"message":"310","line":16,"column":10,"nodeType":"311","messageId":"312","endLine":16,"endColumn":23},{"ruleId":"309","severity":1,"message":"313","line":26,"column":10,"nodeType":"311","messageId":"312","endLine":26,"endColumn":18},{"ruleId":"309","severity":1,"message":"314","line":1,"column":17,"nodeType":"311","messageId":"312","endLine":1,"endColumn":28},{"ruleId":"309","severity":1,"message":"315","line":1,"column":30,"nodeType":"311","messageId":"312","endLine":1,"endColumn":35},{"ruleId":"309","severity":1,"message":"316","line":6,"column":10,"nodeType":"311","messageId":"312","endLine":6,"endColumn":15},{"ruleId":"309","severity":1,"message":"317","line":9,"column":3,"nodeType":"311","messageId":"312","endLine":9,"endColumn":8},{"ruleId":"309","severity":1,"message":"318","line":14,"column":10,"nodeType":"311","messageId":"312","endLine":14,"endColumn":18},{"ruleId":"309","severity":1,"message":"319","line":16,"column":6,"nodeType":"311","messageId":"312","endLine":16,"endColumn":20},{"ruleId":"309","severity":1,"message":"320","line":23,"column":6,"nodeType":"311","messageId":"312","endLine":23,"endColumn":21},{"ruleId":"309","severity":1,"message":"321","line":1,"column":8,"nodeType":"311","messageId":"312","endLine":1,"endColumn":13},{"ruleId":"309","severity":1,"message":"322","line":2,"column":8,"nodeType":"311","messageId":"312","endLine":2,"endColumn":9},{"ruleId":"309","severity":1,"message":"316","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":15},{"ruleId":"309","severity":1,"message":"323","line":6,"column":6,"nodeType":"311","messageId":"312","endLine":6,"endColumn":18},{"ruleId":"309","severity":1,"message":"321","line":1,"column":8,"nodeType":"311","messageId":"312","endLine":1,"endColumn":13},{"ruleId":"309","severity":1,"message":"324","line":4,"column":8,"nodeType":"311","messageId":"312","endLine":4,"endColumn":15},{"ruleId":"309","severity":1,"message":"325","line":9,"column":6,"nodeType":"311","messageId":"312","endLine":9,"endColumn":31},{"ruleId":"326","severity":1,"message":"327","line":26,"column":7,"nodeType":"311","messageId":"328","endLine":26,"endColumn":14},{"ruleId":"309","severity":1,"message":"329","line":17,"column":3,"nodeType":"311","messageId":"312","endLine":17,"endColumn":11},{"ruleId":"309","severity":1,"message":"330","line":4,"column":8,"nodeType":"311","messageId":"312","endLine":4,"endColumn":21},{"ruleId":"309","severity":1,"message":"331","line":16,"column":10,"nodeType":"311","messageId":"312","endLine":16,"endColumn":23},{"ruleId":"309","severity":1,"message":"313","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":18},{"ruleId":"309","severity":1,"message":"332","line":2,"column":45,"nodeType":"311","messageId":"312","endLine":2,"endColumn":54},{"ruleId":"309","severity":1,"message":"333","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":21},{"ruleId":"309","severity":1,"message":"334","line":3,"column":10,"nodeType":"311","messageId":"312","endLine":3,"endColumn":16},{"ruleId":"309","severity":1,"message":"313","line":5,"column":3,"nodeType":"311","messageId":"312","endLine":5,"endColumn":11},{"ruleId":"309","severity":1,"message":"335","line":6,"column":3,"nodeType":"311","messageId":"312","endLine":6,"endColumn":15},{"ruleId":"309","severity":1,"message":"336","line":7,"column":3,"nodeType":"311","messageId":"312","endLine":7,"endColumn":21},{"ruleId":"309","severity":1,"message":"332","line":8,"column":3,"nodeType":"311","messageId":"312","endLine":8,"endColumn":12},{"ruleId":"337","severity":1,"message":"338","line":63,"column":57,"nodeType":"339","messageId":"340","endLine":63,"endColumn":59},{"ruleId":"337","severity":1,"message":"341","line":130,"column":27,"nodeType":"339","messageId":"340","endLine":130,"endColumn":29},{"ruleId":"309","severity":1,"message":"342","line":5,"column":3,"nodeType":"311","messageId":"312","endLine":5,"endColumn":11},{"ruleId":"309","severity":1,"message":"333","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":21},{"ruleId":"309","severity":1,"message":"313","line":4,"column":3,"nodeType":"311","messageId":"312","endLine":4,"endColumn":11},{"ruleId":"309","severity":1,"message":"335","line":5,"column":3,"nodeType":"311","messageId":"312","endLine":5,"endColumn":15},{"ruleId":"309","severity":1,"message":"336","line":6,"column":3,"nodeType":"311","messageId":"312","endLine":6,"endColumn":21},{"ruleId":"309","severity":1,"message":"332","line":7,"column":3,"nodeType":"311","messageId":"312","endLine":7,"endColumn":12},{"ruleId":"309","severity":1,"message":"343","line":19,"column":6,"nodeType":"311","messageId":"312","endLine":19,"endColumn":18},{"ruleId":"309","severity":1,"message":"321","line":2,"column":8,"nodeType":"311","messageId":"312","endLine":2,"endColumn":13},{"ruleId":"309","severity":1,"message":"344","line":2,"column":17,"nodeType":"311","messageId":"312","endLine":2,"endColumn":30},{"ruleId":"309","severity":1,"message":"345","line":3,"column":8,"nodeType":"311","messageId":"312","endLine":3,"endColumn":16},{"ruleId":"309","severity":1,"message":"346","line":4,"column":8,"nodeType":"311","messageId":"312","endLine":4,"endColumn":11},{"ruleId":"347","severity":1,"message":"348","line":18,"column":6,"nodeType":"349","messageId":"350","endLine":18,"endColumn":51,"fix":"351"},{"ruleId":"347","severity":1,"message":"348","line":23,"column":6,"nodeType":"349","messageId":"350","endLine":23,"endColumn":26,"fix":"352"},{"ruleId":"347","severity":1,"message":"348","line":31,"column":6,"nodeType":"349","messageId":"350","endLine":31,"endColumn":21,"fix":"353"},{"ruleId":"309","severity":1,"message":"354","line":1,"column":8,"nodeType":"311","messageId":"312","endLine":1,"endColumn":20},{"ruleId":"309","severity":1,"message":"355","line":1,"column":23,"nodeType":"311","messageId":"312","endLine":1,"endColumn":36},{"ruleId":"309","severity":1,"message":"356","line":3,"column":5,"nodeType":"311","messageId":"312","endLine":3,"endColumn":10},{"ruleId":"309","severity":1,"message":"357","line":5,"column":8,"nodeType":"311","messageId":"312","endLine":5,"endColumn":23},{"ruleId":"309","severity":1,"message":"358","line":5,"column":10,"nodeType":"311","messageId":"312","endLine":5,"endColumn":16},{"ruleId":"309","severity":1,"message":"359","line":27,"column":17,"nodeType":"311","messageId":"312","endLine":27,"endColumn":22},{"ruleId":"309","severity":1,"message":"360","line":1,"column":8,"nodeType":"311","messageId":"312","endLine":1,"endColumn":14},{"ruleId":"309","severity":1,"message":"333","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":21},{"ruleId":"309","severity":1,"message":"334","line":3,"column":10,"nodeType":"311","messageId":"312","endLine":3,"endColumn":16},{"ruleId":"309","severity":1,"message":"361","line":47,"column":6,"nodeType":"311","messageId":"312","endLine":47,"endColumn":14},{"ruleId":"309","severity":1,"message":"362","line":1,"column":26,"nodeType":"311","messageId":"312","endLine":1,"endColumn":39},{"ruleId":"309","severity":1,"message":"333","line":5,"column":10,"nodeType":"311","messageId":"312","endLine":5,"endColumn":21},{"ruleId":"309","severity":1,"message":"334","line":6,"column":10,"nodeType":"311","messageId":"312","endLine":6,"endColumn":16},"@typescript-eslint/no-unused-vars","'RootStoreType' is defined but never used.","Identifier","unusedVar","'AppState' is defined but never used.","'ChangeEvent' is defined but never used.","'Props' is defined but never used.","'Field' is defined but never used.","'Input' is defined but never used.","'Redirect' is defined but never used.","'StatePropsType' is defined but never used.","'DialogPropsType' is defined but never used.","'React' is defined but never used.","'s' is defined but never used.","'NavStateType' is defined but never used.","'Profile' is defined but never used.","'myPostsContainerPropsType' is defined but never used.","@typescript-eslint/no-redeclare","'Profile' is already defined.","redeclared","'UserType' is defined but never used.","'ProfileStatus' is defined but never used.","'ThunkDispatch' is defined but never used.","'StateType' is defined but never used.","'ThunkAction' is defined but never used.","'Action' is defined but never used.","'DispatchType' is defined but never used.","'IActionRecucerType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'required' is defined but never used.","'ThunkAppType' is defined but never used.","'createElement' is defined but never used.","'ReactDOM' is defined but never used.","'App' is defined but never used.","jest/valid-title","should not have leading or trailing spaces","Literal","accidentalSpace",{"range":"363","text":"364"},{"range":"365","text":"366"},{"range":"367","text":"368"},"'usersReducer' is defined but never used.","'followSuccess' is defined but never used.","'State' is assigned a value but never used.","'UsersPagination' is defined but never used.","'Button' is defined but never used.","'input' is assigned a value but never used.","'_store' is defined but never used.","'PostType' is defined but never used.","'ProfileAction' is defined but never used.",[488,533],"\"after deleting messages,increment expected\"",[610,630],"'deleting messages'",[853,868],"'add messages'"]