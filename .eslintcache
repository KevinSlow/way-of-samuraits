[{"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts":"1","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx":"2","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx":"3","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx":"4","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx":"5","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx":"6","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx":"8","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx":"9","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx":"11","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx":"12","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx":"13","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx":"14","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx":"15","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx":"16","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx":"17","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx":"18","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx":"19","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"21","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx":"22","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx":"23","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx":"24","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx":"26","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts":"27","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts":"28","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts":"29","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts":"30","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts":"31","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts":"32","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts":"33","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts":"34","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts":"35","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts":"36","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx":"37","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts":"38","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"39","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts":"40","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts":"41","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"42","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts":"43","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts":"44","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts":"45","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts":"46","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx":"47","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx":"48","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx":"49","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx":"50","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx":"51","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"52"},{"size":2368,"mtime":1609430835986,"results":"53","hashOfConfig":"54"},{"size":318,"mtime":1609113482435,"results":"55","hashOfConfig":"54"},{"size":3232,"mtime":1609781455825,"results":"56","hashOfConfig":"54"},{"size":260,"mtime":1609113482443,"results":"57","hashOfConfig":"54"},{"size":444,"mtime":1609113482444,"results":"58","hashOfConfig":"54"},{"size":2335,"mtime":1609113482445,"results":"59","hashOfConfig":"54"},{"size":763,"mtime":1609701077652,"results":"60","hashOfConfig":"54"},{"size":266,"mtime":1609113482446,"results":"61","hashOfConfig":"54"},{"size":3725,"mtime":1609113482447,"results":"62","hashOfConfig":"54"},{"size":497,"mtime":1609113482448,"results":"63","hashOfConfig":"54"},{"size":1883,"mtime":1609446258117,"results":"64","hashOfConfig":"54"},{"size":152,"mtime":1609113482449,"results":"65","hashOfConfig":"54"},{"size":1721,"mtime":1609780602462,"results":"66","hashOfConfig":"54"},{"size":149,"mtime":1609113482451,"results":"67","hashOfConfig":"54"},{"size":788,"mtime":1609423845318,"results":"68","hashOfConfig":"54"},{"size":811,"mtime":1609113482453,"results":"69","hashOfConfig":"54"},{"size":680,"mtime":1609423638531,"results":"70","hashOfConfig":"54"},{"size":591,"mtime":1609351353300,"results":"71","hashOfConfig":"54"},{"size":1605,"mtime":1609638801614,"results":"72","hashOfConfig":"54"},{"size":2901,"mtime":1609636414947,"results":"73","hashOfConfig":"54"},{"size":1477,"mtime":1609113482457,"results":"74","hashOfConfig":"54"},{"size":112,"mtime":1609636333869,"results":"75","hashOfConfig":"54"},{"size":755,"mtime":1609636681959,"results":"76","hashOfConfig":"54"},{"size":1810,"mtime":1609638253485,"results":"77","hashOfConfig":"54"},{"size":588,"mtime":1609636118198,"results":"78","hashOfConfig":"54"},{"size":467,"mtime":1609636316800,"results":"79","hashOfConfig":"54"},{"size":41,"mtime":1609113482462,"results":"80","hashOfConfig":"54"},{"size":2463,"mtime":1609783204175,"results":"81","hashOfConfig":"54"},{"size":1747,"mtime":1609778815467,"results":"82","hashOfConfig":"54"},{"size":3844,"mtime":1609640698789,"results":"83","hashOfConfig":"54"},{"size":997,"mtime":1609636321503,"results":"84","hashOfConfig":"54"},{"size":141,"mtime":1609780005756,"results":"85","hashOfConfig":"54"},{"size":3128,"mtime":1609780538905,"results":"86","hashOfConfig":"54"},{"size":5572,"mtime":1609780168849,"results":"87","hashOfConfig":"54"},{"size":441,"mtime":1609113482467,"results":"88","hashOfConfig":"54"},{"size":241,"mtime":1609636311793,"results":"89","hashOfConfig":"54"},{"size":997,"mtime":1609113482452,"results":"90","hashOfConfig":"54"},{"size":292,"mtime":1609113482468,"results":"91","hashOfConfig":"54"},{"size":1314,"mtime":1609113482441,"results":"92","hashOfConfig":"54"},{"size":818,"mtime":1609774883602,"results":"93","hashOfConfig":"54"},{"size":730,"mtime":1609113482466,"results":"94","hashOfConfig":"54"},{"size":1161,"mtime":1609698389271,"results":"95","hashOfConfig":"54"},{"size":1379,"mtime":1609113482464,"results":"96","hashOfConfig":"54"},{"size":1107,"mtime":1609113482463,"results":"97","hashOfConfig":"54"},{"size":449,"mtime":1609113482466,"results":"98","hashOfConfig":"54"},{"size":250,"mtime":1609636115327,"results":"99","hashOfConfig":"54"},{"size":1586,"mtime":1609639260555,"results":"100","hashOfConfig":"54"},{"size":1442,"mtime":1609636302115,"results":"101","hashOfConfig":"54"},{"size":2141,"mtime":1609113482456,"results":"102","hashOfConfig":"54"},{"size":787,"mtime":1609113482442,"results":"103","hashOfConfig":"54"},{"size":258,"mtime":1609636201584,"results":"104","hashOfConfig":"54"},{"size":1552,"mtime":1609424302905,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7p7rf",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx",["230"],"import React, { Suspense } from \"react\";\n\nimport \"./App.css\";\n\nimport Nav from \"./components/Navbar/Nav\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport {\n  HashRouter,\n  Redirect,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport { RootStoreType } from \"./redux/store\";\n\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport { connect, Provider } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport PreLoader from \"./components/Common/Preloader/Preloader\";\nimport store from \"./redux/reduxStore\";\nimport { withSuspense } from \"./hoc/withSuspense\";\n\nconst DialogsContainer = React.lazy(\n  () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst ProfileContainer = React.lazy(\n  () => import(\"./components/Profile/ProfileContainer\")\n);\nconst UsersContainer = React.lazy(\n  () => import(\"./components/Users/UsersContainer\")\n);\n\ntype appType = {\n  initialized: boolean;\n};\n\ntype AppPropsType = {\n  store: RootStoreType;\n  initializeApp: () => void;\n  app: appType;\n  initialized: boolean;\n};\n\nclass App extends React.Component<AppPropsType> {\n  catchAllUnhandledErrors = (promiseRejectionEvent: any) => {\n    alert(\"Some error Occurred\");\n    // console.error(promiseRejectionEvent);\n  };\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnhandledErrors\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <PreLoader />;\n    }\n\n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainer />\n        <Nav />\n        <div className=\"app-wrapper-content\">\n          <Switch>\n            <Route exact render={() => <Redirect to={\"/profile\"} />} path=\"/\" />\n            <Route\n              exact\n              render={withSuspense(DialogsContainer)}\n              path=\"/dialogs\"\n            />\n            <Route\n              exact\n              render={withSuspense(ProfileContainer)}\n              path=\"/profile/:userId?\"\n            />\n            <Route exact component={News} path=\"/news\" />\n            <Route exact component={Music} path=\"/music\" />\n            <Route exact component={Settings} path=\"/settings\" />\n            <Route exact render={withSuspense(UsersContainer)} path=\"/users\" />\n            <Route exact render={withSuspense(LoginPage)} path=\"/login\" />\n            <Route exact render={() => <div>404 Not Found</div>} path=\"*\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppPropsType) => ({\n  initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<any>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nexport const SamuraiJSApp = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </HashRouter>\n  );\n};\n\nexport default SamuraiJSApp;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx",["231","232"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/Validators/validators\";\r\n\r\n\r\ntype StatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageBody: string) => void,\r\n    updateNewMessageBody: (text: string) => void,\r\n    isAuth: boolean\r\n};\r\n\r\ntype DialogPropsType = {\r\n    dialogs: Array<DialogsItemsType>,\r\n    messages: Array<MessagesItemsType>,\r\n\r\n}\r\ntype DialogsItemsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\ntype MessagesItemsType = {\r\n    message: string,\r\n\r\n}\r\n\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\n\r\nconst Dialogs = (props: StatePropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages.map((m) => (\r\n        <Message key={m.id} message={m.message}/>\r\n    ))\r\n\r\n\r\n    const addNewMessage = (values: any) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.chatBlocks}>\r\n                <div className={s.chatFirst}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.chatSecond}>\r\n                    <ul className={s.chatThread}>\r\n                        {messagesElements}\r\n                    </ul>\r\n                    <ReduxMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <div className=\"write\">\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={TextArea} validate={[required, maxLength]} name={\"newMessageBody\"}  placeholder={\"Enter your message\"}/>\r\n                <button  className={s.send}></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxMessageForm = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx",["233","234"],"import React from \"react\";\nimport { addDialogActionCreator } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { RootStoreType } from \"../../redux/store\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\ntype dialogsContainerPropsType = {\n  store: RootStoreType;\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    sendMessage: (newMessageBody: string) => {\n      dispatch(addDialogActionCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx",["235"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx",["236"],"import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {CreateField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/Validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport s from \"../Common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\nconst LoginForm = ({handleSubmit,error,captchaUrl,...restProps}: any) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {CreateField(\"email\", \"email\",[required],Input,{type: \"text\"} )}\r\n                {CreateField(\"password\", \"password\",[required],Input,{type: \"password\"} ) }\r\n                {CreateField(\"\", \"rememberMe\",[],Input, {type: \"checkbox\"}, \"remember Me\" )}\r\n\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"\"/>}\r\n            {captchaUrl && CreateField(\"Symbols from image\", \"captcha\", [required],Input, {} )}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<any,any>(\r\n    {form: 'login'}\r\n)(LoginForm)\r\n\r\nconst Login = (props:any) => {\r\n    const onSubmit = (formData: any) => {\r\n        console.log(formData)\r\n\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login)","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx",["237"],"import React from \"react\";\nimport s from \"./Nav.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport store from \"../../redux/store\";\n\ntype NavStateType = {\n  state: NavPropsType;\n};\n\ntype NavPropsType = {\n  friends: Array<FriendsType>;\n};\n\ntype FriendsType = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nconst Nav = () => {\n  let { sideBar: state } = store.getState();\n\n  let friendsMessages = state.friends.map((f: FriendsType) => (\n    <div className={s.friendsBlock}>\n      <img className={s.friendsImg} src={f.imgUrl} alt=\"friends\" />\n      <NavLink to={\"/profile/\" + f.id}>\n        <p>{f.name}</p>\n      </NavLink>\n    </div>\n  ));\n\n  return (\n    <div>\n      <nav className={s.nav}>\n        <div className={`${s.item}`}>\n          <NavLink to=\"/profile\" activeClassName={s.active}>\n            Profile\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/dialogs\" activeClassName={s.active}>\n            Messages\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/news\" activeClassName={s.active}>\n            News\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/music\" activeClassName={s.active}>\n            Music\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/settings\" activeClassName={s.active}>\n            Settings\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/users\" activeClassName={s.active}>\n            Users\n          </NavLink>\n        </div>\n        <div className={s.friendsBlocks}>{friendsMessages}</div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Nav;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx",["238","239","240"],"import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport {RootStoreType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"../Profile\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype myPostsContainerPropsType = {\r\n    store: RootStoreType\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        post: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any,) => {\r\n    return{\r\n        addPosts: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer: any = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n\r\n\r\nexport default MyPostsContainer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx",["241"],"import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile}\r\n                         status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["242"],"import React, { ChangeEvent, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport PreLoader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/img/image.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({\n  profile,\n  savePhoto,\n  isOwner,\n  status,\n  updateStatus,\n  saveProfile,\n}: any) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <PreLoader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: any) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      {/*<div>*/}\n      {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\n      {/*</div>*/}\n      <img\n        className={s.mainPhoto}\n        src={profile.photos.large || userPhoto}\n        alt=\"\"\n      />\n      {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      {editMode ? (\n        <ProfileDataForm\n          // @ts-ignore\n          profile={profile}\n          initialValues={profile}\n          onSubmit={onSubmit}\n        />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          goToEditMode={() => setEditMode(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode, ...props }: any) => {\n  return (\n    <div className={s.descriptionBlock}>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>\n      )}\n      <div>\n        Full Name\n        <div>{profile.fullName}</div>\n      </div>\n      <div>\n        About Me\n        <div>{profile.aboutMe}</div>\n      </div>\n      <div>\n        {profile.lookingForAJob && (\n          <div>\n            lookingForAJobDescription{\" \"}\n            <div>{profile.lookingForAJobDescription}</div>\n          </div>\n        )}\n      </div>\n      <div>\n        Looking for a Job: <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n      </div>\n      <div>\n        <div>\n          <b>Contacts:</b> :{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <Contacts\n                contactTitle={key}\n                contactValue={profile.contacts[key]}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Contacts = ({ contactTitle, contactValue }: any) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b> : {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts",["243"],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts",["244"],"const ADD_DIALOG = \"ADD-DIALOG\";\nconst DELETE_DIALOG = \"DELETE_DIALOG\";\n\nconst initialState = {\n  messages: [\n    { id: 1, message: \"Hi\" },\n    { id: 2, message: \"How is your day?\" },\n    { id: 3, message: \"Fine, tahnks\" },\n    { id: 4, message: \"Svetlana\" },\n    { id: 5, message: \"Trysa\" },\n    { id: 6, message: \"Fine\" },\n  ],\n  dialogs: [\n    { id: 1, name: \"Dimich123\" },\n    { id: 2, name: \"Andrew\" },\n    { id: 3, name: \"Valera\" },\n    { id: 4, name: \"Sveta\" },\n    { id: 5, name: \"Polina\" },\n    { id: 6, name: \"Sasha\" },\n  ],\n};\n\ninterface ActionA {\n  type: \"ADD-DIALOG\";\n  newMessageBody: string;\n}\n\ninterface ActionB {\n  type: \"UPDATE-NEW-DIALOG-TEXT\";\n  newDialogText: string;\n}\ntype ActionC = {\n  type: \"DELETE_DIALOG\";\n  dialogId: number;\n};\ntype dialogsReducerType = {\n  dialogs: Array<DialogType>;\n  messages: Array<MessageType>;\n  newDialogText: string;\n};\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\ntype DialogType = {\n  id: number;\n  name: string;\n};\n\nexport type ActionType = ActionA | ActionB | ActionC;\n\nconst dialogsReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case ADD_DIALOG: {\n      let newDialogText = action.newMessageBody;\n      return {\n        ...state,\n        messages: [...state.messages, { id: 6, message: newDialogText }],\n      };\n    }\n    case DELETE_DIALOG: {\n      return {\n        ...state,\n        dialogs: state.dialogs.filter((p) => p.id !== action.dialogId),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const addDialogActionCreator = (newMessageBody: string) => ({\n  type: ADD_DIALOG,\n  newMessageBody,\n});\n\nexport const deleteDialog = (dialogId: number) => ({\n  type: DELETE_DIALOG,\n  dialogId,\n});\n\nexport default dialogsReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts",["245","246"],"import { profileAPI, usersAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { Simulate } from \"react-dom/test-utils\";\n\nconst ADD_POST = \"ADD-POST\";\n\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\nconst SET_STATUS = \"SET_STATUS\";\nconst DELETE_POST = \"DELETE_POST\";\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\";\n\nconst initialState = {\n  posts: [\n    { id: 1, message: \"Hi\", likesCount: 10 },\n    { id: 2, message: \"How is your day?\", likesCount: 20 },\n    { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n    { id: 4, message: \"Svetlana\", likesCount: 50 },\n    { id: 5, message: \"Trysa\", likesCount: 100 },\n    { id: 6, message: \"Fine\", likesCount: 3 },\n  ],\n  newPostText: \"it-kamasutra.com!\",\n  profile: null,\n  status: \"\",\n};\n\ntype PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\ninterface ActionA {\n  type: \"ADD-POST\";\n  newText: string;\n}\n\ninterface ActionB {\n  type: \"UPDATE-NEW-POST-TEXT\";\n  newText: string;\n}\n\ninterface ActionC {\n  type: \"SET_USER_PROFILE\";\n  profile: any;\n}\n\nexport type Action = ActionA | ActionB | ActionC;\n\nconst profileReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case ADD_POST: {\n      let newPost = {\n        id: 5,\n        message: action.newPostText,\n        likesCount: 0,\n      };\n      return {\n        ...state,\n        posts: [...state.posts, newPost],\n        newPostText: \"\",\n      };\n    }\n\n    case SET_STATUS: {\n      return {\n        ...state,\n        status: action.status,\n      };\n    }\n    case SET_USER_PROFILE: {\n      return { ...state, profile: action.profile };\n    }\n\n    case DELETE_POST: {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.id !== action.postId),\n      };\n    }\n\n    case SAVE_PHOTO_SUCCESS: {\n      debugger;\n      //@ts-ignore\n      return { ...state, profile: { ...state.profile, photos: action.photos } };\n    }\n  }\n  return state;\n};\n\nexport const addPostActionCreator = (newPostText: string) => ({\n  type: ADD_POST,\n  newPostText,\n});\n\nexport const setUserProfileSuccess = (profile: any) => ({\n  type: SET_USER_PROFILE,\n  profile,\n});\n\nexport const deletePost = (postId: number) => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const setStatus = (status: any) => ({\n  type: SET_STATUS,\n  status,\n});\n\nexport const savePhotoSuccess = (photos: any) => ({\n  type: SAVE_PHOTO_SUCCESS,\n  photos,\n});\n\n// -----------\n// Redux-Thunk for async query\n// -----------\n\nexport const setUserProfile = (userId: number) => async (dispatch: any) => {\n  const response = await usersAPI.getUsersProfile(userId);\n  dispatch(setUserProfileSuccess(response.data));\n};\n\nexport const getStatus = (userId: number) => async (dispatch: any) => {\n  const response = await profileAPI.getStatus(userId);\n  dispatch(setStatus(response.data));\n};\n\nexport const updateStatus = (status: number) => async (dispatch: any) => {\n  try {\n    let response = await profileAPI.updateStatus(status);\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  } catch (error) {\n    alert(error);\n  }\n};\n\nexport const savePhoto = (file: any) => async (dispatch: any) => {\n  const response = await profileAPI.savePhoto(file);\n\n  if (response.resultCode === 0) {\n    dispatch(savePhotoSuccess(response.data.photos));\n  }\n};\n\nexport const saveProfile = (profile: any) => async (\n  dispatch: any,\n  getState: any\n) => {\n  const userId = getState().auth.userId;\n  const response = await profileAPI.saveProfile(profile);\n  if (response.resultCode === 0) {\n    dispatch(setUserProfile(userId));\n  } else {\n    debugger;\n    // dispatch(stopSubmit(\"edit-profile\", {\"contacts\" : {\"facebook\": response.messages[0]}}))\n    dispatch(stopSubmit(\"edit-profile\", { _error: response.messages[0] }));\n    return Promise.reject(response.messages[0]);\n  }\n};\n\nexport default profileReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts",["247"],"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\";\nimport appReducer from \"./app-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nlet reducers = combineReducers({\n  profilePage: profileReducer,\n  dialogsPage: dialogsReducer,\n  sideBar: sidebarReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  form: formReducer,\n  app: appReducer,\n});\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(\n    applyMiddleware(thunkMiddleware)\n    // other store enhancers if any\n  )\n);\n\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n// @ts-ignore\nwindow.store = store;\n\nexport default store;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts",["248"],"import profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\ntype DialogType = {\n  id: number;\n  name: string;\n};\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type sideBar = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nexport type ProfilePageType = {\n  posts: PostType[];\n  newPostText: string;\n  profile: null;\n  status: string;\n};\n\nexport type DialogPageType = {\n  messages: MessageType[];\n  dialogs: DialogType[];\n};\n\nexport type sideBarType = {\n  friends: sideBar[];\n};\n\nexport type RootStateType = {\n  profilePage: ProfilePageType;\n  dialogsPage: DialogPageType;\n  sideBar: sideBarType;\n  usersPage: null;\n};\n\nexport type RootStoreType = {\n  _state: RootStateType;\n  _callSubscriber: () => void;\n  getState: () => RootStateType;\n  subscribe: (observer: () => void) => void;\n  dispatch: (action: any) => void;\n};\n\ntype ActionTypes = {};\n\nlet store: RootStoreType = {\n  _state: {\n    profilePage: {\n      posts: [\n        { id: 1, message: \"Hi\", likesCount: 10 },\n        { id: 2, message: \"How is your day?\", likesCount: 20 },\n        { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n        { id: 4, message: \"Svetlana\", likesCount: 50 },\n        { id: 5, message: \"Trysa\", likesCount: 100 },\n        { id: 6, message: \"Fine\", likesCount: 3 },\n      ],\n      newPostText: \"it-kamasutra.com!\",\n      profile: null,\n      status: \"\",\n    },\n    dialogsPage: {\n      messages: [\n        { id: 1, message: \"Hi\" },\n        { id: 2, message: \"How is your day?\" },\n        { id: 3, message: \"Fine, tahnks\" },\n        { id: 4, message: \"Svetlana\" },\n        { id: 5, message: \"Trysa\" },\n        { id: 6, message: \"Fine\" },\n      ],\n      dialogs: [\n        { id: 1, name: \"Dimich123\" },\n        { id: 2, name: \"Andrew\" },\n        { id: 3, name: \"Valera\" },\n        { id: 4, name: \"Sveta\" },\n        { id: 5, name: \"Polina\" },\n        { id: 6, name: \"Sasha\" },\n      ],\n    },\n    sideBar: {\n      friends: [\n        {\n          id: 1,\n          name: \"Kiril\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 2,\n          name: \"Ivan\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 3,\n          name: \"Petrovich\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n      ],\n    },\n    usersPage: null,\n  },\n  getState() {\n    return this._state;\n  },\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n  dispatch: function (action: any) {\n    let { profilePage, dialogsPage, sideBar } = this._state;\n    profileReducer(profilePage, action);\n    dialogsReducer(dialogsPage, action);\n    sidebarReducer(sideBar, action);\n    this._callSubscriber();\n  },\n};\n\nexport default store;\n// window.store = store;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts",["249","250","251","252"],"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../hoc/objectsHelpers\";\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\";\n\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUserCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: [],\n};\n\nlet initialStates = {\n  users: [\n    {\n      name: \"ILICH\",\n      id: 13543,\n      uniqueUrlName: null,\n      photos: {\n        small: null,\n        large: null,\n      },\n      status: null,\n      followed: false,\n    },\n    {\n      name: \"anniemt6\",\n      id: 13542,\n      uniqueUrlName: null,\n      photos: {\n        small: null,\n        large: null,\n      },\n      status: null,\n      followed: true,\n    },\n    {\n      name: \"DimaAleks\",\n      id: 13541,\n      uniqueUrlName: null,\n      photos: {\n        small: null,\n        large: null,\n      },\n      status: null,\n      followed: true,\n    },\n    {\n      name: \"KirJS\",\n      id: 13540,\n      uniqueUrlName: null,\n      photos: {\n        small: null,\n        large: null,\n      },\n      status: null,\n      followed: true,\n    },\n    {\n      name: \"Kir\",\n      id: 13539,\n      uniqueUrlName: null,\n      photos: {\n        small: null,\n        large: null,\n      },\n      status: null,\n      followed: false,\n    },\n  ],\n  pageSize: 5,\n  totalUserCount: 8551,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: [],\n};\ntype profileReducerType = {\n  newPostText: string;\n  posts: Array<PostType>;\n};\n\ntype PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\ninterface FollowType {\n  type: \"FOLLOW\";\n  userId: number;\n}\n\ninterface UnfollowType {\n  type: \"UNFOLLOW\";\n  userId: number;\n}\n\ninterface SetUsersType {\n  type: \"SET_USERS\";\n  users: string;\n}\n\ninterface ToggleIsFetchingType {\n  type: \"TOGGLE_IS_FETCHING\";\n  isFetching: boolean;\n}\n\ntype SetCurrentPageType = {\n  type: \"SET_CURRENT_PAGE\";\n  currentPage: number;\n};\n\ntype ToggleFollowingInProgressType = {\n  type: \"TOGGLE_FOLLOWING_PROGRESS\";\n  isFetching: boolean;\n  userId: number;\n};\n\ntype SetUsersTotalCountType = {\n  type: \"SET_TOTAL_USERS_COUNT\";\n  count: number;\n};\n\nexport type UsersAction =\n  | FollowType\n  | UnfollowType\n  | SetUsersType\n  | ToggleIsFetchingType\n  | SetCurrentPageType\n  | ToggleFollowingInProgressType\n  | SetUsersTotalCountType;\n\nconst usersReducer = (state = initialStates, action: UsersAction) => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        }),\n      };\n\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: false,\n        }),\n      };\n\n    case SET_USERS:\n      return { ...state, users: action.users };\n\n    case SET_CURRENT_PAGE:\n      return { ...state, currentPage: action.currentPage };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state, totalUserCount: action.count };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state, isFetching: action.isFetching };\n\n    case TOGGLE_FOLLOWING_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter((id) => id != action.userId),\n      };\n  }\n  return state;\n};\n\nexport const followSuccess = (userId: number) => ({\n  type: FOLLOW,\n  userId,\n});\n\nexport const unfollowSuccess = (userId: number) => ({\n  type: UNFOLLOW,\n  userId,\n});\n\nexport const setUsers = (users: any) => ({\n  type: SET_USERS,\n  users,\n});\n\nexport const setCurrentPage = (currentPage: any) => ({\n  type: SET_CURRENT_PAGE,\n  currentPage: currentPage,\n});\n\nexport const setTotalUserCount = (setTotalUserCount: any) => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: setTotalUserCount,\n});\n\nexport const setIsFetching = (isFetching: boolean) => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching,\n});\n\nexport const setFollowingProgress = (isFetching: boolean, userId: number) => ({\n  type: TOGGLE_FOLLOWING_PROGRESS,\n  isFetching,\n  userId,\n});\n\nexport const requestUsers = (page: number, pageSize: number) => {\n  return (dispatch: any) => {\n    dispatch(setIsFetching(true));\n    dispatch(setCurrentPage(page));\n\n    usersAPI.getUsers(page, pageSize).then((data) => {\n      dispatch(setIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUserCount(data.totalCount));\n    });\n  };\n};\n\nconst _followUnfollowFlow = async (\n  dispatch: any,\n  userId: number,\n  apiMethod: (userId: number) => Promise<any>,\n  actionCreator: (userId: number) => any\n) => {\n  dispatch(setFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(setFollowingProgress(false, userId));\n};\n\nexport const follow = (userId: number): any => {\n  return async (dispatch: any) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.followUsers.bind(usersAPI),\n      followSuccess\n    );\n  };\n};\n\nexport const unfollow = (userId: number): any => {\n  return async (dispatch: any) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.unfollowUsers.bind(usersAPI),\n      unfollowSuccess\n    );\n  };\n};\n\nexport default usersReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx",["253"],"import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {required} from \"../../../utils/Validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <span>{hasError && error}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const TextArea = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props} >\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props} >\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const CreateField = (placeholder :string, name: string, validators: any, component: any, restProps = {}, text = \"\") => {\r\n    return <div><Field\r\n        type=\"text\"\r\n        validate={validators}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        component={component}\r\n        {...restProps}\r\n    /> {text}</div>\r\n};","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts",["254","255","256","257","258"],"import profileReducer, {addPostActionCreator, deletePost} from \"./profileReducer\";\r\nimport React, {createElement} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"../App\";\r\n\r\nconst state = {\r\n    posts: [\r\n        {id: 1, message: \"Hi\", likesCount: 10},\r\n        {id: 2, message: \"How is your day?\", likesCount: 20},\r\n        {id: 3, message: \"Fine, tahnks\", likesCount: 0},\r\n        {id: 4, message: \"Svetlana\", likesCount: 50},\r\n    ],\r\n    newPostText: \"it-kamasutra.com!\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\ntest('after deleting messages,increment expected ', () => {\r\n    // 1. Test Data\r\n\r\n    let action = deletePost(1);\r\n\r\n    /// 2. Action\r\n\r\n    let newState = profileReducer(state, action)\r\n\r\n    /// 3. Expectation\r\n\r\n    expect(newState.posts.length).toBe(3);\r\n});\r\n\r\ntest('Posts length should be incremented', () => {\r\n    // 1. Test Data\r\n\r\n    let action = addPostActionCreator(\"New Post\");\r\n\r\n    /// 2. Action\r\n\r\n    let newState = profileReducer(state, action)\r\n\r\n    /// 3. Expectation\r\n\r\n    expect(newState.posts.length).toBe(5);\r\n});\r\n\r\n\r\ntest('after deleting length shouldnt be decrement id ID is incorrect', () => {\r\n    // 1. Test Data\r\n\r\n    let action = deletePost(10000);\r\n\r\n    /// 2. Action\r\n\r\n    let newState = profileReducer(state, action)\r\n\r\n    /// 3. Expectation\r\n\r\n    expect(newState.posts.length).toBe(4);\r\n});\r\n\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts",["259","260"],"import dialogsReducer, {addDialogActionCreator, deleteDialog} from \"./dialogsReducer\";\r\n\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ]\r\n}\r\ntest('deleting messages ', () => {\r\n    // 1. Test Data\r\n    let action = deleteDialog(1);\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.dialogs.length).toBe(5);\r\n});\r\ntest('add messages ', () => {\r\n    // 1. Test Data\r\n    let action = addDialogActionCreator(\"New Message\");\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.messages.length).toBe(7);\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts",["261","262","263"],"import usersReducer, {followSuccess} from \"./usersReducer\";\r\n\r\nlet State = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\ntest('follow', () => {\r\n    // 1. Test Data\r\n    // let action = followSuccess(2);\r\n    // /// 2. Action\r\n    // let newState = usersReducer(State, action)\r\n    // /// 3. Expectation\r\n    // expect(State.followed).toBe(true);\r\n});\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx",["264"],"import React from \"react\";\nimport s from \"./users.module.css\";\nimport userPhoto from \"../../assets/img/image.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport UsersPagination from \"../Common/Pagination/Pagination\";\n\nlet User = ({ user, followingInProgress, ...props }: any) => {\n  return (\n    <div key={user.id}>\n      <span>\n        <div>\n          <NavLink to={\"/profile/\" + user.id}>\n            <img\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\n              alt=\"#\"\n              className={s.usersPhoto}\n            />\n          </NavLink>\n        </div>\n        <div>\n          {user.followed ? (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.unfollow(user.id);\n              }}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.follow(user.id);\n              }}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </span>\n      <span>\n        <div>{user.name}</div>\n        <div>{user.status}</div>\n      </span>\n      <span>\n        {/*<div>{u.location.country}</div>*/}\n        {/*<div>{u.location.city}</div>*/}\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx",["265","266"],"import React from \"react\";\r\nimport { create } from \"react-test-renderer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nfunction Button(props:any) {\r\n    return <button>Nothing to do for now</button>;\r\n}\r\n\r\ndescribe(\"Profile Status Component\", () => {\r\n    test(\"status from props should be in the state\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const instance = component.getInstance()\r\n        expect(instance.state.status).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"status from props\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span).not.toBeNull();\r\n    });\r\n\r\n    test(\"status from input\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        expect(() => {\r\n            let input = root.findByType(\"input\")\r\n        }).toThrow();\r\n    });\r\n    test(\"auto creation span with status should be displayed with correct status\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span.children[0]).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"input should be displayed in editMode instead of span\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        span.props.onDoubleClick();\r\n        let input = root.findByType(\"input\");\r\n        expect(input.props.value).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"callback should be called\", () => {\r\n        const mockCallback = jest.fn();\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} updateStatus={mockCallback} />);\r\n        const instance = component.getInstance();\r\n        // @ts-ignore\r\n        instance.deactivateEditMode();\r\n        expect(mockCallback.mock.calls.length).toBe(1);\r\n    });\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],{"ruleId":"267","severity":1,"message":"268","line":1,"column":17,"nodeType":"269","messageId":"270","endLine":1,"endColumn":25},{"ruleId":"267","severity":1,"message":"271","line":1,"column":16,"nodeType":"269","messageId":"270","endLine":1,"endColumn":27},{"ruleId":"267","severity":1,"message":"272","line":18,"column":6,"nodeType":"269","messageId":"270","endLine":18,"endColumn":21},{"ruleId":"267","severity":1,"message":"273","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"274","line":9,"column":6,"nodeType":"269","messageId":"270","endLine":9,"endColumn":31},{"ruleId":"267","severity":1,"message":"275","line":2,"column":8,"nodeType":"269","messageId":"270","endLine":2,"endColumn":9},{"ruleId":"267","severity":1,"message":"276","line":2,"column":9,"nodeType":"269","messageId":"270","endLine":2,"endColumn":14},{"ruleId":"267","severity":1,"message":"277","line":6,"column":6,"nodeType":"269","messageId":"270","endLine":6,"endColumn":18},{"ruleId":"267","severity":1,"message":"273","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"278","line":5,"column":8,"nodeType":"269","messageId":"270","endLine":5,"endColumn":15},{"ruleId":"267","severity":1,"message":"279","line":9,"column":6,"nodeType":"269","messageId":"270","endLine":9,"endColumn":31},{"ruleId":"267","severity":1,"message":"280","line":5,"column":9,"nodeType":"269","messageId":"270","endLine":5,"endColumn":17},{"ruleId":"267","severity":1,"message":"281","line":4,"column":8,"nodeType":"269","messageId":"270","endLine":4,"endColumn":21},{"ruleId":"267","severity":1,"message":"282","line":15,"column":6,"nodeType":"269","messageId":"270","endLine":15,"endColumn":17},{"ruleId":"267","severity":1,"message":"283","line":36,"column":6,"nodeType":"269","messageId":"270","endLine":36,"endColumn":24},{"ruleId":"267","severity":1,"message":"284","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":18},{"ruleId":"267","severity":1,"message":"285","line":26,"column":6,"nodeType":"269","messageId":"270","endLine":26,"endColumn":14},{"ruleId":"267","severity":1,"message":"286","line":1,"column":57,"nodeType":"269","messageId":"270","endLine":1,"endColumn":64},{"ruleId":"267","severity":1,"message":"287","line":57,"column":6,"nodeType":"269","messageId":"270","endLine":57,"endColumn":17},{"ruleId":"267","severity":1,"message":"288","line":12,"column":5,"nodeType":"269","messageId":"270","endLine":12,"endColumn":17},{"ruleId":"267","severity":1,"message":"289","line":85,"column":6,"nodeType":"269","messageId":"270","endLine":85,"endColumn":24},{"ruleId":"290","severity":1,"message":"291","line":176,"column":57,"nodeType":"292","messageId":"293","endLine":176,"endColumn":59},{"ruleId":"290","severity":1,"message":"294","line":240,"column":27,"nodeType":"292","messageId":"293","endLine":240,"endColumn":29},{"ruleId":"267","severity":1,"message":"295","line":3,"column":9,"nodeType":"269","messageId":"270","endLine":3,"endColumn":17},{"ruleId":"267","severity":1,"message":"273","line":2,"column":8,"nodeType":"269","messageId":"270","endLine":2,"endColumn":13},{"ruleId":"267","severity":1,"message":"296","line":2,"column":16,"nodeType":"269","messageId":"270","endLine":2,"endColumn":29},{"ruleId":"267","severity":1,"message":"297","line":3,"column":8,"nodeType":"269","messageId":"270","endLine":3,"endColumn":16},{"ruleId":"267","severity":1,"message":"298","line":4,"column":8,"nodeType":"269","messageId":"270","endLine":4,"endColumn":11},{"ruleId":"299","severity":1,"message":"300","line":18,"column":6,"nodeType":"301","messageId":"302","endLine":18,"endColumn":51,"fix":"303"},{"ruleId":"299","severity":1,"message":"300","line":23,"column":6,"nodeType":"301","messageId":"302","endLine":23,"endColumn":26,"fix":"304"},{"ruleId":"299","severity":1,"message":"300","line":31,"column":6,"nodeType":"301","messageId":"302","endLine":31,"endColumn":21,"fix":"305"},{"ruleId":"267","severity":1,"message":"306","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":20},{"ruleId":"267","severity":1,"message":"307","line":1,"column":23,"nodeType":"269","messageId":"270","endLine":1,"endColumn":36},{"ruleId":"267","severity":1,"message":"308","line":3,"column":5,"nodeType":"269","messageId":"270","endLine":3,"endColumn":10},{"ruleId":"267","severity":1,"message":"309","line":5,"column":8,"nodeType":"269","messageId":"270","endLine":5,"endColumn":23},{"ruleId":"267","severity":1,"message":"310","line":5,"column":10,"nodeType":"269","messageId":"270","endLine":5,"endColumn":16},{"ruleId":"267","severity":1,"message":"311","line":27,"column":17,"nodeType":"269","messageId":"270","endLine":27,"endColumn":22},"@typescript-eslint/no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'DialogPropsType' is defined but never used.","'React' is defined but never used.","'dialogsContainerPropsType' is defined but never used.","'s' is defined but never used.","'Field' is defined but never used.","'NavStateType' is defined but never used.","'Profile' is defined but never used.","'myPostsContainerPropsType' is defined but never used.","'Redirect' is defined but never used.","'ProfileStatus' is defined but never used.","'payloadType' is defined but never used.","'dialogsReducerType' is defined but never used.","'Simulate' is defined but never used.","'PostType' is defined but never used.","'compose' is defined but never used.","'ActionTypes' is defined but never used.","'initialState' is assigned a value but never used.","'profileReducerType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'required' is defined but never used.","'createElement' is defined but never used.","'ReactDOM' is defined but never used.","'App' is defined but never used.","jest/valid-title","should not have leading or trailing spaces","Literal","accidentalSpace",{"range":"312","text":"313"},{"range":"314","text":"315"},{"range":"316","text":"317"},"'usersReducer' is defined but never used.","'followSuccess' is defined but never used.","'State' is assigned a value but never used.","'UsersPagination' is defined but never used.","'Button' is defined but never used.","'input' is assigned a value but never used.",[542,587],"'after deleting messages,increment expected'",[610,630],"'deleting messages'",[853,868],"'add messages'"]