[{"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts":"1","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx":"2","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx":"3","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx":"4","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx":"5","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx":"6","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx":"8","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx":"9","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx":"11","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx":"12","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx":"13","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx":"14","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx":"15","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx":"16","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx":"17","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx":"18","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx":"19","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"21","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx":"22","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx":"23","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx":"24","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx":"26","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts":"27","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts":"28","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts":"29","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts":"30","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts":"31","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts":"32","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts":"33","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts":"34","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts":"35","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts":"36","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx":"37","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts":"38","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"39","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts":"40","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts":"41","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"42","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts":"43","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts":"44","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts":"45","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts":"46","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx":"47","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx":"48","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx":"49","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx":"50","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx":"51","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"52","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\types\\types.ts":"53","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainerHook.tsx":"54"},{"size":2788,"mtime":1610927474461,"results":"55","hashOfConfig":"56"},{"size":318,"mtime":1609113482435,"results":"57","hashOfConfig":"56"},{"size":3458,"mtime":1610239791280,"results":"58","hashOfConfig":"56"},{"size":260,"mtime":1609113482443,"results":"59","hashOfConfig":"56"},{"size":444,"mtime":1609113482444,"results":"60","hashOfConfig":"56"},{"size":2085,"mtime":1610990862603,"results":"61","hashOfConfig":"56"},{"size":763,"mtime":1609864620451,"results":"62","hashOfConfig":"56"},{"size":266,"mtime":1609113482446,"results":"63","hashOfConfig":"56"},{"size":3725,"mtime":1609113482447,"results":"64","hashOfConfig":"56"},{"size":522,"mtime":1610912448138,"results":"65","hashOfConfig":"56"},{"size":2549,"mtime":1611103196834,"results":"66","hashOfConfig":"56"},{"size":152,"mtime":1609113482449,"results":"67","hashOfConfig":"56"},{"size":1721,"mtime":1609780602462,"results":"68","hashOfConfig":"56"},{"size":149,"mtime":1609113482451,"results":"69","hashOfConfig":"56"},{"size":703,"mtime":1610308705295,"results":"70","hashOfConfig":"56"},{"size":1099,"mtime":1610300981847,"results":"71","hashOfConfig":"56"},{"size":680,"mtime":1609423638531,"results":"72","hashOfConfig":"56"},{"size":1052,"mtime":1610925515595,"results":"73","hashOfConfig":"56"},{"size":2498,"mtime":1610925515613,"results":"74","hashOfConfig":"56"},{"size":2901,"mtime":1609636414947,"results":"75","hashOfConfig":"56"},{"size":1590,"mtime":1610240282472,"results":"76","hashOfConfig":"56"},{"size":112,"mtime":1609636333869,"results":"77","hashOfConfig":"56"},{"size":1126,"mtime":1610239127799,"results":"78","hashOfConfig":"56"},{"size":2574,"mtime":1610239455384,"results":"79","hashOfConfig":"56"},{"size":610,"mtime":1610294436534,"results":"80","hashOfConfig":"56"},{"size":467,"mtime":1609636316800,"results":"81","hashOfConfig":"56"},{"size":41,"mtime":1609113482462,"results":"82","hashOfConfig":"56"},{"size":3494,"mtime":1610927446690,"results":"83","hashOfConfig":"56"},{"size":1805,"mtime":1610922619926,"results":"84","hashOfConfig":"56"},{"size":4867,"mtime":1610923281102,"results":"85","hashOfConfig":"56"},{"size":1001,"mtime":1610234454904,"results":"86","hashOfConfig":"56"},{"size":738,"mtime":1610231488735,"results":"87","hashOfConfig":"56"},{"size":3204,"mtime":1610236822987,"results":"88","hashOfConfig":"56"},{"size":5272,"mtime":1610922179678,"results":"89","hashOfConfig":"56"},{"size":441,"mtime":1609113482467,"results":"90","hashOfConfig":"56"},{"size":241,"mtime":1609636311793,"results":"91","hashOfConfig":"56"},{"size":997,"mtime":1609113482452,"results":"92","hashOfConfig":"56"},{"size":387,"mtime":1611103717328,"results":"93","hashOfConfig":"56"},{"size":1308,"mtime":1611103843749,"results":"94","hashOfConfig":"56"},{"size":1235,"mtime":1610923164959,"results":"95","hashOfConfig":"56"},{"size":777,"mtime":1610237016616,"results":"96","hashOfConfig":"56"},{"size":1161,"mtime":1609698389271,"results":"97","hashOfConfig":"56"},{"size":1277,"mtime":1610229726260,"results":"98","hashOfConfig":"56"},{"size":1107,"mtime":1609113482463,"results":"99","hashOfConfig":"56"},{"size":449,"mtime":1609113482466,"results":"100","hashOfConfig":"56"},{"size":250,"mtime":1610129999299,"results":"101","hashOfConfig":"56"},{"size":1788,"mtime":1610240043855,"results":"102","hashOfConfig":"56"},{"size":1442,"mtime":1609636302115,"results":"103","hashOfConfig":"56"},{"size":2141,"mtime":1609113482456,"results":"104","hashOfConfig":"56"},{"size":862,"mtime":1610239911430,"results":"105","hashOfConfig":"56"},{"size":258,"mtime":1609636201584,"results":"106","hashOfConfig":"56"},{"size":1552,"mtime":1609424302905,"results":"107","hashOfConfig":"56"},{"size":1372,"mtime":1610234504656,"results":"108","hashOfConfig":"56"},{"size":2042,"mtime":1610233569338,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7p7rf",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx",["242"],"import React, { Suspense } from \"react\";\n\nimport \"./App.css\";\n\nimport Nav from \"./components/Navbar/Nav\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport {\n  HashRouter,\n  Redirect,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport { RootStoreType } from \"./redux/store\";\n\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport { connect, Provider } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport PreLoader from \"./components/Common/Preloader/Preloader\";\nimport store from \"./redux/reduxStore\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport UsersContainerHook from \"./components/Users/UsersContainerHook\";\n\nconst DialogsContainer = React.lazy(\n  () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst ProfileContainer = React.lazy(\n  () => import(\"./components/Profile/ProfileContainer\")\n);\nconst UsersContainer = React.lazy(\n  () => import(\"./components/Users/UsersContainer\")\n);\n\ntype appType = {\n  initialized: boolean;\n};\n\ntype AppPropsType = {\n  store: RootStoreType;\n  initializeApp: () => void;\n  app: appType;\n  initialized: boolean;\n};\n\nclass App extends React.Component<AppPropsType> {\n  catchAllUnhandledErrors = (promiseRejectionEvent: any) => {\n    alert(\"Some error Occurred\");\n    // console.error(promiseRejectionEvent);\n  };\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnhandledErrors\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <PreLoader />;\n    }\n\n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainer />\n        <Nav />\n        <div className=\"app-wrapper-content\">\n          <Switch>\n            <Route exact render={() => <Redirect to={\"/profile\"} />} path=\"/\" />\n            <Route\n              exact\n              render={withSuspense(DialogsContainer)}\n              path=\"/dialogs\"\n            />\n            <Route\n              exact\n              render={withSuspense(ProfileContainer)}\n              path=\"/profile/:userId?\"\n            />\n            <Route exact component={News} path=\"/news\" />\n            <Route exact component={Music} path=\"/music\" />\n            <Route exact component={Settings} path=\"/settings\" />\n            <Route\n              exact\n              render={() => <UsersContainer pageTitle={\"Самураи\"} />}\n              path=\"/users\"\n            />\n            <Route exact render={withSuspense(LoginPage)} path=\"/login\" />\n            <Route exact render={() => <div>404 Not Found</div>} path=\"*\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppPropsType) => ({\n  initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<any>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nexport const SamuraiJSApp = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <Suspense fallback={<div>Loading... </div>}>\n          <AppContainer />\n        </Suspense>\n      </Provider>\n    </HashRouter>\n  );\n};\n\nexport default SamuraiJSApp;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx",["243","244"],"import React, { ChangeEvent } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItems\";\nimport Message from \"./Message/Message\";\nimport { DialogPageType } from \"../../redux/store\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { TextArea } from \"../Common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/Validators/validators\";\n\ntype StatePropsType = {\n  dialogsPage: DialogPageType;\n  sendMessage: (newMessageBody: string) => void;\n  updateNewMessageBody: (text: string) => void;\n  isAuth: boolean;\n};\n\ntype DialogPropsType = {\n  dialogs: Array<DialogsItemsType>;\n  messages: Array<MessagesItemsType>;\n};\ntype DialogsItemsType = {\n  name: string;\n  id: number;\n};\n\ntype MessagesItemsType = {\n  message: string;\n};\n\nconst maxLength = maxLengthCreator(100);\n\nconst Dialogs = (props: StatePropsType) => {\n  let state = props.dialogsPage;\n\n  let dialogElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ));\n\n  let messagesElements = state.messages.map((m) => (\n    <Message key={m.id} message={m.message} />\n  ));\n\n  const addNewMessage = (values: any) => {\n    console.log(values);\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div>\n      <div className={s.chatBlocks}>\n        <div className={s.chatFirst}>{dialogElements}</div>\n        <div className={s.chatSecond}>\n          <ul className={s.chatThread}>{messagesElements}</ul>\n          <ReduxMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AddMessageForm = (props: any) => {\n  return (\n    <div className=\"write\">\n      <form onSubmit={props.handleSubmit}>\n        <Field\n          component={TextArea}\n          validate={[required, maxLength]}\n          name={\"newMessageBody\"}\n          placeholder={\"Enter your message\"}\n        />\n        <button className={s.send}></button>\n      </form>\n    </div>\n  );\n};\n\nconst ReduxMessageForm = reduxForm({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n\nexport default Dialogs;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx",["245","246"],"import React from \"react\";\nimport { addDialogActionCreator } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { RootStoreType } from \"../../redux/store\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\ntype dialogsContainerPropsType = {\n  store: RootStoreType;\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    sendMessage: (newMessageBody: string) => {\n      dispatch(addDialogActionCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx",["247"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx",["248"],"import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { CreateField, Input } from \"../Common/FormsControls/FormsControls\";\nimport { required } from \"../../utils/Validators/validators\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport s from \"../Common/FormsControls/FormsControls.module.css\";\nimport { StateType } from \"../../types/types\";\n\ntype LoginFormOwnProps = {\n  captchaUrl: string | null;\n};\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\n> = ({ handleSubmit, error, captchaUrl, ...restProps }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {CreateField(\"email\", \"email\", [required], Input, { type: \"text\" })}\n      {CreateField(\"password\", \"password\", [required], Input, {\n        type: \"password\",\n      })}\n      {CreateField(\n        \"\",\n        \"rememberMe\",\n        [],\n        Input,\n        { type: \"checkbox\" },\n        \"remember Me\"\n      )}\n\n      {captchaUrl && <img src={captchaUrl} alt=\"\" />}\n      {captchaUrl &&\n        CreateField(\"Symbols from image\", \"captcha\", [required], Input, {})}\n\n      {error && <div className={s.formSummaryError}>{error}</div>}\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n  form: \"login\",\n})(LoginForm);\n\ntype MapStatePropsType = {\n  captchaUrl: string | null;\n  isAuth: boolean;\n};\ntype MapDispatchPropsType = {\n  login: (\n    email: number | null,\n    password: string,\n    rememberMe: string | null,\n    captcha: null | undefined\n  ) => void;\n};\n\ntype LoginFormValuesType = {\n  captcha: null | undefined;\n  rememberMe: string | null;\n  password: string;\n  email: number | null;\n};\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n  const onSubmit = (formData: LoginFormValuesType) => {\n    console.log(formData);\n\n    props.login(\n      formData.email,\n      formData.password,\n      formData.rememberMe,\n      formData.captcha\n    );\n  };\n\n  if (props.isAuth) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\n  captchaUrl: state.auth.captchaUrl,\n  isAuth: state.auth.isAuth,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx",["249"],"import React from \"react\";\nimport s from \"./Nav.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport store from \"../../redux/store\";\n\ntype NavStateType = {\n  state: NavPropsType;\n};\n\ntype NavPropsType = {\n  friends: Array<FriendsType>;\n};\n\ntype FriendsType = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nconst Nav = () => {\n  let { sideBar: state } = store.getState();\n\n  let friendsMessages = state.friends.map((f: FriendsType) => (\n    <div className={s.friendsBlock}>\n      <img className={s.friendsImg} src={f.imgUrl} alt=\"friends\" />\n      <NavLink to={\"/profile/\" + f.id}>\n        <p>{f.name}</p>\n      </NavLink>\n    </div>\n  ));\n\n  return (\n    <div>\n      <nav className={s.nav}>\n        <div className={`${s.item}`}>\n          <NavLink to=\"/profile\" activeClassName={s.active}>\n            Profile\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/dialogs\" activeClassName={s.active}>\n            Messages\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/news\" activeClassName={s.active}>\n            News\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/music\" activeClassName={s.active}>\n            Music\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/settings\" activeClassName={s.active}>\n            Settings\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/users\" activeClassName={s.active}>\n            Users\n          </NavLink>\n        </div>\n        <div className={s.friendsBlocks}>{friendsMessages}</div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Nav;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx",["250","251","252"],"import React from \"react\";\nimport { addPostActionCreator } from \"../../../redux/profileReducer\";\nimport { RootStoreType } from \"../../../redux/store\";\nimport { connect } from \"react-redux\";\nimport Profile from \"../Profile\";\nimport MyPosts, { PostType } from \"./MyPosts\";\nimport { DispatchType, StateType } from \"../../../types/types\";\n\ntype myPostsContainerPropsType = {\n  store: RootStoreType;\n};\n\ntype MapStateToProps = {\n  post: Array<PostType>;\n  newPostText: string;\n};\n\ntype MapDispatchToProps = {\n  addPosts: (newPostText: string) => void;\n};\n\nconst mapStateToProps = (state: StateType): MapStateToProps => {\n  return {\n    post: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: DispatchType): MapDispatchToProps => {\n  return {\n    addPosts: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    },\n  };\n};\n\nconst MyPostsContainer: any = connect<\n  MapStateToProps,\n  unknown,\n  MapDispatchToProps,\n  StateType\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(MyPosts);\n\nexport default MyPostsContainer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx",["253","254","255"],"import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\nimport { Redirect } from \"react-router-dom\";\nimport { ProfileContainerType } from \"./ProfileContainer\";\nimport { ProfileType } from \"../../types/types\";\n\ntype Profile = {\n  isOwner: boolean;\n  status: string;\n  updateStatus: () => void;\n  savePhoto: () => void;\n};\n\ntype ProfileTypeProps = {\n  setUserProfile: (userId: number | null) => void;\n  getStatus: (userId: number) => void;\n  savePhoto: () => void;\n  updateStatus: () => void;\n  status: string;\n  saveProfile: () => void;\n  isOwner: boolean;\n  profile: ProfileType | null;\n};\n\nconst Profile = (props: ProfileTypeProps) => {\n  return (\n    <div>\n      <ProfileInfo\n        saveProfile={props.saveProfile}\n        savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx",["256"],"import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getStatus,\n  savePhoto,\n  saveProfile,\n  setUserProfile,\n  updateStatus,\n} from \"../../redux/profileReducer\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport {\n  DispatchType,\n  ProfileType,\n  StateType,\n  UserType,\n} from \"../../types/types\";\n\ntype MapStateToPropsType = {\n  authorizedUserId: number | null;\n  status: string;\n  profile: ProfileType | null;\n  isAuth: boolean;\n};\n\ntype MapDispatchPropsType = {\n  setUserProfile: (userId: number | null) => void;\n  getStatus: (userId: number) => void;\n  savePhoto: () => void;\n  updateStatus: () => void;\n  saveProfile: () => void;\n};\n\ntype OwnPropsType = {};\n\nexport type ProfileContainerType = MapStateToPropsType &\n  MapDispatchPropsType &\n  OwnPropsType;\n\nclass ProfileContainer extends React.Component<\n  StateType &\n    ProfileContainerType &\n    DispatchType &\n    RouteComponentProps<{ userId: string }>\n> {\n  refreshProfile() {\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.setUserProfile(userId);\n    if (typeof userId === \"number\") {\n      this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<any>,\n    prevState: Readonly<any>,\n    snapshot?: any\n  ) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        status={this.props.status}\n        saveProfile={this.props.saveProfile}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      />\n    );\n  }\n}\n\nlet mapStateToProps = (state: StateType): MapStateToPropsType => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n});\n\nexport default compose<any>(\n  connect<MapStateToPropsType, OwnPropsType, MapDispatchPropsType, StateType>(\n    mapStateToProps,\n    {\n      setUserProfile,\n      getStatus,\n      updateStatus,\n      savePhoto,\n      saveProfile,\n    }\n  ),\n  withRouter\n)(ProfileContainer);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["257"],"import React, { ChangeEvent, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport PreLoader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/img/image.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({\n  profile,\n  savePhoto,\n  isOwner,\n  status,\n  updateStatus,\n  saveProfile,\n}: any) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <PreLoader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: any) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      {/*<div>*/}\n      {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\n      {/*</div>*/}\n      <img\n        className={s.mainPhoto}\n        src={profile.photos.large || userPhoto}\n        alt=\"\"\n      />\n      {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      {editMode ? (\n        <ProfileDataForm\n          // @ts-ignore\n          profile={profile}\n          initialValues={profile}\n          onSubmit={onSubmit}\n        />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          goToEditMode={() => setEditMode(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode, ...props }: any) => {\n  return (\n    <div className={s.descriptionBlock}>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>\n      )}\n      <div>\n        Full Name\n        <div>{profile.fullName}</div>\n      </div>\n      <div>\n        About Me\n        <div>{profile.aboutMe}</div>\n      </div>\n      <div>\n        {profile.lookingForAJob && (\n          <div>\n            lookingForAJobDescription{\" \"}\n            <div>{profile.lookingForAJobDescription}</div>\n          </div>\n        )}\n      </div>\n      <div>\n        Looking for a Job: <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n      </div>\n      <div>\n        <div>\n          <b>Contacts:</b> :{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <Contacts\n                contactTitle={key}\n                contactValue={profile.contacts[key]}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Contacts = ({ contactTitle, contactValue }: any) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b> : {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx",["258","259","260"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  follow,\n  requestUsers,\n  setCurrentPage,\n  setFollowingProgress,\n  unfollow,\n} from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport PreLoader from \"../Common/Preloader/Preloader\";\nimport { compose } from \"redux\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getPageSize,\n  getTotalUserCount,\n  getUsers,\n} from \"../../redux/users-selectors\";\nimport { StateType, UserType } from \"../../types/types\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\ntype MapStateToPropsType = {\n  currentPage: number;\n  pageSize: number;\n  isFetching: boolean;\n  totalUserCount: number;\n  users: UserType[];\n  followingInProgress: number[];\n};\n\ntype MapDispatchPropsType = {\n  follow: (userId: number) => void;\n  getUsers: (currentPage: number, pageSize: number) => void;\n  unfollow: (userId: number) => void;\n};\n\ntype OwnPropsType = {\n  pageTitle: string;\n};\n\nexport type UserPropsContainerType = MapStateToPropsType &\n  MapDispatchPropsType &\n  OwnPropsType;\n\nclass UsersContainer extends React.Component<\n  UserPropsContainerType,\n  StateType\n> {\n  componentDidMount() {\n    let { currentPage, pageSize } = this.props;\n    this.props.getUsers(currentPage, pageSize);\n  }\n\n  onPageChanged = (pageNumber: number) => {\n    let { pageSize } = this.props;\n    this.props.getUsers(pageNumber, pageSize);\n  };\n\n  render(): JSX.Element {\n    return (\n      <>\n        <h2>{this.props.pageTitle}</h2>\n        {this.props.isFetching ? (\n          <PreLoader />\n        ) : (\n          <Users\n            totalUserCount={this.props.totalUserCount}\n            pageSize={this.props.pageSize}\n            currentPage={this.props.currentPage}\n            onPageChanged={this.onPageChanged}\n            users={this.props.users}\n            follow={this.props.follow}\n            unfollow={this.props.unfollow}\n            followingInProgress={this.props.followingInProgress}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state: StateType): MapStateToPropsType => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUserCount: getTotalUserCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n  };\n};\n\nexport default compose<any>(\n  connect<MapStateToPropsType, MapDispatchPropsType, OwnPropsType, StateType>(\n    mapStateToProps,\n    {\n      follow,\n      unfollow: unfollow,\n      getUsers: requestUsers,\n    }\n  )\n)(UsersContainer);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts",["261","262"],"import {\n  authAPI,\n  ResultCodeEnum,\n  ResultCodeEnumWithCaptcha,\n  securityAPI,\n} from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { AppState, DispatchType, ThunkType } from \"../types/types\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Dispatch } from \"react\";\n\nconst SET_USER_DATA = \"samurai-network/auth/SET_USER_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"samurai-network/auth/GET_CAPTCHA_URL_SUCCESS\";\n\nlet initialState = {\n  userId: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaUrl: null as string | null, // if null, then captcha is not required\n};\n\nexport type initialStateType = typeof initialState;\n\ntype AuthActionType = SetAuthUserDataActionType | getCaptchaURLSuccessType;\ntype DispatchTypes = Dispatch<AuthActionType>;\ntype AuthThunk = ThunkAction<void, AppState, unknown, AuthActionType>;\n\nconst authReducer = (state = initialState, action: any): initialStateType => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n};\n\ntype SetAuthUserDataActionTypePayloadType = {\n  userId: number;\n  email: string;\n  login: string;\n  isAuth: boolean;\n};\n\ntype SetAuthUserDataActionType = {\n  type: typeof SET_USER_DATA;\n  payload: SetAuthUserDataActionTypePayloadType;\n};\n\nexport const setAuthUserDataSuccess = (\n  userId: number | null,\n  email: string | null,\n  login: string | null,\n  isAuth: boolean\n): SetAuthUserDataActionType =>\n  <SetAuthUserDataActionType>{\n    type: SET_USER_DATA,\n    payload: { email, userId, login, isAuth },\n  };\n\nexport const setAuthUserData = (): AuthThunk => async (\n  dispatch: DispatchTypes\n) => {\n  let data = await authAPI.me();\n  if (data.resultCode === ResultCodeEnum.Success) {\n    let { email, id, login } = data.data;\n    dispatch(setAuthUserDataSuccess(id, email, login, true));\n  }\n};\ntype getCaptchaURLSuccessType = {\n  type: typeof GET_CAPTCHA_URL_SUCCESS;\n  payload: { captchaUrl: string };\n};\n\nexport const getCaptchaURLSuccess = (\n  captchaUrl: string\n): getCaptchaURLSuccessType => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: { captchaUrl },\n});\n\nexport const login = (\n  email: number | null,\n  password: string,\n  rememberMe: string | null,\n  captcha: null | undefined\n): AuthThunk => async (dispatch: DispatchType) => {\n  let loginData = await authAPI.login(email, password, rememberMe, captcha);\n  if (loginData.resultCode === ResultCodeEnum.Success) {\n    dispatch(setAuthUserDataSuccess(email, password, rememberMe, true));\n  } else {\n    if (loginData.resultCode === ResultCodeEnumWithCaptcha.CaptchaIsRequired) {\n      dispatch(getCaptchaURL());\n    }\n    let message =\n      loginData.messages.length > 0 ? loginData.messages[0] : \"Some Error\";\n    dispatch(stopSubmit(\"login\", { _error: message }));\n  }\n};\n\nexport const getCaptchaURL = (): AuthThunk => async (\n  dispatch: DispatchType\n) => {\n  let response = await securityAPI.getCaptcha();\n  const captchaUrl = response.url;\n  dispatch(getCaptchaURLSuccess(captchaUrl));\n};\n\nexport const logout = (): AuthThunk => async (\n  dispatch: Dispatch<AuthActionType>\n) => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserDataSuccess(null, null, null, false));\n  }\n};\n//\n// export const setIsFetching = (isFetching: boolean) => (\n//     {type: TOGGLE_IS_FETCHING, isFetching}\n// )\n\nexport default authReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts",["263"],"import { IActionRecucerType } from \"../types/types\";\n\nconst ADD_DIALOG = \"ADD-DIALOG\";\nconst DELETE_DIALOG = \"DELETE_DIALOG\";\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\ntype DialogsType = {\n  id: number;\n  name: string;\n};\nconst initialState = {\n  messages: [\n    { id: 1, message: \"Hi\" },\n    { id: 2, message: \"How is your day?\" },\n    { id: 3, message: \"Fine, tahnks\" },\n    { id: 4, message: \"Svetlana\" },\n    { id: 5, message: \"Trysa\" },\n    { id: 6, message: \"Fine\" },\n  ] as Array<MessageType>,\n  dialogs: [\n    { id: 1, name: \"Dimich123\" },\n    { id: 2, name: \"Andrew\" },\n    { id: 3, name: \"Valera\" },\n    { id: 4, name: \"Sveta\" },\n    { id: 5, name: \"Polina\" },\n    { id: 6, name: \"Sasha\" },\n  ] as Array<DialogsType>,\n};\n\ntype DialogsActions =\n  | addDialogActionCreatorType\n  | deleteDialogActionCreatorType;\n\nconst dialogsReducer = (state = initialState, action: DialogsActions) => {\n  switch (action.type) {\n    case ADD_DIALOG: {\n      let newDialogText = action.newMessageBody;\n      return {\n        ...state,\n        messages: [...state.messages, { id: 6, message: newDialogText }],\n      };\n    }\n    case DELETE_DIALOG: {\n      return {\n        ...state,\n        dialogs: state.dialogs.filter((p) => p.id !== action.dialogId),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype addDialogActionCreatorType = {\n  type: typeof ADD_DIALOG;\n  newMessageBody: string;\n};\n\nexport const addDialogActionCreator = (\n  newMessageBody: string\n): addDialogActionCreatorType => ({\n  type: ADD_DIALOG,\n  newMessageBody,\n});\ntype deleteDialogActionCreatorType = {\n  type: typeof DELETE_DIALOG;\n  dialogId: number;\n};\nexport const deleteDialog = (\n  dialogId: number\n): deleteDialogActionCreatorType => ({\n  type: DELETE_DIALOG,\n  dialogId,\n});\n\nexport default dialogsReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts",["264","265","266","267","268"],"import { profileAPI, usersAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport {\n  AppState,\n  DispatchType,\n  photosType,\n  ProfileType,\n  StateType,\n  ThunkType,\n} from \"../types/types\";\n\nconst ADD_POST = \"ADD-POST\";\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\nconst SET_STATUS = \"SET_STATUS\";\nconst DELETE_POST = \"DELETE_POST\";\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\";\n\nconst initialState = {\n  posts: [\n    { id: 1, message: \"Hi\", likesCount: 10 },\n    { id: 2, message: \"How is your day?\", likesCount: 20 },\n    { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n    { id: 4, message: \"Svetlana\", likesCount: 50 },\n    { id: 5, message: \"Trysa\", likesCount: 100 },\n    { id: 6, message: \"Fine\", likesCount: 3 },\n  ],\n  profile: null as ProfileType | null,\n  status: \"\",\n  newPostText: \"\",\n};\n\nexport type initialStateType = typeof initialState;\n\ninterface ChangeNewTextActionType {\n  type: \"ADD-POST\";\n  newText: string;\n}\n\ntype SetUserProfileType = {\n  type: \"SET_USER_PROFILE\";\n  profile: null;\n};\n\ntype SetStatusType = {\n  type: \"SET_STATUS\";\n  status: string;\n};\n\ntype SetPhotoType = {\n  type: \"SAVE_PHOTO_SUCCESS\";\n  profile: null;\n};\n\ntype DeletePostType = {\n  type: \"DELETE_POST\";\n  postId: number;\n};\n\nexport type ProfileAction =\n  | addPostActionCreatorType\n  | setUserProfileSuccessType\n  | DeletePostType\n  | SetStatusType\n  | savePhotoSuccessType;\n\nconst profileReducer = (\n  state: initialStateType = initialState,\n  action: ProfileAction\n) => {\n  switch (action.type) {\n    case ADD_POST: {\n      let newPost = {\n        id: 5,\n        message: action.newPostText,\n        likesCount: 0,\n      };\n      return {\n        ...state,\n        posts: [...state.posts, newPost],\n        newPostText: \"\",\n      };\n    }\n\n    case SET_STATUS: {\n      return {\n        ...state,\n        status: action.status,\n      };\n    }\n    case SET_USER_PROFILE: {\n      return { ...state, profile: action.profile };\n    }\n\n    case DELETE_POST: {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.id !== action.postId),\n      };\n    }\n\n    case SAVE_PHOTO_SUCCESS: {\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\n      };\n    }\n  }\n  return state;\n};\n\ntype addPostActionCreatorType = {\n  type: typeof ADD_POST;\n  newPostText: string;\n};\n\nexport const addPostActionCreator = (\n  newPostText: string\n): addPostActionCreatorType => ({\n  type: ADD_POST,\n  newPostText,\n});\n\ntype setUserProfileSuccessType = {\n  type: typeof SET_USER_PROFILE;\n  profile: ProfileType;\n};\n\nexport const setUserProfileSuccess = (\n  profile: ProfileType\n): setUserProfileSuccessType => ({\n  type: SET_USER_PROFILE,\n  profile,\n});\n\nexport const deletePost = (postId: number): DeletePostType => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const setStatus = (status: string): SetStatusType => ({\n  type: SET_STATUS,\n  status,\n});\n\ntype savePhotoSuccessType = {\n  type: typeof SAVE_PHOTO_SUCCESS;\n  photos: photosType;\n};\n\nexport const savePhotoSuccess = (photos: photosType): savePhotoSuccessType => ({\n  type: SAVE_PHOTO_SUCCESS,\n  photos,\n});\n\n// -----------\n// Redux-Thunk for async query\n// -----------\n\ntype ThunksType = ThunkAction<void, AppState, unknown, ProfileAction>;\n\nexport const setUserProfile = (userId: number | null): ThunksType => async (\n  dispatch: DispatchType\n) => {\n  const response = await usersAPI.getUsersProfile(userId);\n  dispatch(setUserProfileSuccess(response.data));\n};\n\nexport const getStatus = (userId: number): ThunksType => async (\n  dispatch: DispatchType\n) => {\n  const response = await profileAPI.getStatus(userId);\n  dispatch(setStatus(response.data));\n};\n\nexport const updateStatus = (status: string): ThunksType => async (\n  dispatch: DispatchType\n) => {\n  try {\n    let response = await profileAPI.updateStatus(status);\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  } catch (error) {\n    alert(error);\n  }\n};\n\nexport const savePhoto = (file: string): ThunksType => async (\n  dispatch: DispatchType\n) => {\n  const response = await profileAPI.savePhoto(file);\n\n  if (response.resultCode === 0) {\n    dispatch(savePhotoSuccess(response.data.photos));\n  }\n};\n\nexport const saveProfile = (profile: ProfileType) => async (\n  dispatch: DispatchType,\n  getState: () => StateType\n) => {\n  const userId = getState().auth.userId;\n  const response = await profileAPI.saveProfile(profile);\n  if (response.resultCode === 0) {\n    dispatch(setUserProfile(userId));\n  } else {\n    // dispatch(stopSubmit(\"edit-profile\", {\"contacts\" : {\"facebook\": response.messages[0]}}))\n    dispatch(stopSubmit(\"edit-profile\", { _error: response.messages[0] }));\n    return Promise.reject(response.messages[0]);\n  }\n};\n\nexport default profileReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts",["269","270","271"],"import profileReducer, { ProfileAction } from \"./profileReducer\";\n\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\ntype DialogType = {\n  id: number;\n  name: string;\n};\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type sideBar = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nexport type ProfilePageType = {\n  posts: Array<PostType>;\n  newPostText: string;\n  profile: null;\n  status: string;\n};\n\nexport type DialogPageType = {\n  messages: MessageType[];\n  dialogs: DialogType[];\n};\n\nexport type sideBarType = {\n  friends: sideBar[];\n};\n\nexport type RootStateType = {\n  profilePage: ProfilePageType;\n  dialogsPage: DialogPageType;\n  sideBar: sideBarType;\n  usersPage: null;\n};\n\nexport type RootStoreType = {\n  _state: RootStateType;\n  _callSubscriber: () => void;\n  getState: () => RootStateType;\n  subscribe: (observer: () => void) => void;\n  dispatch: (action: any) => void;\n};\n\nlet store: RootStoreType = {\n  _state: {\n    profilePage: {\n      posts: [\n        { id: 1, message: \"Hi\", likesCount: 10 },\n        { id: 2, message: \"How is your day?\", likesCount: 20 },\n        { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n        { id: 4, message: \"Svetlana\", likesCount: 50 },\n        { id: 5, message: \"Trysa\", likesCount: 100 },\n        { id: 6, message: \"Fine\", likesCount: 3 },\n      ],\n      newPostText: \"it-kamasutra.com!\",\n      profile: null,\n      status: \"\",\n    },\n    dialogsPage: {\n      messages: [\n        { id: 1, message: \"Hi\" },\n        { id: 2, message: \"How is your day?\" },\n        { id: 3, message: \"Fine, tahnks\" },\n        { id: 4, message: \"Svetlana\" },\n        { id: 5, message: \"Trysa\" },\n        { id: 6, message: \"Fine\" },\n      ],\n      dialogs: [\n        { id: 1, name: \"Dimich123\" },\n        { id: 2, name: \"Andrew\" },\n        { id: 3, name: \"Valera\" },\n        { id: 4, name: \"Sveta\" },\n        { id: 5, name: \"Polina\" },\n        { id: 6, name: \"Sasha\" },\n      ],\n    },\n    sideBar: {\n      friends: [\n        {\n          id: 1,\n          name: \"Kiril\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 2,\n          name: \"Ivan\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 3,\n          name: \"Petrovich\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n      ],\n    },\n    usersPage: null,\n  },\n  getState() {\n    return this._state;\n  },\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n  dispatch: function (action: any) {\n    let { profilePage, dialogsPage, sideBar } = this._state;\n    profileReducer(profilePage, action);\n    dialogsReducer(dialogsPage, action);\n    sidebarReducer(sideBar, action);\n    this._callSubscriber();\n  },\n};\n\nexport default store;\n// window.store = store;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts",["272","273","274","275","276","277","278"],"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../hoc/objectsHelpers\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport {\n  AppState,\n  DispatchType,\n  IActionRecucerType,\n  photosType,\n  StateType,\n  UserType,\n} from \"../types/types\";\nimport { Dispatch } from \"react\";\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\";\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 5,\n  totalUserCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] as Array<number>,\n};\n\ntype InitialState = typeof initialState;\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionTypes\n): InitialState => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        }),\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: false,\n        }),\n      };\n    case SET_USERS:\n      return { ...state, users: action.users };\n\n    case SET_CURRENT_PAGE:\n      return { ...state, currentPage: action.currentPage };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state, totalUserCount: action.count };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state, isFetching: action.isFetching };\n\n    case TOGGLE_FOLLOWING_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter((id) => id != action.userId),\n      };\n  }\n  return state;\n};\n\ntype GetStateType = () => StateType;\ntype DispatchTypes = Dispatch<ActionTypes>;\ntype ThunkType = ThunkAction<void, AppState, unknown, ActionTypes>;\ntype ActionTypes =\n  | ActionTypefollowSuccess\n  | ActionTypeunfollowSuccess\n  | ActionTypeSetUsers\n  | ActionTypeSetCurrentPage\n  | ActionTypeSetTotalUserCount\n  | ActionTypeSetIsFetching\n  | ActionTypeSetFollowingProgress;\n\ntype ActionTypefollowSuccess = {\n  type: typeof FOLLOW;\n  userId: number;\n};\n\nexport const followSuccess = (userId: number): ActionTypefollowSuccess => ({\n  type: FOLLOW,\n  userId,\n});\n\ntype ActionTypeunfollowSuccess = {\n  type: typeof UNFOLLOW;\n  userId: number;\n};\n\nexport const unfollowSuccess = (userId: number): ActionTypeunfollowSuccess => ({\n  type: UNFOLLOW,\n  userId,\n});\n\ntype ActionTypeSetUsers = {\n  type: typeof SET_USERS;\n  users: Array<UserType>;\n};\n\nexport const setUsers = (users: Array<UserType>): ActionTypeSetUsers => ({\n  type: SET_USERS,\n  users,\n});\n\ntype ActionTypeSetCurrentPage = {\n  type: typeof SET_CURRENT_PAGE;\n  currentPage: number;\n};\n\nexport const setCurrentPage = (\n  currentPage: number\n): ActionTypeSetCurrentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage: currentPage,\n});\n\ntype ActionTypeSetTotalUserCount = {\n  type: typeof SET_TOTAL_USERS_COUNT;\n  count: number;\n};\n\nexport const setTotalUserCount = (\n  totalUserCount: number\n): ActionTypeSetTotalUserCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUserCount,\n});\n\ntype ActionTypeSetIsFetching = {\n  type: typeof TOGGLE_IS_FETCHING;\n  isFetching: boolean;\n};\n\nexport const setIsFetching = (\n  isFetching: boolean\n): ActionTypeSetIsFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching,\n});\n\ntype ActionTypeSetFollowingProgress = {\n  type: typeof TOGGLE_FOLLOWING_PROGRESS;\n  isFetching: boolean;\n  userId: number;\n};\n\nexport const setFollowingProgress = (\n  isFetching: boolean,\n  userId: number\n): ActionTypeSetFollowingProgress => ({\n  type: TOGGLE_FOLLOWING_PROGRESS,\n  isFetching,\n  userId,\n});\n\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\n  return (dispatch, getState) => {\n    dispatch(setIsFetching(true));\n    dispatch(setCurrentPage(page));\n\n    usersAPI.getUsers(page, pageSize).then((data) => {\n      dispatch(setIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUserCount(data.totalCount));\n    });\n  };\n};\ntype UnfollowFollowAction = ActionTypefollowSuccess | ActionTypeunfollowSuccess;\nconst _followUnfollowFlow = async (\n  dispatch: DispatchTypes,\n  userId: number,\n  apiMethod: any,\n  actionCreator: (userId: number) => UnfollowFollowAction\n) => {\n  dispatch(setFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(setFollowingProgress(false, userId));\n};\n\nexport const follow = (userId: number): ThunkType => {\n  return async (dispatch: DispatchTypes) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.followUsers.bind(usersAPI),\n      followSuccess\n    );\n  };\n};\n\nexport const unfollow = (userId: number): ThunkType => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.unfollowUsers.bind(usersAPI),\n      unfollowSuccess\n    );\n  };\n};\n\nexport default usersReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx",["279"],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts",["280","281"],"import { setAuthUserData } from \"./auth-reducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport {\n  AppState,\n  DispatchType,\n  IActionRecucerType,\n  StateType,\n} from \"../types/types\";\n\nconst SET_INITIALIZED_SUCCESS = \"SET_INITIALIZED_SUCCESS\";\n\ntype InitialStateType = {\n  initialized: boolean;\n  globalError: null;\n};\n\nlet initialState: InitialStateType = {\n  initialized: false,\n  globalError: null,\n};\n\ntype AppActionType = InitializedSuccessActionType;\ntype ThunkAppType = ThunkAction<void, AppState, unknown, AppActionType>;\n\nconst appReducer = (\n  state = initialState,\n  action: AppActionType\n): InitialStateType => {\n  switch (action.type) {\n    case SET_INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        initialized: true,\n      };\n  }\n  return state;\n};\n\ntype InitializedSuccessActionType = {\n  type: typeof SET_INITIALIZED_SUCCESS;\n};\n\nexport const initializedSuccess = (): InitializedSuccessActionType => ({\n  type: SET_INITIALIZED_SUCCESS,\n});\n\nexport const initializeApp = (): ThunkAppType => {\n  return (dispatch: DispatchType) => {\n    let promise = dispatch(setAuthUserData());\n    Promise.all([promise]).then(() => {\n      dispatch(initializedSuccess());\n    });\n  };\n};\n\nexport default appReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts",["282","283","284","285","286"],"import profileReducer, {\n  addPostActionCreator,\n  deletePost,\n} from \"./profileReducer\";\nimport React, { createElement } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../App\";\n\nconst state = {\n  posts: [\n    { id: 1, message: \"Hi\", likesCount: 10 },\n    { id: 2, message: \"How is your day?\", likesCount: 20 },\n    { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n    { id: 4, message: \"Svetlana\", likesCount: 50 },\n  ],\n  newPostText: \"it-kamasutra.com!\",\n  profile: null,\n  status: \"\",\n};\n\ntest(\"after deleting messages,increment expected \", () => {\n  // 1. Test Data\n\n  let action = deletePost(1);\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(3);\n});\n\ntest(\"Posts length should be incremented\", () => {\n  // 1. Test Data\n\n  let action = addPostActionCreator(\"New Post\");\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(5);\n});\n\ntest(\"after deleting length shouldnt be decrement id ID is incorrect\", () => {\n  // 1. Test Data\n\n  let action = deletePost(10000);\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(4);\n});\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts",["287","288"],"import dialogsReducer, {addDialogActionCreator, deleteDialog} from \"./dialogsReducer\";\r\n\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ]\r\n}\r\ntest('deleting messages ', () => {\r\n    // 1. Test Data\r\n    let action = deleteDialog(1);\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.dialogs.length).toBe(5);\r\n});\r\ntest('add messages ', () => {\r\n    // 1. Test Data\r\n    let action = addDialogActionCreator(\"New Message\");\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.messages.length).toBe(7);\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts",["289","290","291"],"import usersReducer, {followSuccess} from \"./usersReducer\";\r\n\r\nlet State = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\ntest('follow', () => {\r\n    // 1. Test Data\r\n    // let action = followSuccess(2);\r\n    // /// 2. Action\r\n    // let newState = usersReducer(State, action)\r\n    // /// 3. Expectation\r\n    // expect(State.followed).toBe(true);\r\n});\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx",["292"],"import React from \"react\";\nimport s from \"./users.module.css\";\nimport userPhoto from \"../../assets/img/image.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport UsersPagination from \"../Common/Pagination/Pagination\";\n\nlet User = ({ user, followingInProgress, ...props }: any) => {\n  return (\n    <div key={user.id}>\n      <span>\n        <div>\n          <NavLink to={\"/profile/\" + user.id}>\n            <img\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\n              alt=\"#\"\n              className={s.usersPhoto}\n            />\n          </NavLink>\n        </div>\n        <div>\n          {user.followed ? (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.unfollow(user.id);\n              }}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.follow(user.id);\n              }}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </span>\n      <span>\n        <div>{user.name}</div>\n        <div>{user.status}</div>\n      </span>\n      <span>\n        {/*<div>{u.location.country}</div>*/}\n        {/*<div>{u.location.city}</div>*/}\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx",["293","294"],"import React from \"react\";\r\nimport { create } from \"react-test-renderer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nfunction Button(props:any) {\r\n    return <button>Nothing to do for now</button>;\r\n}\r\n\r\ndescribe(\"Profile Status Component\", () => {\r\n    test(\"status from props should be in the state\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const instance = component.getInstance()\r\n        expect(instance.state.status).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"status from props\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span).not.toBeNull();\r\n    });\r\n\r\n    test(\"status from input\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        expect(() => {\r\n            let input = root.findByType(\"input\")\r\n        }).toThrow();\r\n    });\r\n    test(\"auto creation span with status should be displayed with correct status\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span.children[0]).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"input should be displayed in editMode instead of span\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        span.props.onDoubleClick();\r\n        let input = root.findByType(\"input\");\r\n        expect(input.props.value).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"callback should be called\", () => {\r\n        const mockCallback = jest.fn();\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} updateStatus={mockCallback} />);\r\n        const instance = component.getInstance();\r\n        // @ts-ignore\r\n        instance.deactivateEditMode();\r\n        expect(mockCallback.mock.calls.length).toBe(1);\r\n    });\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\types\\types.ts",["295"],"import store from \"../redux/store\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { rootReducer } from \"../redux/reduxStore\";\n\nexport type DispatchType = typeof store.dispatch;\nexport type StateType = ReturnType<AppState>;\nexport type AppState = typeof rootReducer;\nexport type ThunkType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  StateType,\n  unknown,\n  Action<string>\n>;\n\nexport interface IActionRecucerType {\n  type: string;\n  newPostText: string;\n  status: string;\n  profile: null;\n  postId: number;\n  userId: number;\n  users: number[];\n  currentPage: number;\n  count: number;\n  isFetching: boolean;\n  newMessageBody: string;\n  dialogId: number;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n};\nexport type photosType = {\n  small: string | null;\n  large: string | null;\n};\nexport type ProfileType = {\n  userId: number;\n  lookingForAJob: string;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: photosType;\n};\n\ntype PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type UserType = {\n  id: number;\n  name: string;\n  uniqueUrlName: string | null;\n  photos: photosType;\n  status: string | null;\n  followed: boolean;\n};\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainerHook.tsx",["296","297","298"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  follow,\n  requestUsers,\n  setCurrentPage,\n  setFollowingProgress,\n  unfollow,\n} from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport PreLoader from \"../Common/Preloader/Preloader\";\nimport { compose } from \"redux\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getPageSize,\n  getTotalUserCount,\n  getUsers,\n} from \"../../redux/users-selectors\";\nimport { PostType } from \"../../redux/store\";\nimport { StateType } from \"../../types/types\";\n\nexport interface UserPropsContainerType {\n  currentPage: number;\n  pageSize: number;\n  getUsers: (currentPage: number, pageSize: number) => void;\n  isFetching: boolean;\n  users: PostType[];\n  totalUserCount: number;\n  follow: () => void;\n  unfollow: () => void;\n  followingInProgress: () => void;\n}\n\nconst UsersContainer = ({ ...restProps }) => {\n  useEffect(restProps.getUsers(restProps.currentPage, restProps.pageSize), [\n    restProps.currentPage,\n    restProps.pageSize,\n  ]);\n\n  function onPageChanged(pageNumber: number) {\n    let { pageSize } = restProps;\n    restProps.getUsers(pageNumber, pageSize);\n  }\n\n  return (\n    <Users\n      totalUserCount={restProps.totalUserCount}\n      pageSize={restProps.pageSize}\n      currentPage={restProps.currentPage}\n      onPageChanged={restProps.onPageChanged}\n      users={restProps.users}\n      follow={restProps.follow}\n      unfollow={restProps.unfollow}\n      followingInProgress={restProps.followingInProgress}\n    />\n  );\n};\n\nlet mapStateToProps = (state: StateType) => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUserCount: getTotalUserCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, {\n    follow,\n    unfollow,\n    setCurrentPage,\n    setFollowingProgress,\n    getUsers: requestUsers,\n  })\n)(UsersContainer);\n",{"ruleId":"299","severity":1,"message":"300","line":26,"column":8,"nodeType":"301","messageId":"302","endLine":26,"endColumn":26},{"ruleId":"299","severity":1,"message":"303","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":28},{"ruleId":"299","severity":1,"message":"304","line":17,"column":6,"nodeType":"301","messageId":"302","endLine":17,"endColumn":21},{"ruleId":"299","severity":1,"message":"305","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"306","line":9,"column":6,"nodeType":"301","messageId":"302","endLine":9,"endColumn":31},{"ruleId":"299","severity":1,"message":"307","line":2,"column":8,"nodeType":"301","messageId":"302","endLine":2,"endColumn":9},{"ruleId":"299","severity":1,"message":"308","line":2,"column":10,"nodeType":"301","messageId":"302","endLine":2,"endColumn":15},{"ruleId":"299","severity":1,"message":"309","line":6,"column":6,"nodeType":"301","messageId":"302","endLine":6,"endColumn":18},{"ruleId":"299","severity":1,"message":"305","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"310","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":15},{"ruleId":"299","severity":1,"message":"311","line":9,"column":6,"nodeType":"301","messageId":"302","endLine":9,"endColumn":31},{"ruleId":"299","severity":1,"message":"312","line":5,"column":10,"nodeType":"301","messageId":"302","endLine":5,"endColumn":18},{"ruleId":"299","severity":1,"message":"313","line":6,"column":10,"nodeType":"301","messageId":"302","endLine":6,"endColumn":30},{"ruleId":"314","severity":1,"message":"315","line":27,"column":7,"nodeType":"301","messageId":"316","endLine":27,"endColumn":14},{"ruleId":"299","severity":1,"message":"317","line":17,"column":3,"nodeType":"301","messageId":"302","endLine":17,"endColumn":11},{"ruleId":"299","severity":1,"message":"318","line":4,"column":8,"nodeType":"301","messageId":"302","endLine":4,"endColumn":21},{"ruleId":"299","severity":1,"message":"319","line":6,"column":3,"nodeType":"301","messageId":"302","endLine":6,"endColumn":17},{"ruleId":"299","severity":1,"message":"320","line":7,"column":3,"nodeType":"301","messageId":"302","endLine":7,"endColumn":23},{"ruleId":"299","severity":1,"message":"321","line":22,"column":10,"nodeType":"301","messageId":"302","endLine":22,"endColumn":23},{"ruleId":"299","severity":1,"message":"322","line":8,"column":34,"nodeType":"301","messageId":"302","endLine":8,"endColumn":43},{"ruleId":"323","severity":1,"message":"324","line":59,"column":3,"nodeType":"325","messageId":"326","endLine":62,"endColumn":4},{"ruleId":"299","severity":1,"message":"327","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":28},{"ruleId":"299","severity":1,"message":"328","line":4,"column":10,"nodeType":"301","messageId":"302","endLine":4,"endColumn":16},{"ruleId":"299","severity":1,"message":"322","line":11,"column":3,"nodeType":"301","messageId":"302","endLine":11,"endColumn":12},{"ruleId":"299","severity":1,"message":"329","line":36,"column":11,"nodeType":"301","messageId":"302","endLine":36,"endColumn":34},{"ruleId":"299","severity":1,"message":"330","line":41,"column":6,"nodeType":"301","messageId":"302","endLine":41,"endColumn":24},{"ruleId":"299","severity":1,"message":"331","line":51,"column":6,"nodeType":"301","messageId":"302","endLine":51,"endColumn":18},{"ruleId":"299","severity":1,"message":"332","line":1,"column":26,"nodeType":"301","messageId":"302","endLine":1,"endColumn":39},{"ruleId":"299","severity":1,"message":"333","line":5,"column":10,"nodeType":"301","messageId":"302","endLine":5,"endColumn":21},{"ruleId":"299","severity":1,"message":"328","line":6,"column":10,"nodeType":"301","messageId":"302","endLine":6,"endColumn":16},{"ruleId":"299","severity":1,"message":"328","line":4,"column":10,"nodeType":"301","messageId":"302","endLine":4,"endColumn":16},{"ruleId":"299","severity":1,"message":"334","line":7,"column":3,"nodeType":"301","messageId":"302","endLine":7,"endColumn":15},{"ruleId":"299","severity":1,"message":"327","line":8,"column":3,"nodeType":"301","messageId":"302","endLine":8,"endColumn":21},{"ruleId":"299","severity":1,"message":"335","line":9,"column":3,"nodeType":"301","messageId":"302","endLine":9,"endColumn":13},{"ruleId":"336","severity":1,"message":"337","line":70,"column":57,"nodeType":"338","messageId":"339","endLine":70,"endColumn":59},{"ruleId":"299","severity":1,"message":"340","line":76,"column":6,"nodeType":"301","messageId":"302","endLine":76,"endColumn":18},{"ruleId":"336","severity":1,"message":"341","line":191,"column":27,"nodeType":"338","messageId":"339","endLine":191,"endColumn":29},{"ruleId":"299","severity":1,"message":"342","line":5,"column":3,"nodeType":"301","messageId":"302","endLine":5,"endColumn":11},{"ruleId":"299","severity":1,"message":"327","line":6,"column":3,"nodeType":"301","messageId":"302","endLine":6,"endColumn":21},{"ruleId":"299","severity":1,"message":"343","line":7,"column":3,"nodeType":"301","messageId":"302","endLine":7,"endColumn":12},{"ruleId":"299","severity":1,"message":"305","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":13},{"ruleId":"299","severity":1,"message":"344","line":5,"column":17,"nodeType":"301","messageId":"302","endLine":5,"endColumn":30},{"ruleId":"299","severity":1,"message":"345","line":6,"column":8,"nodeType":"301","messageId":"302","endLine":6,"endColumn":16},{"ruleId":"299","severity":1,"message":"346","line":7,"column":8,"nodeType":"301","messageId":"302","endLine":7,"endColumn":11},{"ruleId":"347","severity":1,"message":"348","line":21,"column":6,"nodeType":"349","messageId":"350","endLine":21,"endColumn":51,"fix":"351"},{"ruleId":"347","severity":1,"message":"348","line":23,"column":6,"nodeType":"349","messageId":"350","endLine":23,"endColumn":26,"fix":"352"},{"ruleId":"347","severity":1,"message":"348","line":31,"column":6,"nodeType":"349","messageId":"350","endLine":31,"endColumn":21,"fix":"353"},{"ruleId":"299","severity":1,"message":"354","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":20},{"ruleId":"299","severity":1,"message":"355","line":1,"column":23,"nodeType":"301","messageId":"302","endLine":1,"endColumn":36},{"ruleId":"299","severity":1,"message":"356","line":3,"column":5,"nodeType":"301","messageId":"302","endLine":3,"endColumn":10},{"ruleId":"299","severity":1,"message":"357","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":23},{"ruleId":"299","severity":1,"message":"358","line":5,"column":10,"nodeType":"301","messageId":"302","endLine":5,"endColumn":16},{"ruleId":"299","severity":1,"message":"359","line":27,"column":17,"nodeType":"301","messageId":"302","endLine":27,"endColumn":22},{"ruleId":"299","severity":1,"message":"360","line":54,"column":6,"nodeType":"301","messageId":"302","endLine":54,"endColumn":14},{"ruleId":"299","severity":1,"message":"361","line":11,"column":8,"nodeType":"301","messageId":"302","endLine":11,"endColumn":17},{"ruleId":"362","severity":1,"message":"363","line":37,"column":3,"nodeType":"301","endLine":37,"endColumn":12},{"ruleId":"299","severity":1,"message":"364","line":42,"column":12,"nodeType":"301","messageId":"302","endLine":42,"endColumn":25},"@typescript-eslint/no-unused-vars","'UsersContainerHook' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'DialogPropsType' is defined but never used.","'React' is defined but never used.","'dialogsContainerPropsType' is defined but never used.","'s' is defined but never used.","'Field' is defined but never used.","'NavStateType' is defined but never used.","'Profile' is defined but never used.","'myPostsContainerPropsType' is defined but never used.","'Redirect' is defined but never used.","'ProfileContainerType' is defined but never used.","@typescript-eslint/no-redeclare","'Profile' is already defined.","redeclared","'UserType' is defined but never used.","'ProfileStatus' is defined but never used.","'setCurrentPage' is defined but never used.","'setFollowingProgress' is defined but never used.","'ThunkDispatch' is defined but never used.","'ThunkType' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as SetAuthUserDataActionType' instead of '<SetAuthUserDataActionType>'.","TSTypeAssertion","as","'IActionRecucerType' is defined but never used.","'Action' is defined but never used.","'ChangeNewTextActionType' is defined but never used.","'SetUserProfileType' is defined but never used.","'SetPhotoType' is defined but never used.","'ProfileAction' is defined but never used.","'ThunkAction' is defined but never used.","'DispatchType' is defined but never used.","'photosType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'GetStateType' is defined but never used.","Expected '===' and instead saw '=='.","'required' is defined but never used.","'StateType' is defined but never used.","'createElement' is defined but never used.","'ReactDOM' is defined but never used.","'App' is defined but never used.","jest/valid-title","should not have leading or trailing spaces","Literal","accidentalSpace",{"range":"365","text":"366"},{"range":"367","text":"368"},{"range":"369","text":"370"},"'usersReducer' is defined but never used.","'followSuccess' is defined but never used.","'State' is assigned a value but never used.","'UsersPagination' is defined but never used.","'Button' is defined but never used.","'input' is assigned a value but never used.","'PostType' is defined but never used.","'PreLoader' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","'onPageChanged' is defined but never used.",[518,563],"\"after deleting messages,increment expected\"",[610,630],"'deleting messages'",[853,868],"'add messages'"]