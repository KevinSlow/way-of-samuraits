[{"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts":"1","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx":"2","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx":"3","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx":"4","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx":"5","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx":"6","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx":"8","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx":"9","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx":"11","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx":"12","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx":"13","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx":"14","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx":"15","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx":"16","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx":"17","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx":"18","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx":"19","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"21","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx":"22","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx":"23","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx":"24","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx":"26","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts":"27","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts":"28","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts":"29","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts":"30","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts":"31","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts":"32","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts":"33","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts":"34","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts":"35","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts":"36","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx":"37","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts":"38","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"39"},{"size":1691,"mtime":1608594697252,"results":"40","hashOfConfig":"41"},{"size":273,"mtime":1603906336770,"results":"42","hashOfConfig":"41"},{"size":1680,"mtime":1608079819232,"results":"43","hashOfConfig":"41"},{"size":260,"mtime":1607563377876,"results":"44","hashOfConfig":"41"},{"size":444,"mtime":1605389159327,"results":"45","hashOfConfig":"41"},{"size":2333,"mtime":1608507172390,"results":"46","hashOfConfig":"41"},{"size":824,"mtime":1608340198986,"results":"47","hashOfConfig":"41"},{"size":266,"mtime":1605574789062,"results":"48","hashOfConfig":"41"},{"size":3725,"mtime":1608595901790,"results":"49","hashOfConfig":"41"},{"size":755,"mtime":1608595629319,"results":"50","hashOfConfig":"41"},{"size":1579,"mtime":1608595430080,"results":"51","hashOfConfig":"41"},{"size":152,"mtime":1605389125693,"results":"52","hashOfConfig":"41"},{"size":1725,"mtime":1607726657182,"results":"53","hashOfConfig":"41"},{"size":149,"mtime":1605388618117,"results":"54","hashOfConfig":"41"},{"size":780,"mtime":1608341567967,"results":"55","hashOfConfig":"41"},{"size":811,"mtime":1608340768060,"results":"56","hashOfConfig":"41"},{"size":679,"mtime":1608082488906,"results":"57","hashOfConfig":"41"},{"size":452,"mtime":1608218183327,"results":"58","hashOfConfig":"41"},{"size":1081,"mtime":1608568622960,"results":"59","hashOfConfig":"41"},{"size":2389,"mtime":1608220831237,"results":"60","hashOfConfig":"41"},{"size":1477,"mtime":1608222588945,"results":"61","hashOfConfig":"41"},{"size":161,"mtime":1605399091554,"results":"62","hashOfConfig":"41"},{"size":2251,"mtime":1607991102558,"results":"63","hashOfConfig":"41"},{"size":1951,"mtime":1608081939223,"results":"64","hashOfConfig":"41"},{"size":625,"mtime":1608079373869,"results":"65","hashOfConfig":"41"},{"size":798,"mtime":1606779797889,"results":"66","hashOfConfig":"41"},{"size":41,"mtime":1605289924657,"results":"67","hashOfConfig":"41"},{"size":1727,"mtime":1608595970923,"results":"68","hashOfConfig":"41"},{"size":1546,"mtime":1608340168107,"results":"69","hashOfConfig":"41"},{"size":2985,"mtime":1608340768053,"results":"70","hashOfConfig":"41"},{"size":750,"mtime":1608307546183,"results":"71","hashOfConfig":"41"},{"size":148,"mtime":1606168019500,"results":"72","hashOfConfig":"41"},{"size":3746,"mtime":1608340053201,"results":"73","hashOfConfig":"41"},{"size":4672,"mtime":1607991425407,"results":"74","hashOfConfig":"41"},{"size":426,"mtime":1603906336770,"results":"75","hashOfConfig":"41"},{"size":241,"mtime":1603906336770,"results":"76","hashOfConfig":"41"},{"size":995,"mtime":1608505488645,"results":"77","hashOfConfig":"41"},{"size":292,"mtime":1608504946249,"results":"78","hashOfConfig":"41"},{"size":903,"mtime":1608508601975,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7p7rf",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx",["171","172","173","174","175"],"import React from \"react\";\r\n\r\nimport './App.css';\r\n\r\nimport Header from \"./components/Header/Header\";\r\nimport Nav from \"./components/Navbar/Nav\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Dialogs from \"./components/Dialogs/Dialogs\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {RootStateType, RootStoreType} from \"./redux/store\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\n\r\n\r\ntype AppPropsType = {\r\n    store: RootStoreType\r\n}\r\n\r\nconst App = () => {\r\n\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <HeaderContainer/>\r\n            <Nav/>\r\n            <div className=\"app-wrapper-content\">\r\n                <Route exact render={() => (<DialogsContainer/>)} path=\"/dialogs\"/>\r\n                <Route exact render={() => (<ProfileContainer/>)}  path=\"/profile/:userId?\"/>\r\n                <Route exact component={News} path=\"/news\"/>\r\n                <Route exact component={Music} path=\"/music\"/>\r\n                <Route exact component={Settings} path=\"/settings\"/>\r\n                <Route exact render={() => (<UsersContainer/>)} path=\"/users\"/>\r\n                <Route exact render={() => (<LoginPage />)} path=\"/login\" />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx",["176","177"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport TextArea from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/Validators/validators\";\r\n\r\n\r\ntype StatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageBody: string) => void,\r\n    updateNewMessageBody: (text: string) => void,\r\n    isAuth: boolean\r\n};\r\n\r\ntype DialogPropsType = {\r\n    dialogs: Array<DialogsItemsType>,\r\n    messages: Array<MessagesItemsType>,\r\n\r\n}\r\ntype DialogsItemsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\ntype MessagesItemsType = {\r\n    message: string,\r\n\r\n}\r\n\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\n\r\nconst Dialogs = (props: StatePropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages.map((m) => (\r\n        <Message key={m.id} message={m.message}/>\r\n    ))\r\n\r\n\r\n    const addNewMessage = (values: any) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.chatBlocks}>\r\n                <div className={s.chatFirst}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.chatSecond}>\r\n                    <ul className={s.chatThread}>\r\n                        {messagesElements}\r\n                    </ul>\r\n                    <ReduxMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <div className=\"write\">\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={TextArea} validate={[required, maxLength]} name={\"newMessageBody\"}  placeholder={\"Enter your message\"}/>\r\n                <button  className={s.send}></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxMessageForm = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx",["178","179"],"import React from \"react\";\r\nimport {\r\n    addDialogActionCreator,\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {RootStoreType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\ntype dialogsContainerPropsType = {\r\n    store: RootStoreType\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return{\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(addDialogActionCreator(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose<any>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx",["180"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx",["181","182","183","184"],"import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout, setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\nclass HeaderContainer extends React.Component<any, any> {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.setAuthUserData();\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps,{setAuthUserData, logout})(HeaderContainer);","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx",["185"],"import React from \"react\";\r\nimport s from './Nav.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport store from \"../../redux/store\";\r\n\r\n\r\ntype NavStateType = {\r\n    state: NavPropsType\r\n}\r\n\r\ntype NavPropsType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\ntype FriendsType = {\r\n    id: number,\r\n    name: string,\r\n    imgUrl: string\r\n}\r\n\r\n\r\nconst  Nav  = () => {\r\n\r\n    let state = store.getState().sideBar;\r\n\r\n    let friendsMessages = state.friends.map((f: FriendsType) => (\r\n        <div className={s.friendsBlock}>\r\n            <img className={s.friendsImg} src={f.imgUrl} alt=\"friends\"/>\r\n            <NavLink to={\"/profile/\" + f.id}><p>{f.name}</p></NavLink>\r\n        </div>\r\n    ));\r\n\r\n        return (\r\n            <div>\r\n                <nav className={s.nav}>\r\n                    <div className={`${s.item}`}><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={s.item}><NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/news\" activeClassName={s.active}>News</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink></div>\r\n                    <div className={s.friendsBlocks}>\r\n                        {friendsMessages}\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\nexport default Nav;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx",["186","187","188"],"import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport {RootStoreType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"../Profile\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype myPostsContainerPropsType = {\r\n    store: RootStoreType\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        post: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any,) => {\r\n    return{\r\n        addPosts: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer: any = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n\r\n\r\nexport default MyPostsContainer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx",["189"],"import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["190"],"import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport PreLoader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nconst ProfileInfo = (props: any) => {\r\n    if(!props.profile){\r\n        return <PreLoader/>\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={s.descriptionBlock} >\r\n                <img src={props.profile.photos.large} alt=\"\"/>\r\n                    <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n                <div>\r\n                    <div>{props.profile.aboutMe}</div>\r\n                </div>\r\n                <div>\r\n                    Social Network\r\n                    <ul>\r\n                        <a href={\"#\"}>{props.profile.contacts.facebook}</a>\r\n                        <li>{props.profile.contacts.website ? props.profile.contacts.website : \"nothing here\"}</li>\r\n                        <li>{props.profile.contacts.vk ? props.profile.contacts.vk : \"nothing here\"}</li>\r\n                        <li>{props.profile.contacts.twitter ? props.profile.contacts.twitter : \"nothing here\"}</li>\r\n                        <li>{props.profile.contacts.instagram ? props.profile.contacts.instagram : \"nothing here\"}</li>\r\n                        <li>{props.profile.contacts.youtube ? props.profile.contacts.youtube : \"nothing here\"}</li>\r\n                        <li>{props.profile.contacts.github ? props.profile.contacts.github : \"nothing here\"}</li>\r\n                        <li>{props.profile.contacts.mainLink ? props.profile.contacts.mainLink : \"nothing here\"}</li>\r\n                    </ul>\r\n                </div>\r\n                <div>\r\n                    Looking for a Job\r\n                    <div>{props.profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n                </div>\r\n                <div>\r\n                    lookingForAJobDescription\r\n                    <div>{props.profile.lookingForAJobDescription}</div>\r\n                </div>\r\n                <div>\r\n                    Full Name\r\n                    <div>{props.profile.fullName}</div>\r\n                </div>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx",["191","192"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, getUsers,\r\n    setCurrentPage, setFollowingProgress,\r\n    unfollow\r\n} from \"../../redux/usersReducer\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport PreLoader from \"../Common/Preloader/Preloader\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component<any, any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage,this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: any) => {\r\n        this.props.getUsers(pageNumber,this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ?\r\n                <PreLoader/>\r\n                :   <Users totalUserCount={this.props.totalUserCount}\r\n                           pageSize={this.props.pageSize}\r\n                           currentPage={this.props.currentPage}\r\n                           onPageChanged={this.onPageChanged}\r\n                           users={this.props.users}\r\n                           follow={this.props.follow}\r\n                           unfollow={this.props.unfollow}\r\n                           followingInProgress={this.props.followingInProgress}\r\n                />\r\n            }\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUserCount: state.usersPage.totalUserCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<any>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps,{follow, unfollow, setCurrentPage, setFollowingProgress, getUsers}),\r\n)(UsersContainer)","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts",["193"],"\r\nconst ADD_DIALOG = \"ADD-DIALOG\";\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ]\r\n}\r\n\r\ninterface ActionA {\r\n    type: 'ADD-DIALOG';\r\n    newMessageBody: string\r\n}\r\n\r\ninterface ActionB {\r\n    type: 'UPDATE-NEW-DIALOG-TEXT';\r\n    newDialogText: string\r\n}\r\n\r\ntype dialogsReducerType = {\r\n    dialogs: Array<DialogType>,\r\n    messages: Array<MessageType>,\r\n    newDialogText: string\r\n};\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\n\r\nexport type ActionType = ActionA | ActionB;\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionType) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case ADD_DIALOG:\r\n            let newDialogText = action.newMessageBody;\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: newDialogText}]\r\n            };\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nexport const addDialogActionCreator = (newMessageBody:string) => ({\r\n    type:ADD_DIALOG,\r\n    newMessageBody\r\n});\r\n\r\n\r\n\r\nexport default dialogsReducer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts",["194","195","196","197","198"],"import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {setIsFetching, setTotalUserCount, setUsers} from \"./usersReducer\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi\", likesCount: 10},\r\n        {id: 2, message: \"How is your day?\", likesCount: 20},\r\n        {id: 3, message: \"Fine, tahnks\", likesCount: 0},\r\n        {id: 4, message: \"Svetlana\", likesCount: 50},\r\n        {id: 5, message: \"Trysa\", likesCount: 100},\r\n        {id: 6, message: \"Fine\", likesCount: 3}\r\n    ],\r\n    newPostText: \"it-kamasutra.com!\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\ntype profileReducerType = {\r\n    newPostText: string,\r\n    posts: Array<PostType>,\r\n}\r\n\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ninterface ActionA {\r\n    type: 'ADD-POST';\r\n    newText: string\r\n}\r\n\r\ninterface ActionB {\r\n    type: 'UPDATE-NEW-POST-TEXT';\r\n    newText: string\r\n}\r\n\r\ninterface ActionC {\r\n    type: 'SET_USER_PROFILE';\r\n    profile: any\r\n}\r\n\r\nexport type Action = ActionA | ActionB | ActionC;\r\n\r\n\r\nconst profileReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText:string) => ({\r\n    type: ADD_POST,\r\n    newPostText\r\n});\r\n\r\n\r\nexport const setUserProfileSuccess = (profile: any) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile,\r\n});\r\nexport const setUserProfile = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        usersAPI.getUsersProfile(userId)\r\n            .then((response) => {\r\n                dispatch(setUserProfileSuccess(response.data));\r\n            })\r\n    }\r\n};\r\nexport const setStatus = (status: any) => ({\r\n    type: SET_STATUS,\r\n    status,\r\n});\r\nexport const getStatus = (userId: number) => (dispatch: any) => {\r\n    profileAPI.getStatus(userId)\r\n        .then((response) => {\r\n            dispatch(setStatus(response.data));\r\n        })\r\n};\r\n\r\nexport const updateStatus = (status: number) => (dispatch: any) => {\r\n    debugger\r\n    profileAPI.updateStatus(status)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n        })\r\n};\r\n\r\n\r\nexport default profileReducer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts",["199","200"],"import {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\";\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\ntype profileReducerType = {\r\n    newPostText: string,\r\n    posts: Array<PostType>,\r\n}\r\n\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ninterface ActionA {\r\n    type: 'FOLLOW';\r\n    newText: string\r\n}\r\n\r\ninterface ActionB {\r\n    type: 'UNFOLLOW';\r\n    newText: string\r\n}\r\n\r\ninterface ActionC {\r\n    type: 'SET_USERS';\r\n    newText: string\r\n}\r\n\r\ninterface ActionD {\r\n    type: 'TOGGLE_IS_FETCHING';\r\n    newText: string\r\n}\r\n\r\nexport type Action = ActionA | ActionB | ActionC | ActionD;\r\n\r\n\r\nconst usersReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    // @ts-ignore\r\n                    if (u.id === action.userId) {\r\n                        // @ts-ignore\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    // @ts-ignore\r\n                    if (u.id === action.userId) {\r\n                        // @ts-ignore\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUserCount: action.count}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({\r\n    type: FOLLOW,\r\n    userId,\r\n});\r\n\r\nexport const unfollowSuccess = (userId: number) => ({\r\n    type: UNFOLLOW,\r\n    userId\r\n});\r\n\r\nexport const setUsers = (users: any) => ({\r\n    type: SET_USERS,\r\n    users\r\n});\r\n\r\nexport const setCurrentPage = (currentPage: any) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n});\r\n\r\nexport const setTotalUserCount = (setTotalUserCount: any) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: setTotalUserCount\r\n});\r\n\r\nexport const setIsFetching = (isFetching: boolean) => (\r\n    {type: TOGGLE_IS_FETCHING, isFetching}\r\n)\r\n\r\nexport const setFollowingProgress = (isFetching: boolean, userId: number) => (\r\n    {type: TOGGLE_FOLLOWING_PROGRESS, isFetching, userId}\r\n)\r\n\r\n\r\nexport const getUsers = (currentPage:any,pageSize:any) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setIsFetching(true));\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then((data) => {\r\n                dispatch(setIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUserCount(data.totalCount))\r\n            })\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const follow = (userId:number) => {\r\n\r\n    return (dispatch: any) => {\r\n        dispatch(setFollowingProgress(true, userId))\r\n        usersAPI.followUsers(userId)\r\n            .then((data) => {\r\n                if(data.resultCode === 0){\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(setFollowingProgress(false, userId))\r\n            })\r\n    }\r\n\r\n};\r\n\r\nexport const unfollow = (userId:number) => {\r\ndebugger\r\n    return (dispatch: any) => {\r\n        dispatch(setFollowingProgress(true, userId))\r\n        usersAPI.unfollowUsers(userId)\r\n            .then((data) => {\r\n                if(data.resultCode === 0){\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(setFollowingProgress(false, userId))\r\n            })\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\nexport default usersReducer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx",[],{"ruleId":"201","severity":1,"message":"202","line":5,"column":8,"nodeType":"203","messageId":"204","endLine":5,"endColumn":14},{"ruleId":"201","severity":1,"message":"205","line":7,"column":8,"nodeType":"203","messageId":"204","endLine":7,"endColumn":15},{"ruleId":"201","severity":1,"message":"206","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":15},{"ruleId":"201","severity":1,"message":"207","line":13,"column":9,"nodeType":"203","messageId":"204","endLine":13,"endColumn":22},{"ruleId":"201","severity":1,"message":"208","line":21,"column":6,"nodeType":"203","messageId":"204","endLine":21,"endColumn":18},{"ruleId":"201","severity":1,"message":"209","line":1,"column":16,"nodeType":"203","messageId":"204","endLine":1,"endColumn":27},{"ruleId":"201","severity":1,"message":"210","line":18,"column":6,"nodeType":"203","messageId":"204","endLine":18,"endColumn":21},{"ruleId":"201","severity":1,"message":"211","line":1,"column":8,"nodeType":"203","messageId":"204","endLine":1,"endColumn":13},{"ruleId":"201","severity":1,"message":"212","line":11,"column":6,"nodeType":"203","messageId":"204","endLine":11,"endColumn":31},{"ruleId":"201","severity":1,"message":"213","line":2,"column":8,"nodeType":"203","messageId":"204","endLine":2,"endColumn":9},{"ruleId":"201","severity":1,"message":"213","line":2,"column":8,"nodeType":"203","messageId":"204","endLine":2,"endColumn":9},{"ruleId":"201","severity":1,"message":"214","line":3,"column":9,"nodeType":"203","messageId":"204","endLine":3,"endColumn":16},{"ruleId":"201","severity":1,"message":"215","line":5,"column":8,"nodeType":"203","messageId":"204","endLine":5,"endColumn":13},{"ruleId":"201","severity":1,"message":"216","line":8,"column":9,"nodeType":"203","messageId":"204","endLine":8,"endColumn":17},{"ruleId":"201","severity":1,"message":"217","line":7,"column":6,"nodeType":"203","messageId":"204","endLine":7,"endColumn":18},{"ruleId":"201","severity":1,"message":"211","line":1,"column":8,"nodeType":"203","messageId":"204","endLine":1,"endColumn":13},{"ruleId":"201","severity":1,"message":"205","line":5,"column":8,"nodeType":"203","messageId":"204","endLine":5,"endColumn":15},{"ruleId":"201","severity":1,"message":"218","line":9,"column":6,"nodeType":"203","messageId":"204","endLine":9,"endColumn":31},{"ruleId":"201","severity":1,"message":"219","line":5,"column":9,"nodeType":"203","messageId":"204","endLine":5,"endColumn":17},{"ruleId":"220","severity":1,"message":"221","line":25,"column":25,"nodeType":"222","endLine":25,"endColumn":39},{"ruleId":"201","severity":1,"message":"215","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":13},{"ruleId":"201","severity":1,"message":"216","line":11,"column":9,"nodeType":"203","messageId":"204","endLine":11,"endColumn":17},{"ruleId":"201","severity":1,"message":"223","line":34,"column":6,"nodeType":"203","messageId":"204","endLine":34,"endColumn":24},{"ruleId":"201","severity":1,"message":"224","line":2,"column":9,"nodeType":"203","messageId":"204","endLine":2,"endColumn":22},{"ruleId":"201","severity":1,"message":"225","line":2,"column":24,"nodeType":"203","messageId":"204","endLine":2,"endColumn":41},{"ruleId":"201","severity":1,"message":"226","line":2,"column":43,"nodeType":"203","messageId":"204","endLine":2,"endColumn":51},{"ruleId":"201","severity":1,"message":"227","line":5,"column":7,"nodeType":"203","messageId":"204","endLine":5,"endColumn":27},{"ruleId":"201","severity":1,"message":"228","line":23,"column":6,"nodeType":"203","messageId":"204","endLine":23,"endColumn":24},{"ruleId":"201","severity":1,"message":"228","line":20,"column":6,"nodeType":"203","messageId":"204","endLine":20,"endColumn":24},{"ruleId":"229","severity":1,"message":"230","line":101,"column":65,"nodeType":"231","messageId":"232","endLine":101,"endColumn":67},"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Profile' is defined but never used.","'Dialogs' is defined but never used.","'RootStateType' is defined but never used.","'AppPropsType' is defined but never used.","'ChangeEvent' is defined but never used.","'DialogPropsType' is defined but never used.","'React' is defined but never used.","'dialogsContainerPropsType' is defined but never used.","'s' is defined but never used.","'NavLink' is defined but never used.","'axios' is defined but never used.","'usersAPI' is defined but never used.","'NavStateType' is defined but never used.","'myPostsContainerPropsType' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'dialogsReducerType' is defined but never used.","'setIsFetching' is defined but never used.","'setTotalUserCount' is defined but never used.","'setUsers' is defined but never used.","'UPDATE_NEW_POST_TEXT' is assigned a value but never used.","'profileReducerType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]