[{"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts":"1","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx":"2","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx":"3","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx":"4","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx":"5","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx":"6","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx":"8","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx":"9","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx":"11","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx":"12","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx":"13","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx":"14","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx":"15","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx":"16","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx":"17","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx":"18","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx":"19","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"21","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx":"22","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx":"23","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx":"24","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx":"26","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts":"27","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts":"28","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts":"29","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts":"30","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts":"31","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts":"32","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts":"33","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts":"34","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts":"35","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts":"36","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx":"37","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts":"38","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"39","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts":"40","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts":"41","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"42","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts":"43","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts":"44","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts":"45","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts":"46","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx":"47","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx":"48"},{"size":1691,"mtime":1608594697252,"results":"49","hashOfConfig":"50"},{"size":289,"mtime":1608924828832,"results":"51","hashOfConfig":"50"},{"size":2444,"mtime":1608994870809,"results":"52","hashOfConfig":"50"},{"size":260,"mtime":1607563377876,"results":"53","hashOfConfig":"50"},{"size":444,"mtime":1605389159327,"results":"54","hashOfConfig":"50"},{"size":2335,"mtime":1608936342672,"results":"55","hashOfConfig":"50"},{"size":824,"mtime":1608340198986,"results":"56","hashOfConfig":"50"},{"size":266,"mtime":1605574789062,"results":"57","hashOfConfig":"50"},{"size":3725,"mtime":1608595901790,"results":"58","hashOfConfig":"50"},{"size":497,"mtime":1608674773183,"results":"59","hashOfConfig":"50"},{"size":1625,"mtime":1608936877394,"results":"60","hashOfConfig":"50"},{"size":152,"mtime":1605389125693,"results":"61","hashOfConfig":"50"},{"size":1725,"mtime":1607726657182,"results":"62","hashOfConfig":"50"},{"size":149,"mtime":1605388618117,"results":"63","hashOfConfig":"50"},{"size":798,"mtime":1608772177223,"results":"64","hashOfConfig":"50"},{"size":811,"mtime":1608340768060,"results":"65","hashOfConfig":"50"},{"size":679,"mtime":1608082488906,"results":"66","hashOfConfig":"50"},{"size":452,"mtime":1608218183327,"results":"67","hashOfConfig":"50"},{"size":1288,"mtime":1608770419854,"results":"68","hashOfConfig":"50"},{"size":2347,"mtime":1608947027071,"results":"69","hashOfConfig":"50"},{"size":1477,"mtime":1608222588945,"results":"70","hashOfConfig":"50"},{"size":161,"mtime":1605399091554,"results":"71","hashOfConfig":"50"},{"size":1038,"mtime":1608949838609,"results":"72","hashOfConfig":"50"},{"size":1997,"mtime":1608949848039,"results":"73","hashOfConfig":"50"},{"size":625,"mtime":1608079373869,"results":"74","hashOfConfig":"50"},{"size":513,"mtime":1608994611205,"results":"75","hashOfConfig":"50"},{"size":41,"mtime":1605289924657,"results":"76","hashOfConfig":"50"},{"size":1821,"mtime":1608936823381,"results":"77","hashOfConfig":"50"},{"size":1928,"mtime":1608930004875,"results":"78","hashOfConfig":"50"},{"size":2964,"mtime":1608936735962,"results":"79","hashOfConfig":"50"},{"size":1037,"mtime":1608954363773,"results":"80","hashOfConfig":"50"},{"size":148,"mtime":1606168019500,"results":"81","hashOfConfig":"50"},{"size":3746,"mtime":1608340053201,"results":"82","hashOfConfig":"50"},{"size":5929,"mtime":1608955962890,"results":"83","hashOfConfig":"50"},{"size":426,"mtime":1603906336770,"results":"84","hashOfConfig":"50"},{"size":241,"mtime":1603906336770,"results":"85","hashOfConfig":"50"},{"size":997,"mtime":1608936352284,"results":"86","hashOfConfig":"50"},{"size":292,"mtime":1608504946249,"results":"87","hashOfConfig":"50"},{"size":1314,"mtime":1608937077177,"results":"88","hashOfConfig":"50"},{"size":804,"mtime":1608682462067,"results":"89","hashOfConfig":"50"},{"size":730,"mtime":1608950155107,"results":"90","hashOfConfig":"50"},{"size":1283,"mtime":1608734577011,"results":"91","hashOfConfig":"50"},{"size":1379,"mtime":1608928185314,"results":"92","hashOfConfig":"50"},{"size":1107,"mtime":1608930227260,"results":"93","hashOfConfig":"50"},{"size":449,"mtime":1608945237233,"results":"94","hashOfConfig":"50"},{"size":263,"mtime":1608955991189,"results":"95","hashOfConfig":"50"},{"size":685,"mtime":1608946110570,"results":"96","hashOfConfig":"50"},{"size":1748,"mtime":1608949399300,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7p7rf",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx",["213"],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx",["214","215"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/Validators/validators\";\r\n\r\n\r\ntype StatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageBody: string) => void,\r\n    updateNewMessageBody: (text: string) => void,\r\n    isAuth: boolean\r\n};\r\n\r\ntype DialogPropsType = {\r\n    dialogs: Array<DialogsItemsType>,\r\n    messages: Array<MessagesItemsType>,\r\n\r\n}\r\ntype DialogsItemsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\ntype MessagesItemsType = {\r\n    message: string,\r\n\r\n}\r\n\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\n\r\nconst Dialogs = (props: StatePropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages.map((m) => (\r\n        <Message key={m.id} message={m.message}/>\r\n    ))\r\n\r\n\r\n    const addNewMessage = (values: any) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.chatBlocks}>\r\n                <div className={s.chatFirst}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.chatSecond}>\r\n                    <ul className={s.chatThread}>\r\n                        {messagesElements}\r\n                    </ul>\r\n                    <ReduxMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <div className=\"write\">\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={TextArea} validate={[required, maxLength]} name={\"newMessageBody\"}  placeholder={\"Enter your message\"}/>\r\n                <button  className={s.send}></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxMessageForm = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx",["216","217"],"import React from \"react\";\r\nimport {\r\n    addDialogActionCreator,\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {RootStoreType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\ntype dialogsContainerPropsType = {\r\n    store: RootStoreType\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return{\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(addDialogActionCreator(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose<any>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx",["218"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx",["219"],"import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {CreateField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/Validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport s from \"../Common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\nconst LoginForm = ({handleSubmit,error}: { handleSubmit: any, error: string }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {CreateField(\"email\", \"email\",[required],Input,{type: \"text\"} )}\r\n                {CreateField(\"password\", \"password\",[required],Input,{type: \"password\"} ) }\r\n                {CreateField(\"\", \"password\",null,Input, {type: \"checkbox\"}, \"remember Me\" )}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm(\r\n    {form: 'login'}\r\n)(LoginForm)\r\n\r\nconst Login = (props:any) => {\r\n    const onSubmit = (formData: any) => {\r\n        console.log(formData)\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login)","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx",["220"],"import React from \"react\";\r\nimport s from './Nav.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport store from \"../../redux/store\";\r\n\r\n\r\ntype NavStateType = {\r\n    state: NavPropsType\r\n}\r\n\r\ntype NavPropsType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\ntype FriendsType = {\r\n    id: number,\r\n    name: string,\r\n    imgUrl: string\r\n}\r\n\r\n\r\nconst  Nav  = () => {\r\n\r\n    let state = store.getState().sideBar;\r\n\r\n    let friendsMessages = state.friends.map((f: FriendsType) => (\r\n        <div className={s.friendsBlock}>\r\n            <img className={s.friendsImg} src={f.imgUrl} alt=\"friends\"/>\r\n            <NavLink to={\"/profile/\" + f.id}><p>{f.name}</p></NavLink>\r\n        </div>\r\n    ));\r\n\r\n        return (\r\n            <div>\r\n                <nav className={s.nav}>\r\n                    <div className={`${s.item}`}><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={s.item}><NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/news\" activeClassName={s.active}>News</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink></div>\r\n                    <div className={s.item}><NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink></div>\r\n                    <div className={s.friendsBlocks}>\r\n                        {friendsMessages}\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\nexport default Nav;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx",["221","222","223"],"import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport {RootStoreType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"../Profile\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype myPostsContainerPropsType = {\r\n    store: RootStoreType\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        post: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any,) => {\r\n    return{\r\n        addPosts: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer: any = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n\r\n\r\nexport default MyPostsContainer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx",["224"],"import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["225","226"],"import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport PreLoader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile,status,updateStatus}:any) => {\r\n    if(!profile){\r\n        return <PreLoader/>\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={s.descriptionBlock} >\r\n                <img src={profile.photos.large} alt=\"\"/>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                <div>\r\n                    <div>{profile.aboutMe}</div>\r\n                </div>\r\n                <div>\r\n                    Social Network\r\n                    <ul>\r\n                        <a href={\"#\"}>{profile.contacts.facebook}</a>\r\n                        <li>{profile.contacts.website ? profile.contacts.website : \"nothing here\"}</li>\r\n                        <li>{profile.contacts.vk ? profile.contacts.vk : \"nothing here\"}</li>\r\n                        <li>{profile.contacts.twitter ? profile.contacts.twitter : \"nothing here\"}</li>\r\n                        <li>{profile.contacts.instagram ? profile.contacts.instagram : \"nothing here\"}</li>\r\n                        <li>{profile.contacts.youtube ? profile.contacts.youtube : \"nothing here\"}</li>\r\n                        <li>{profile.contacts.github ? profile.contacts.github : \"nothing here\"}</li>\r\n                        <li>{profile.contacts.mainLink ? profile.contacts.mainLink : \"nothing here\"}</li>\r\n                    </ul>\r\n                </div>\r\n                <div>\r\n                    Looking for a Job\r\n                    <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n                </div>\r\n                <div>\r\n                    lookingForAJobDescription\r\n                    <div>{profile.lookingForAJobDescription}</div>\r\n                </div>\r\n                <div>\r\n                    Full Name\r\n                    <div>{profile.fullName}</div>\r\n                </div>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx",["227","228","229"],"import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/img/image.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport UsersPagination from \"../Common/Pagination/Pagination\";\r\nimport User from \"./User\";\r\n\r\nlet Users = ({followingInProgress, users, currentPage, pageSize, totalUserCount, onPageChanged, ...props}: any) => {\r\n\r\n    return (\r\n        <div>\r\n            <UsersPagination\r\n                totalUserCount={totalUserCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n            />\r\n            <div>\r\n                {users.map((u: any) => <User\r\n                        key={u.id}\r\n                        user={u}\r\n                        follow={props.follow}\r\n                        unfollow={props.unfollow}\r\n                        followingInProgress={followingInProgress}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx",["230"],"import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport './index.css';\n\nimport {Provider} from \"react-redux\";\nimport SamuraiJSApp from './App';\n\n\n\n    ReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts",["231"],"\r\nconst ADD_DIALOG = \"ADD-DIALOG\";\r\nconst DELETE_DIALOG = \"DELETE_DIALOG\";\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ],\r\n}\r\n\r\ninterface ActionA {\r\n    type: 'ADD-DIALOG';\r\n    newMessageBody: string\r\n}\r\n\r\ninterface ActionB {\r\n    type: 'UPDATE-NEW-DIALOG-TEXT';\r\n    newDialogText: string\r\n}\r\ntype ActionC = {\r\n    type: \"DELETE_DIALOG\";\r\n    dialogId: number\r\n};\r\ntype dialogsReducerType = {\r\n    dialogs: Array<DialogType>,\r\n    messages: Array<MessageType>,\r\n    newDialogText: string\r\n};\r\n\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport type ActionType = ActionA | ActionB | ActionC;\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: any) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case ADD_DIALOG:{\r\n            let newDialogText = action.newMessageBody;\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: newDialogText}]\r\n            };\r\n        }\r\n        case DELETE_DIALOG:{\r\n            return {...state, dialogs: state.dialogs.filter(p => p.id !== action.dialogId)}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addDialogActionCreator = (newMessageBody:string) => ({\r\n    type:ADD_DIALOG,\r\n    newMessageBody\r\n});\r\n\r\nexport const deleteDialog = (dialogId: number) => ({\r\n    type: DELETE_DIALOG,\r\n    dialogId\r\n})\r\n\r\n\r\nexport default dialogsReducer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts",["232"],"import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\n\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi\", likesCount: 10},\r\n        {id: 2, message: \"How is your day?\", likesCount: 20},\r\n        {id: 3, message: \"Fine, tahnks\", likesCount: 0},\r\n        {id: 4, message: \"Svetlana\", likesCount: 50},\r\n        {id: 5, message: \"Trysa\", likesCount: 100},\r\n        {id: 6, message: \"Fine\", likesCount: 3}\r\n    ],\r\n    newPostText: \"it-kamasutra.com!\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ninterface ActionA {\r\n    type: 'ADD-POST';\r\n    newText: string\r\n}\r\n\r\ninterface ActionB {\r\n    type: 'UPDATE-NEW-POST-TEXT';\r\n    newText: string\r\n}\r\n\r\ninterface ActionC {\r\n    type: 'SET_USER_PROFILE';\r\n    profile: any\r\n}\r\n\r\nexport type Action = ActionA | ActionB | ActionC;\r\n\r\n\r\nconst profileReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({\r\n    type: ADD_POST,\r\n    newPostText\r\n});\r\n\r\n\r\nexport const setUserProfileSuccess = (profile: any) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile,\r\n});\r\n\r\nexport const deletePost = (postId: number) => ({\r\n    type: DELETE_POST,\r\n    postId\r\n});\r\n\r\nexport const setStatus = (status: any) => ({\r\n    type: SET_STATUS,\r\n    status,\r\n});\r\n// -----------\r\n// Redux-Thunk for async query\r\n// -----------\r\n\r\nexport const setUserProfile = (userId: number) => async (dispatch: any) => {\r\n    const response = await usersAPI.getUsersProfile(userId)\r\n    dispatch(setUserProfileSuccess(response.data));\r\n};\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data));\r\n};\r\n\r\nexport const updateStatus = (status: number) => async (dispatch: any) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n};\r\n\r\n\r\nexport default profileReducer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts",["233"],"import {createStore, combineReducers, applyMiddleware, compose} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\n\r\n\r\n\r\nconst store = createStore(reducers, composeWithDevTools(\r\n    applyMiddleware(thunkMiddleware)\r\n    // other store enhancers if any\r\n));\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts",["234","235","236","237"],"import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../hoc/objectsHelpers\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\";\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nlet initialStates = {\r\n    users: [\r\n        {\r\n            name: 'ILICH',\r\n            id: 13543,\r\n            uniqueUrlName: null,\r\n            photos: {\r\n                small: null,\r\n                large: null\r\n            },\r\n            status: null,\r\n            followed: false\r\n        },\r\n        {\r\n            name: 'anniemt6',\r\n            id: 13542,\r\n            uniqueUrlName: null,\r\n            photos: {\r\n                small: null,\r\n                large: null\r\n            },\r\n            status: null,\r\n            followed: true\r\n        },\r\n        {\r\n            name: 'DimaAleks',\r\n            id: 13541,\r\n            uniqueUrlName: null,\r\n            photos: {\r\n                small: null,\r\n                large: null\r\n            },\r\n            status: null,\r\n            followed: true\r\n        },\r\n        {\r\n            name: 'KirJS',\r\n            id: 13540,\r\n            uniqueUrlName: null,\r\n            photos: {\r\n                small: null,\r\n                large: null\r\n            },\r\n            status: null,\r\n            followed: true\r\n        },\r\n        {\r\n            name: 'Kir',\r\n            id: 13539,\r\n            uniqueUrlName: null,\r\n            photos: {\r\n                small: null,\r\n                large: null\r\n            },\r\n            status: null,\r\n            followed: false\r\n        }\r\n    ],\r\n    pageSize: 5,\r\n    totalUserCount: 8551,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\ntype profileReducerType = {\r\n    newPostText: string,\r\n    posts: Array<PostType>,\r\n}\r\n\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ninterface ActionA {\r\n    type: 'FOLLOW';\r\n    newText: string\r\n}\r\n\r\ninterface ActionB {\r\n    type: 'UNFOLLOW';\r\n    newText: string\r\n}\r\n\r\ninterface ActionC {\r\n    type: 'SET_USERS';\r\n    newText: string\r\n}\r\n\r\ninterface ActionD {\r\n    type: 'TOGGLE_IS_FETCHING';\r\n    newText: string\r\n}\r\n\r\nexport type Action = ActionA | ActionB | ActionC | ActionD;\r\n\r\n\r\nconst usersReducer = (state = initialStates, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUserCount: action.count}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({\r\n    type: FOLLOW,\r\n    userId,\r\n});\r\n\r\nexport const unfollowSuccess = (userId: number) => ({\r\n    type: UNFOLLOW,\r\n    userId\r\n});\r\n\r\nexport const setUsers = (users: any) => ({\r\n    type: SET_USERS,\r\n    users\r\n});\r\n\r\nexport const setCurrentPage = (currentPage: any) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n});\r\n\r\nexport const setTotalUserCount = (setTotalUserCount: any) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: setTotalUserCount\r\n});\r\n\r\nexport const setIsFetching = (isFetching: boolean) => (\r\n    {type: TOGGLE_IS_FETCHING, isFetching}\r\n)\r\n\r\nexport const setFollowingProgress = (isFetching: boolean, userId: number) => (\r\n    {type: TOGGLE_FOLLOWING_PROGRESS, isFetching, userId}\r\n)\r\n\r\nexport const requestUsers = (page:number, pageSize:number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then((data) => {\r\n                dispatch(setIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUserCount(data.totalCount))\r\n            })\r\n    }\r\n};\r\n\r\nconst _followUnfollowFlow = async  (dispatch: any,\r\n                                    userId: number,\r\n                                    apiMethod: (userId: number) => Promise<any>,\r\n                                    actionCreator: (userId: number) => any)  => {\r\n    dispatch(setFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(setFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const follow = (userId: number): any => {\r\n    return async (dispatch:any) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.followUsers.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): any => {\r\n    return async (dispatch:any) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollowUsers.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx",["238"],"import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {required} from \"../../../utils/Validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <span>{hasError && error}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const TextArea = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props} >\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props} >\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const CreateField = (placeholder :string, name: string, validators: any, component: any, restProps = {}, text = \"\") => {\r\n    return <div><Field\r\n        type=\"text\"\r\n        validate={validators}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        component={component}\r\n        {...restProps}\r\n    /> {text}</div>\r\n};","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts",["239","240","241","242","243"],"import profileReducer, {addPostActionCreator, deletePost} from \"./profileReducer\";\r\nimport React, {createElement} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"../App\";\r\n\r\nconst state = {\r\n    posts: [\r\n        {id: 1, message: \"Hi\", likesCount: 10},\r\n        {id: 2, message: \"How is your day?\", likesCount: 20},\r\n        {id: 3, message: \"Fine, tahnks\", likesCount: 0},\r\n        {id: 4, message: \"Svetlana\", likesCount: 50},\r\n    ],\r\n    newPostText: \"it-kamasutra.com!\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\ntest('after deleting messages,increment expected ', () => {\r\n    // 1. Test Data\r\n\r\n    let action = deletePost(1);\r\n\r\n    /// 2. Action\r\n\r\n    let newState = profileReducer(state, action)\r\n\r\n    /// 3. Expectation\r\n\r\n    expect(newState.posts.length).toBe(3);\r\n});\r\n\r\ntest('Posts length should be incremented', () => {\r\n    // 1. Test Data\r\n\r\n    let action = addPostActionCreator(\"New Post\");\r\n\r\n    /// 2. Action\r\n\r\n    let newState = profileReducer(state, action)\r\n\r\n    /// 3. Expectation\r\n\r\n    expect(newState.posts.length).toBe(5);\r\n});\r\n\r\n\r\ntest('after deleting length shouldnt be decrement id ID is incorrect', () => {\r\n    // 1. Test Data\r\n\r\n    let action = deletePost(10000);\r\n\r\n    /// 2. Action\r\n\r\n    let newState = profileReducer(state, action)\r\n\r\n    /// 3. Expectation\r\n\r\n    expect(newState.posts.length).toBe(4);\r\n});\r\n\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts",["244","245"],"import dialogsReducer, {addDialogActionCreator, deleteDialog} from \"./dialogsReducer\";\r\n\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ]\r\n}\r\ntest('deleting messages ', () => {\r\n    // 1. Test Data\r\n    let action = deleteDialog(1);\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.dialogs.length).toBe(5);\r\n});\r\ntest('add messages ', () => {\r\n    // 1. Test Data\r\n    let action = addDialogActionCreator(\"New Message\");\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.messages.length).toBe(7);\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts",["246","247","248"],"import usersReducer, {followSuccess} from \"./usersReducer\";\r\n\r\nlet State = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\ntest('follow', () => {\r\n    // 1. Test Data\r\n    // let action = followSuccess(2);\r\n    // /// 2. Action\r\n    // let newState = usersReducer(State, action)\r\n    // /// 3. Expectation\r\n    // expect(State.followed).toBe(true);\r\n});\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx",["249"],"import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/img/image.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport UsersPagination from \"../Common/Pagination/Pagination\";\r\n\r\nlet User = ({user,followingInProgress,...props}: any) => {\r\n\r\n    return (\r\n            <div key={user.id}>\r\n                <span>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto} alt=\"#\"\r\n                             className={s.usersPhoto}/>\r\n                    </NavLink>\r\n                    </div>\r\n                <div>\r\n                    {\r\n                        user.followed\r\n                        ? <button disabled={\r\n                            followingInProgress.some((id: any) => id === user.id)}\r\n                                  onClick={() => {\r\n                                      props.unfollow(user.id)\r\n                                  }}>Unfollow</button>\r\n                        : <button disabled={\r\n                            followingInProgress.some((id: any) => id === user.id)}\r\n                                  onClick={() => {\r\n                                      props.follow(user.id)\r\n                                  }}>Follow</button>}\r\n\r\n                </div>\r\n                </span>\r\n                    <span>\r\n                    <div>{user.name}</div><div>{user.status}</div>\r\n                </span>\r\n                    <span>\r\n                    {/*<div>{u.location.country}</div>*/}\r\n                        {/*<div>{u.location.city}</div>*/}\r\n                </span>\r\n                </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default User",{"ruleId":"250","severity":1,"message":"251","line":23,"column":6,"nodeType":"252","messageId":"253","endLine":23,"endColumn":18},{"ruleId":"250","severity":1,"message":"254","line":1,"column":16,"nodeType":"252","messageId":"253","endLine":1,"endColumn":27},{"ruleId":"250","severity":1,"message":"255","line":18,"column":6,"nodeType":"252","messageId":"253","endLine":18,"endColumn":21},{"ruleId":"250","severity":1,"message":"256","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":13},{"ruleId":"250","severity":1,"message":"257","line":11,"column":6,"nodeType":"252","messageId":"253","endLine":11,"endColumn":31},{"ruleId":"250","severity":1,"message":"258","line":2,"column":8,"nodeType":"252","messageId":"253","endLine":2,"endColumn":9},{"ruleId":"250","severity":1,"message":"259","line":2,"column":9,"nodeType":"252","messageId":"253","endLine":2,"endColumn":14},{"ruleId":"250","severity":1,"message":"260","line":7,"column":6,"nodeType":"252","messageId":"253","endLine":7,"endColumn":18},{"ruleId":"250","severity":1,"message":"256","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":13},{"ruleId":"250","severity":1,"message":"261","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":15},{"ruleId":"250","severity":1,"message":"262","line":9,"column":6,"nodeType":"252","messageId":"253","endLine":9,"endColumn":31},{"ruleId":"250","severity":1,"message":"263","line":5,"column":9,"nodeType":"252","messageId":"253","endLine":5,"endColumn":17},{"ruleId":"250","severity":1,"message":"264","line":4,"column":8,"nodeType":"252","messageId":"253","endLine":4,"endColumn":21},{"ruleId":"265","severity":1,"message":"266","line":26,"column":25,"nodeType":"267","endLine":26,"endColumn":39},{"ruleId":"250","severity":1,"message":"258","line":2,"column":8,"nodeType":"252","messageId":"253","endLine":2,"endColumn":9},{"ruleId":"250","severity":1,"message":"268","line":3,"column":8,"nodeType":"252","messageId":"253","endLine":3,"endColumn":17},{"ruleId":"250","severity":1,"message":"269","line":4,"column":9,"nodeType":"252","messageId":"253","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"270","line":6,"column":9,"nodeType":"252","messageId":"253","endLine":6,"endColumn":17},{"ruleId":"250","severity":1,"message":"271","line":38,"column":6,"nodeType":"252","messageId":"253","endLine":38,"endColumn":24},{"ruleId":"250","severity":1,"message":"272","line":24,"column":6,"nodeType":"252","messageId":"253","endLine":24,"endColumn":14},{"ruleId":"250","severity":1,"message":"273","line":1,"column":56,"nodeType":"252","messageId":"253","endLine":1,"endColumn":63},{"ruleId":"250","severity":1,"message":"274","line":12,"column":5,"nodeType":"252","messageId":"253","endLine":12,"endColumn":17},{"ruleId":"250","severity":1,"message":"275","line":85,"column":6,"nodeType":"252","messageId":"253","endLine":85,"endColumn":24},{"ruleId":"276","severity":1,"message":"277","line":152,"column":65,"nodeType":"278","messageId":"279","endLine":152,"endColumn":67},{"ruleId":"276","severity":1,"message":"280","line":213,"column":29,"nodeType":"278","messageId":"279","endLine":213,"endColumn":31},{"ruleId":"250","severity":1,"message":"281","line":3,"column":9,"nodeType":"252","messageId":"253","endLine":3,"endColumn":17},{"ruleId":"250","severity":1,"message":"256","line":2,"column":8,"nodeType":"252","messageId":"253","endLine":2,"endColumn":13},{"ruleId":"250","severity":1,"message":"282","line":2,"column":16,"nodeType":"252","messageId":"253","endLine":2,"endColumn":29},{"ruleId":"250","severity":1,"message":"283","line":3,"column":8,"nodeType":"252","messageId":"253","endLine":3,"endColumn":16},{"ruleId":"250","severity":1,"message":"284","line":4,"column":8,"nodeType":"252","messageId":"253","endLine":4,"endColumn":11},{"ruleId":"285","severity":1,"message":"286","line":18,"column":6,"nodeType":"287","messageId":"288","endLine":18,"endColumn":51,"fix":"289"},{"ruleId":"285","severity":1,"message":"286","line":23,"column":6,"nodeType":"287","messageId":"288","endLine":23,"endColumn":26,"fix":"290"},{"ruleId":"285","severity":1,"message":"286","line":31,"column":6,"nodeType":"287","messageId":"288","endLine":31,"endColumn":21,"fix":"291"},{"ruleId":"250","severity":1,"message":"292","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":20},{"ruleId":"250","severity":1,"message":"293","line":1,"column":23,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},{"ruleId":"250","severity":1,"message":"294","line":3,"column":5,"nodeType":"252","messageId":"253","endLine":3,"endColumn":10},{"ruleId":"250","severity":1,"message":"295","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":23},"@typescript-eslint/no-unused-vars","'AppPropsType' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'DialogPropsType' is defined but never used.","'React' is defined but never used.","'dialogsContainerPropsType' is defined but never used.","'s' is defined but never used.","'Field' is defined but never used.","'NavStateType' is defined but never used.","'Profile' is defined but never used.","'myPostsContainerPropsType' is defined but never used.","'Redirect' is defined but never used.","'ProfileStatus' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'userPhoto' is defined but never used.","'NavLink' is defined but never used.","'Provider' is defined but never used.","'dialogsReducerType' is defined but never used.","'PostType' is defined but never used.","'compose' is defined but never used.","'initialState' is assigned a value but never used.","'profileReducerType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'required' is defined but never used.","'createElement' is defined but never used.","'ReactDOM' is defined but never used.","'App' is defined but never used.","jest/valid-title","should not have leading or trailing spaces","Literal","accidentalSpace",{"range":"296","text":"297"},{"range":"298","text":"299"},{"range":"300","text":"301"},"'usersReducer' is defined but never used.","'followSuccess' is defined but never used.","'State' is assigned a value but never used.","'UsersPagination' is defined but never used.",[542,587],"'after deleting messages,increment expected'",[610,630],"'deleting messages'",[853,868],"'add messages'"]