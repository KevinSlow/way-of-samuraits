[{"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts":"1","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx":"2","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx":"3","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx":"4","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx":"5","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx":"6","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx":"8","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx":"9","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx":"11","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx":"12","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx":"13","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx":"14","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx":"15","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx":"16","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx":"17","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx":"18","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx":"19","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"21","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx":"22","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx":"23","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx":"24","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx":"26","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts":"27","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts":"28","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts":"29","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts":"30","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts":"31","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts":"32","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts":"33","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts":"34","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts":"35","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts":"36","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx":"37","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts":"38","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"39","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts":"40","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts":"41","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"42","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts":"43","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts":"44","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts":"45","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts":"46","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx":"47","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx":"48","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx":"49","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx":"50","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx":"51","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"52","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\types\\types.ts":"53","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainerHook.tsx":"54"},{"size":2122,"mtime":1610224659053,"results":"55","hashOfConfig":"56"},{"size":318,"mtime":1609113482435,"results":"57","hashOfConfig":"56"},{"size":3458,"mtime":1610239791280,"results":"58","hashOfConfig":"56"},{"size":260,"mtime":1609113482443,"results":"59","hashOfConfig":"56"},{"size":444,"mtime":1609113482444,"results":"60","hashOfConfig":"56"},{"size":2335,"mtime":1609113482445,"results":"61","hashOfConfig":"56"},{"size":763,"mtime":1609864620451,"results":"62","hashOfConfig":"56"},{"size":266,"mtime":1609113482446,"results":"63","hashOfConfig":"56"},{"size":3725,"mtime":1609113482447,"results":"64","hashOfConfig":"56"},{"size":497,"mtime":1609113482448,"results":"65","hashOfConfig":"56"},{"size":1883,"mtime":1609446258117,"results":"66","hashOfConfig":"56"},{"size":152,"mtime":1609113482449,"results":"67","hashOfConfig":"56"},{"size":1721,"mtime":1609780602462,"results":"68","hashOfConfig":"56"},{"size":149,"mtime":1609113482451,"results":"69","hashOfConfig":"56"},{"size":788,"mtime":1609423845318,"results":"70","hashOfConfig":"56"},{"size":811,"mtime":1609113482453,"results":"71","hashOfConfig":"56"},{"size":680,"mtime":1609423638531,"results":"72","hashOfConfig":"56"},{"size":591,"mtime":1609351353300,"results":"73","hashOfConfig":"56"},{"size":2021,"mtime":1610229787994,"results":"74","hashOfConfig":"56"},{"size":2901,"mtime":1609636414947,"results":"75","hashOfConfig":"56"},{"size":1477,"mtime":1609113482457,"results":"76","hashOfConfig":"56"},{"size":112,"mtime":1609636333869,"results":"77","hashOfConfig":"56"},{"size":1126,"mtime":1610239127799,"results":"78","hashOfConfig":"56"},{"size":2574,"mtime":1610239455384,"results":"79","hashOfConfig":"56"},{"size":604,"mtime":1610213305456,"results":"80","hashOfConfig":"56"},{"size":467,"mtime":1609636316800,"results":"81","hashOfConfig":"56"},{"size":41,"mtime":1609113482462,"results":"82","hashOfConfig":"56"},{"size":3091,"mtime":1610229564393,"results":"83","hashOfConfig":"56"},{"size":1720,"mtime":1610229574373,"results":"84","hashOfConfig":"56"},{"size":4932,"mtime":1610234240366,"results":"85","hashOfConfig":"56"},{"size":1001,"mtime":1610234454904,"results":"86","hashOfConfig":"56"},{"size":738,"mtime":1610231488735,"results":"87","hashOfConfig":"56"},{"size":3204,"mtime":1610236822987,"results":"88","hashOfConfig":"56"},{"size":4862,"mtime":1610239195396,"results":"89","hashOfConfig":"56"},{"size":441,"mtime":1609113482467,"results":"90","hashOfConfig":"56"},{"size":241,"mtime":1609636311793,"results":"91","hashOfConfig":"56"},{"size":997,"mtime":1609113482452,"results":"92","hashOfConfig":"56"},{"size":292,"mtime":1609113482468,"results":"93","hashOfConfig":"56"},{"size":1314,"mtime":1609113482441,"results":"94","hashOfConfig":"56"},{"size":1151,"mtime":1610229515668,"results":"95","hashOfConfig":"56"},{"size":777,"mtime":1610237016616,"results":"96","hashOfConfig":"56"},{"size":1161,"mtime":1609698389271,"results":"97","hashOfConfig":"56"},{"size":1277,"mtime":1610229726260,"results":"98","hashOfConfig":"56"},{"size":1107,"mtime":1609113482463,"results":"99","hashOfConfig":"56"},{"size":449,"mtime":1609113482466,"results":"100","hashOfConfig":"56"},{"size":250,"mtime":1610129999299,"results":"101","hashOfConfig":"56"},{"size":1788,"mtime":1610240043855,"results":"102","hashOfConfig":"56"},{"size":1442,"mtime":1609636302115,"results":"103","hashOfConfig":"56"},{"size":2141,"mtime":1609113482456,"results":"104","hashOfConfig":"56"},{"size":862,"mtime":1610239911430,"results":"105","hashOfConfig":"56"},{"size":258,"mtime":1609636201584,"results":"106","hashOfConfig":"56"},{"size":1552,"mtime":1609424302905,"results":"107","hashOfConfig":"56"},{"size":1372,"mtime":1610234504656,"results":"108","hashOfConfig":"56"},{"size":2042,"mtime":1610233569338,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7p7rf",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\api\\api.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\App.tsx",["239"],"import React, { Suspense } from \"react\";\n\nimport \"./App.css\";\n\nimport Nav from \"./components/Navbar/Nav\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport {\n  HashRouter,\n  Redirect,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport { RootStoreType } from \"./redux/store\";\n\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport { connect, Provider } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport PreLoader from \"./components/Common/Preloader/Preloader\";\nimport store from \"./redux/reduxStore\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport UsersContainerHook from \"./components/Users/UsersContainerHook\";\n\nconst DialogsContainer = React.lazy(\n  () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst ProfileContainer = React.lazy(\n  () => import(\"./components/Profile/ProfileContainer\")\n);\nconst UsersContainer = React.lazy(\n  () => import(\"./components/Users/UsersContainer\")\n);\n\ntype appType = {\n  initialized: boolean;\n};\n\ntype AppPropsType = {\n  store: RootStoreType;\n  initializeApp: () => void;\n  app: appType;\n  initialized: boolean;\n};\n\nclass App extends React.Component<AppPropsType> {\n  catchAllUnhandledErrors = (promiseRejectionEvent: any) => {\n    alert(\"Some error Occurred\");\n    // console.error(promiseRejectionEvent);\n  };\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnhandledErrors\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <PreLoader />;\n    }\n\n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainer />\n        <Nav />\n        <div className=\"app-wrapper-content\">\n          <Switch>\n            <Route exact render={() => <Redirect to={\"/profile\"} />} path=\"/\" />\n            <Route\n              exact\n              render={withSuspense(DialogsContainer)}\n              path=\"/dialogs\"\n            />\n            <Route\n              exact\n              render={withSuspense(ProfileContainer)}\n              path=\"/profile/:userId?\"\n            />\n            <Route exact component={News} path=\"/news\" />\n            <Route exact component={Music} path=\"/music\" />\n            <Route exact component={Settings} path=\"/settings\" />\n            <Route\n              exact\n              render={() => <UsersContainer pageTitle={\"Самураи\"} />}\n              path=\"/users\"\n            />\n            <Route exact render={withSuspense(LoginPage)} path=\"/login\" />\n            <Route exact render={() => <div>404 Not Found</div>} path=\"*\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppPropsType) => ({\n  initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<any>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nexport const SamuraiJSApp = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <Suspense fallback={<div>Loading... </div>}>\n          <AppContainer />\n        </Suspense>\n      </Provider>\n    </HashRouter>\n  );\n};\n\nexport default SamuraiJSApp;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogItem\\DialogItems.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Dialogs.tsx",["240","241"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/Validators/validators\";\r\n\r\n\r\ntype StatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageBody: string) => void,\r\n    updateNewMessageBody: (text: string) => void,\r\n    isAuth: boolean\r\n};\r\n\r\ntype DialogPropsType = {\r\n    dialogs: Array<DialogsItemsType>,\r\n    messages: Array<MessagesItemsType>,\r\n\r\n}\r\ntype DialogsItemsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\ntype MessagesItemsType = {\r\n    message: string,\r\n\r\n}\r\n\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\n\r\nconst Dialogs = (props: StatePropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages.map((m) => (\r\n        <Message key={m.id} message={m.message}/>\r\n    ))\r\n\r\n\r\n    const addNewMessage = (values: any) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.chatBlocks}>\r\n                <div className={s.chatFirst}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.chatSecond}>\r\n                    <ul className={s.chatThread}>\r\n                        {messagesElements}\r\n                    </ul>\r\n                    <ReduxMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <div className=\"write\">\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={TextArea} validate={[required, maxLength]} name={\"newMessageBody\"}  placeholder={\"Enter your message\"}/>\r\n                <button  className={s.send}></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxMessageForm = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\DialogsContainer.tsx",["242","243"],"import React from \"react\";\nimport { addDialogActionCreator } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { RootStoreType } from \"../../redux/store\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\ntype dialogsContainerPropsType = {\n  store: RootStoreType;\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    sendMessage: (newMessageBody: string) => {\n      dispatch(addDialogActionCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Dialogs\\Message\\Message.tsx",["244"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n\r\n            <li>{props.message}</li>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\Header.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Header\\HeaderContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Login\\Login.tsx",["245"],"import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {CreateField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/Validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport s from \"../Common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\nconst LoginForm = ({handleSubmit,error,captchaUrl,...restProps}: any) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {CreateField(\"email\", \"email\",[required],Input,{type: \"text\"} )}\r\n                {CreateField(\"password\", \"password\",[required],Input,{type: \"password\"} ) }\r\n                {CreateField(\"\", \"rememberMe\",[],Input, {type: \"checkbox\"}, \"remember Me\" )}\r\n\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"\"/>}\r\n            {captchaUrl && CreateField(\"Symbols from image\", \"captcha\", [required],Input, {} )}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<any,any>(\r\n    {form: 'login'}\r\n)(LoginForm)\r\n\r\nconst Login = (props:any) => {\r\n    const onSubmit = (formData: any) => {\r\n        console.log(formData)\r\n\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login)","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Music\\Music.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Navbar\\Nav.tsx",["246"],"import React from \"react\";\nimport s from \"./Nav.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport store from \"../../redux/store\";\n\ntype NavStateType = {\n  state: NavPropsType;\n};\n\ntype NavPropsType = {\n  friends: Array<FriendsType>;\n};\n\ntype FriendsType = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nconst Nav = () => {\n  let { sideBar: state } = store.getState();\n\n  let friendsMessages = state.friends.map((f: FriendsType) => (\n    <div className={s.friendsBlock}>\n      <img className={s.friendsImg} src={f.imgUrl} alt=\"friends\" />\n      <NavLink to={\"/profile/\" + f.id}>\n        <p>{f.name}</p>\n      </NavLink>\n    </div>\n  ));\n\n  return (\n    <div>\n      <nav className={s.nav}>\n        <div className={`${s.item}`}>\n          <NavLink to=\"/profile\" activeClassName={s.active}>\n            Profile\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/dialogs\" activeClassName={s.active}>\n            Messages\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/news\" activeClassName={s.active}>\n            News\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/music\" activeClassName={s.active}>\n            Music\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/settings\" activeClassName={s.active}>\n            Settings\n          </NavLink>\n        </div>\n        <div className={s.item}>\n          <NavLink to=\"/users\" activeClassName={s.active}>\n            Users\n          </NavLink>\n        </div>\n        <div className={s.friendsBlocks}>{friendsMessages}</div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Nav;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\News\\News.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPosts.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPostsContainer.tsx",["247","248","249"],"import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport {RootStoreType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"../Profile\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype myPostsContainerPropsType = {\r\n    store: RootStoreType\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        post: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any,) => {\r\n    return{\r\n        addPosts: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer: any = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n\r\n\r\nexport default MyPostsContainer;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\Post\\Post.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Profile.tsx",["250"],"import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile}\r\n                         status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileContainer.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["251"],"import React, { ChangeEvent, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport PreLoader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/img/image.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({\n  profile,\n  savePhoto,\n  isOwner,\n  status,\n  updateStatus,\n  saveProfile,\n}: any) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <PreLoader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: any) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      {/*<div>*/}\n      {/*    <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\n      {/*</div>*/}\n      <img\n        className={s.mainPhoto}\n        src={profile.photos.large || userPhoto}\n        alt=\"\"\n      />\n      {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      {editMode ? (\n        <ProfileDataForm\n          // @ts-ignore\n          profile={profile}\n          initialValues={profile}\n          onSubmit={onSubmit}\n        />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          goToEditMode={() => setEditMode(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode, ...props }: any) => {\n  return (\n    <div className={s.descriptionBlock}>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>\n      )}\n      <div>\n        Full Name\n        <div>{profile.fullName}</div>\n      </div>\n      <div>\n        About Me\n        <div>{profile.aboutMe}</div>\n      </div>\n      <div>\n        {profile.lookingForAJob && (\n          <div>\n            lookingForAJobDescription{\" \"}\n            <div>{profile.lookingForAJobDescription}</div>\n          </div>\n        )}\n      </div>\n      <div>\n        Looking for a Job: <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n      </div>\n      <div>\n        <div>\n          <b>Contacts:</b> :{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <Contacts\n                contactTitle={key}\n                contactValue={profile.contacts[key]}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Contacts = ({ contactTitle, contactValue }: any) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b> : {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Settings\\Settings.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\Users.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainer.tsx",["252","253","254"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  follow,\n  requestUsers,\n  setCurrentPage,\n  setFollowingProgress,\n  unfollow,\n} from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport PreLoader from \"../Common/Preloader/Preloader\";\nimport { compose } from \"redux\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getPageSize,\n  getTotalUserCount,\n  getUsers,\n} from \"../../redux/users-selectors\";\nimport { StateType, UserType } from \"../../types/types\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\ntype MapStateToPropsType = {\n  currentPage: number;\n  pageSize: number;\n  isFetching: boolean;\n  totalUserCount: number;\n  users: UserType[];\n  followingInProgress: number[];\n};\n\ntype MapDispatchPropsType = {\n  follow: (userId: number) => void;\n  getUsers: (currentPage: number, pageSize: number) => void;\n  unfollow: (userId: number) => void;\n};\n\ntype OwnPropsType = {\n  pageTitle: string;\n};\n\nexport type UserPropsContainerType = MapStateToPropsType &\n  MapDispatchPropsType &\n  OwnPropsType;\n\nclass UsersContainer extends React.Component<\n  UserPropsContainerType,\n  StateType\n> {\n  componentDidMount() {\n    let { currentPage, pageSize } = this.props;\n    this.props.getUsers(currentPage, pageSize);\n  }\n\n  onPageChanged = (pageNumber: number) => {\n    let { pageSize } = this.props;\n    this.props.getUsers(pageNumber, pageSize);\n  };\n\n  render(): JSX.Element {\n    return (\n      <>\n        <h2>{this.props.pageTitle}</h2>\n        {this.props.isFetching ? (\n          <PreLoader />\n        ) : (\n          <Users\n            totalUserCount={this.props.totalUserCount}\n            pageSize={this.props.pageSize}\n            currentPage={this.props.currentPage}\n            onPageChanged={this.onPageChanged}\n            users={this.props.users}\n            follow={this.props.follow}\n            unfollow={this.props.unfollow}\n            followingInProgress={this.props.followingInProgress}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state: StateType): MapStateToPropsType => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUserCount: getTotalUserCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n  };\n};\n\nexport default compose<any>(\n  connect<MapStateToPropsType, MapDispatchPropsType, OwnPropsType, StateType>(\n    mapStateToProps,\n    {\n      follow,\n      unfollow: unfollow,\n      getUsers: requestUsers,\n    }\n  )\n)(UsersContainer);\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\index.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\react-app-env.d.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\auth-reducer.ts",["255"],"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { DispatchType, ThunkType } from \"../types/types\";\n\nconst SET_USER_DATA = \"samurai-network/auth/SET_USER_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"samurai-network/auth/GET_CAPTCHA_URL_SUCCESS\";\n\nlet initialState = {\n  userId: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaUrl: null as string | null, // if null, then captcha is not required\n};\n\nexport type initialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: any): initialStateType => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n};\n\ntype SetAuthUserDataActionTypePayloadType = {\n  userId: number;\n  email: string;\n  login: string;\n  isAuth: boolean;\n};\n\ntype SetAuthUserDataActionType = {\n  type: typeof SET_USER_DATA;\n  payload: SetAuthUserDataActionTypePayloadType;\n};\n\nexport const setAuthUserDataSuccess = (\n  userId: number | null,\n  email: string | null,\n  login: string | null,\n  isAuth: boolean\n): SetAuthUserDataActionType =>\n  <SetAuthUserDataActionType>{\n    type: SET_USER_DATA,\n    payload: { email, userId, login, isAuth },\n  };\n\nexport const setAuthUserData = (): ThunkType => async (\n  dispatch: DispatchType\n) => {\n  let data = await authAPI.me();\n  if (data.resultCode === 0) {\n    let { email, id, login } = data.data;\n    dispatch(setAuthUserDataSuccess(id, email, login, true));\n  }\n};\ntype getCaptchaURLSuccessType = {\n  type: typeof GET_CAPTCHA_URL_SUCCESS;\n  payload: { captchaUrl: string };\n};\n\nexport const getCaptchaURLSuccess = (\n  captchaUrl: string\n): getCaptchaURLSuccessType => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: { captchaUrl },\n});\n\nexport const login = (\n  email: number | null,\n  password: string,\n  rememberMe: string | null,\n  captcha: null | undefined\n): ThunkType => async (dispatch: DispatchType) => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserDataSuccess(email, password, rememberMe, true));\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaURL());\n    }\n    let message =\n      response.data.messages.length > 0\n        ? response.data.messages[0]\n        : \"Some Error\";\n    dispatch(stopSubmit(\"login\", { _error: message }));\n  }\n};\n\nexport const getCaptchaURL = (): ThunkType => async (\n  dispatch: DispatchType\n) => {\n  let response = await securityAPI.getCaptcha();\n  const captchaUrl = response.url;\n  dispatch(getCaptchaURLSuccess(captchaUrl));\n};\n\nexport const logout = (): ThunkType => async (dispatch: DispatchType) => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserDataSuccess(null, null, null, false));\n  }\n};\n//\n// export const setIsFetching = (isFetching: boolean) => (\n//     {type: TOGGLE_IS_FETCHING, isFetching}\n// )\n\nexport default authReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\reduxStore.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\sidebarReducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\store.ts",["256","257","258"],"import profileReducer, { ProfileAction } from \"./profileReducer\";\n\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\ntype DialogType = {\n  id: number;\n  name: string;\n};\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type sideBar = {\n  id: number;\n  name: string;\n  imgUrl: string;\n};\n\nexport type ProfilePageType = {\n  posts: Array<PostType>;\n  newPostText: string;\n  profile: null;\n  status: string;\n};\n\nexport type DialogPageType = {\n  messages: MessageType[];\n  dialogs: DialogType[];\n};\n\nexport type sideBarType = {\n  friends: sideBar[];\n};\n\nexport type RootStateType = {\n  profilePage: ProfilePageType;\n  dialogsPage: DialogPageType;\n  sideBar: sideBarType;\n  usersPage: null;\n};\n\nexport type RootStoreType = {\n  _state: RootStateType;\n  _callSubscriber: () => void;\n  getState: () => RootStateType;\n  subscribe: (observer: () => void) => void;\n  dispatch: (action: any) => void;\n};\n\nlet store: RootStoreType = {\n  _state: {\n    profilePage: {\n      posts: [\n        { id: 1, message: \"Hi\", likesCount: 10 },\n        { id: 2, message: \"How is your day?\", likesCount: 20 },\n        { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n        { id: 4, message: \"Svetlana\", likesCount: 50 },\n        { id: 5, message: \"Trysa\", likesCount: 100 },\n        { id: 6, message: \"Fine\", likesCount: 3 },\n      ],\n      newPostText: \"it-kamasutra.com!\",\n      profile: null,\n      status: \"\",\n    },\n    dialogsPage: {\n      messages: [\n        { id: 1, message: \"Hi\" },\n        { id: 2, message: \"How is your day?\" },\n        { id: 3, message: \"Fine, tahnks\" },\n        { id: 4, message: \"Svetlana\" },\n        { id: 5, message: \"Trysa\" },\n        { id: 6, message: \"Fine\" },\n      ],\n      dialogs: [\n        { id: 1, name: \"Dimich123\" },\n        { id: 2, name: \"Andrew\" },\n        { id: 3, name: \"Valera\" },\n        { id: 4, name: \"Sveta\" },\n        { id: 5, name: \"Polina\" },\n        { id: 6, name: \"Sasha\" },\n      ],\n    },\n    sideBar: {\n      friends: [\n        {\n          id: 1,\n          name: \"Kiril\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 2,\n          name: \"Ivan\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n        {\n          id: 3,\n          name: \"Petrovich\",\n          imgUrl:\n            \"https://thatshelf.com/wp-content/uploads/2020/08/ava-jessica-chastain.jpg\",\n        },\n      ],\n    },\n    usersPage: null,\n  },\n  getState() {\n    return this._state;\n  },\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n  dispatch: function (action: any) {\n    let { profilePage, dialogsPage, sideBar } = this._state;\n    profileReducer(profilePage, action);\n    dialogsReducer(dialogsPage, action);\n    sidebarReducer(sideBar, action);\n    this._callSubscriber();\n  },\n};\n\nexport default store;\n// window.store = store;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.ts",["259","260","261","262","263"],"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../hoc/objectsHelpers\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport {\n  DispatchType,\n  IActionRecucerType,\n  photosType,\n  StateType,\n  ThunkType,\n  UserType,\n} from \"../types/types\";\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\";\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 5,\n  totalUserCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] as Array<number>,\n};\n\ntype InitialState = typeof initialState;\n\nconst usersReducer = (state = initialState, action: any): InitialState => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        }),\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: false,\n        }),\n      };\n    case SET_USERS:\n      return { ...state, users: action.users };\n\n    case SET_CURRENT_PAGE:\n      return { ...state, currentPage: action.currentPage };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state, totalUserCount: action.count };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state, isFetching: action.isFetching };\n\n    case TOGGLE_FOLLOWING_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter((id) => id != action.userId),\n      };\n  }\n  return state;\n};\n\ntype ActionTypefollowSuccess = {\n  type: typeof FOLLOW;\n  userId: number;\n};\n\nexport const followSuccess = (userId: number): ActionTypefollowSuccess => ({\n  type: FOLLOW,\n  userId,\n});\n\ntype ActionTypeunfollowSuccess = {\n  type: typeof UNFOLLOW;\n  userId: number;\n};\n\nexport const unfollowSuccess = (userId: number): ActionTypeunfollowSuccess => ({\n  type: UNFOLLOW,\n  userId,\n});\n\ntype ActionTypeSetUsers = {\n  type: typeof SET_USERS;\n  users: Array<UserType>;\n};\n\nexport const setUsers = (users: Array<UserType>): ActionTypeSetUsers => ({\n  type: SET_USERS,\n  users,\n});\n\ntype ActionTypeSetCurrentPage = {\n  type: typeof SET_CURRENT_PAGE;\n  currentPage: number;\n};\n\nexport const setCurrentPage = (\n  currentPage: number\n): ActionTypeSetCurrentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage: currentPage,\n});\n\ntype ActionTypeSetTotalUserCount = {\n  type: typeof SET_TOTAL_USERS_COUNT;\n  count: number;\n};\n\nexport const setTotalUserCount = (\n  totalUserCount: number\n): ActionTypeSetTotalUserCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUserCount,\n});\n\ntype ActionTypeSetIsFetching = {\n  type: typeof TOGGLE_IS_FETCHING;\n  isFetching: boolean;\n};\n\nexport const setIsFetching = (\n  isFetching: boolean\n): ActionTypeSetIsFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching,\n});\n\ntype ActionTypeSetFollowingProgress = {\n  type: typeof TOGGLE_FOLLOWING_PROGRESS;\n  isFetching: boolean;\n  userId: number;\n};\n\nexport const setFollowingProgress = (\n  isFetching: boolean,\n  userId: number\n): ActionTypeSetFollowingProgress => ({\n  type: TOGGLE_FOLLOWING_PROGRESS,\n  isFetching,\n  userId,\n});\n\nexport const requestUsers = (\n  page: number,\n  pageSize: number\n): ThunkAction<void, StateType, unknown, IActionRecucerType> => {\n  return (dispatch: DispatchType) => {\n    dispatch(setIsFetching(true));\n    dispatch(setCurrentPage(page));\n\n    usersAPI.getUsers(page, pageSize).then((data) => {\n      dispatch(setIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUserCount(data.totalCount));\n    });\n  };\n};\n\nconst _followUnfollowFlow = async (\n  dispatch: DispatchType,\n  userId: number,\n  apiMethod: (userId: number) => Promise<any>,\n  actionCreator: (userId: number) => void\n) => {\n  dispatch(setFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(setFollowingProgress(false, userId));\n};\n\nexport const follow = (userId: number) => {\n  return async (dispatch: any) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.followUsers.bind(usersAPI),\n      followSuccess\n    );\n  };\n};\n\nexport const unfollow = (\n  userId: number\n): ThunkAction<void, StateType, unknown, IActionRecucerType> => {\n  return async (dispatch: DispatchType) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      usersAPI.unfollowUsers.bind(usersAPI),\n      unfollowSuccess\n    );\n  };\n};\n\nexport default usersReducer;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\reportWebVitals.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\setupTests.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\Posts\\MyPost.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\utils\\Validators\\validators.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\FormsControls\\FormsControls.tsx",["264"],"import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {required} from \"../../../utils/Validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <span>{hasError && error}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const TextArea = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props} >\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props} >\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const CreateField = (placeholder :string, name: string, validators: any, component: any, restProps = {}, text = \"\") => {\r\n    return <div><Field\r\n        type=\"text\"\r\n        validate={validators}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        component={component}\r\n        {...restProps}\r\n    /> {text}</div>\r\n};","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\app-reducer.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\users-selectors.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\profileReducerTest.test.ts",["265","266","267","268","269"],"import profileReducer, {\n  addPostActionCreator,\n  deletePost,\n} from \"./profileReducer\";\nimport React, { createElement } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../App\";\n\nconst state = {\n  posts: [\n    { id: 1, message: \"Hi\", likesCount: 10 },\n    { id: 2, message: \"How is your day?\", likesCount: 20 },\n    { id: 3, message: \"Fine, tahnks\", likesCount: 0 },\n    { id: 4, message: \"Svetlana\", likesCount: 50 },\n  ],\n  newPostText: \"it-kamasutra.com!\",\n  profile: null,\n  status: \"\",\n};\n\ntest(\"after deleting messages,increment expected \", () => {\n  // 1. Test Data\n\n  let action = deletePost(1);\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(3);\n});\n\ntest(\"Posts length should be incremented\", () => {\n  // 1. Test Data\n\n  let action = addPostActionCreator(\"New Post\");\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(5);\n});\n\ntest(\"after deleting length shouldnt be decrement id ID is incorrect\", () => {\n  // 1. Test Data\n\n  let action = deletePost(10000);\n\n  /// 2. Action\n\n  let newState = profileReducer(state, action);\n\n  /// 3. Expectation\n\n  expect(newState.posts.length).toBe(4);\n});\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\dialogsReducer.test.ts",["270","271"],"import dialogsReducer, {addDialogActionCreator, deleteDialog} from \"./dialogsReducer\";\r\n\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your day?\"},\r\n        {id: 3, message: \"Fine, tahnks\"},\r\n        {id: 4, message: \"Svetlana\"},\r\n        {id: 5, message: \"Trysa\"},\r\n        {id: 6, message: \"Fine\"}\r\n    ],\r\n\r\n    dialogs: [\r\n        {id: 1, name: \"Dimich123\"},\r\n        {id: 2, name: \"Andrew\"},\r\n        {id: 3, name: \"Valera\"},\r\n        {id: 4, name: \"Sveta\"},\r\n        {id: 5, name: \"Polina\"},\r\n        {id: 6, name: \"Sasha\"}\r\n    ]\r\n}\r\ntest('deleting messages ', () => {\r\n    // 1. Test Data\r\n    let action = deleteDialog(1);\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.dialogs.length).toBe(5);\r\n});\r\ntest('add messages ', () => {\r\n    // 1. Test Data\r\n    let action = addDialogActionCreator(\"New Message\");\r\n    /// 2. Action\r\n    let newState = dialogsReducer(initialState, action)\r\n    /// 3. Expectation\r\n    expect(newState.messages.length).toBe(7);\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\redux\\usersReducer.test.ts",["272","273","274"],"import usersReducer, {followSuccess} from \"./usersReducer\";\r\n\r\nlet State = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\ntest('follow', () => {\r\n    // 1. Test Data\r\n    // let action = followSuccess(2);\r\n    // /// 2. Action\r\n    // let newState = usersReducer(State, action)\r\n    // /// 3. Expectation\r\n    // expect(State.followed).toBe(true);\r\n});\r\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\objectsHelpers.ts",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\User.tsx",["275"],"import React from \"react\";\nimport s from \"./users.module.css\";\nimport userPhoto from \"../../assets/img/image.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport UsersPagination from \"../Common/Pagination/Pagination\";\n\nlet User = ({ user, followingInProgress, ...props }: any) => {\n  return (\n    <div key={user.id}>\n      <span>\n        <div>\n          <NavLink to={\"/profile/\" + user.id}>\n            <img\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\n              alt=\"#\"\n              className={s.usersPhoto}\n            />\n          </NavLink>\n        </div>\n        <div>\n          {user.followed ? (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.unfollow(user.id);\n              }}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              disabled={followingInProgress.some((id: any) => id === user.id)}\n              onClick={() => {\n                props.follow(user.id);\n              }}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </span>\n      <span>\n        <div>{user.name}</div>\n        <div>{user.status}</div>\n      </span>\n      <span>\n        {/*<div>{u.location.country}</div>*/}\n        {/*<div>{u.location.city}</div>*/}\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.test.tsx",["276","277"],"import React from \"react\";\r\nimport { create } from \"react-test-renderer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nfunction Button(props:any) {\r\n    return <button>Nothing to do for now</button>;\r\n}\r\n\r\ndescribe(\"Profile Status Component\", () => {\r\n    test(\"status from props should be in the state\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const instance = component.getInstance()\r\n        expect(instance.state.status).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"status from props\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span).not.toBeNull();\r\n    });\r\n\r\n    test(\"status from input\", () => {\r\n        const component = create(<ProfileStatus text={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        expect(() => {\r\n            let input = root.findByType(\"input\")\r\n        }).toThrow();\r\n    });\r\n    test(\"auto creation span with status should be displayed with correct status\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        expect(span.children[0]).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"input should be displayed in editMode instead of span\", () => {\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} />);\r\n        const root = component.root\r\n        let span = root.findByType(\"span\");\r\n        span.props.onDoubleClick();\r\n        let input = root.findByType(\"input\");\r\n        expect(input.props.value).toBe(\"it-kamasutra.com\");\r\n    });\r\n\r\n    test(\"callback should be called\", () => {\r\n        const mockCallback = jest.fn();\r\n        const component = create(<ProfileStatus status={\"it-kamasutra.com\"} updateStatus={mockCallback} />);\r\n        const instance = component.getInstance();\r\n        // @ts-ignore\r\n        instance.deactivateEditMode();\r\n        expect(mockCallback.mock.calls.length).toBe(1);\r\n    });\r\n});","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Common\\Pagination\\Pagination.test.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\hoc\\withSuspense.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\types\\types.ts",["278"],"import store from \"../redux/store\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { rootReducer } from \"../redux/reduxStore\";\n\nexport type DispatchType = typeof store.dispatch;\nexport type StateType = ReturnType<AppState>;\nexport type AppState = typeof rootReducer;\nexport type ThunkType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  StateType,\n  unknown,\n  Action<string>\n>;\n\nexport interface IActionRecucerType {\n  type: string;\n  newPostText: string;\n  status: string;\n  profile: null;\n  postId: number;\n  userId: number;\n  users: number[];\n  currentPage: number;\n  count: number;\n  isFetching: boolean;\n  newMessageBody: string;\n  dialogId: number;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n};\nexport type photosType = {\n  small: string | null;\n  large: string | null;\n};\nexport type ProfileType = {\n  userId: number;\n  lookingForAJob: string;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: photosType;\n};\n\ntype PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n};\n\nexport type UserType = {\n  id: number;\n  name: string;\n  uniqueUrlName: string | null;\n  photos: photosType;\n  status: string | null;\n  followed: boolean;\n};\n","C:\\samurai-way\\01-first-project\\way-of-samuraits\\src\\components\\Users\\UsersContainerHook.tsx",["279","280","281"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  follow,\n  requestUsers,\n  setCurrentPage,\n  setFollowingProgress,\n  unfollow,\n} from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport PreLoader from \"../Common/Preloader/Preloader\";\nimport { compose } from \"redux\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getPageSize,\n  getTotalUserCount,\n  getUsers,\n} from \"../../redux/users-selectors\";\nimport { PostType } from \"../../redux/store\";\nimport { StateType } from \"../../types/types\";\n\nexport interface UserPropsContainerType {\n  currentPage: number;\n  pageSize: number;\n  getUsers: (currentPage: number, pageSize: number) => void;\n  isFetching: boolean;\n  users: PostType[];\n  totalUserCount: number;\n  follow: () => void;\n  unfollow: () => void;\n  followingInProgress: () => void;\n}\n\nconst UsersContainer = ({ ...restProps }) => {\n  useEffect(restProps.getUsers(restProps.currentPage, restProps.pageSize), [\n    restProps.currentPage,\n    restProps.pageSize,\n  ]);\n\n  function onPageChanged(pageNumber: number) {\n    let { pageSize } = restProps;\n    restProps.getUsers(pageNumber, pageSize);\n  }\n\n  return (\n    <Users\n      totalUserCount={restProps.totalUserCount}\n      pageSize={restProps.pageSize}\n      currentPage={restProps.currentPage}\n      onPageChanged={restProps.onPageChanged}\n      users={restProps.users}\n      follow={restProps.follow}\n      unfollow={restProps.unfollow}\n      followingInProgress={restProps.followingInProgress}\n    />\n  );\n};\n\nlet mapStateToProps = (state: StateType) => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUserCount: getTotalUserCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n  };\n};\n\nexport default compose<any>(\n  connect(mapStateToProps, {\n    follow,\n    unfollow,\n    setCurrentPage,\n    setFollowingProgress,\n    getUsers: requestUsers,\n  })\n)(UsersContainer);\n",{"ruleId":"282","severity":1,"message":"283","line":26,"column":8,"nodeType":"284","messageId":"285","endLine":26,"endColumn":26},{"ruleId":"282","severity":1,"message":"286","line":1,"column":16,"nodeType":"284","messageId":"285","endLine":1,"endColumn":27},{"ruleId":"282","severity":1,"message":"287","line":18,"column":6,"nodeType":"284","messageId":"285","endLine":18,"endColumn":21},{"ruleId":"282","severity":1,"message":"288","line":1,"column":8,"nodeType":"284","messageId":"285","endLine":1,"endColumn":13},{"ruleId":"282","severity":1,"message":"289","line":9,"column":6,"nodeType":"284","messageId":"285","endLine":9,"endColumn":31},{"ruleId":"282","severity":1,"message":"290","line":2,"column":8,"nodeType":"284","messageId":"285","endLine":2,"endColumn":9},{"ruleId":"282","severity":1,"message":"291","line":2,"column":9,"nodeType":"284","messageId":"285","endLine":2,"endColumn":14},{"ruleId":"282","severity":1,"message":"292","line":6,"column":6,"nodeType":"284","messageId":"285","endLine":6,"endColumn":18},{"ruleId":"282","severity":1,"message":"288","line":1,"column":8,"nodeType":"284","messageId":"285","endLine":1,"endColumn":13},{"ruleId":"282","severity":1,"message":"293","line":5,"column":8,"nodeType":"284","messageId":"285","endLine":5,"endColumn":15},{"ruleId":"282","severity":1,"message":"294","line":9,"column":6,"nodeType":"284","messageId":"285","endLine":9,"endColumn":31},{"ruleId":"282","severity":1,"message":"295","line":5,"column":9,"nodeType":"284","messageId":"285","endLine":5,"endColumn":17},{"ruleId":"282","severity":1,"message":"296","line":4,"column":8,"nodeType":"284","messageId":"285","endLine":4,"endColumn":21},{"ruleId":"282","severity":1,"message":"297","line":6,"column":3,"nodeType":"284","messageId":"285","endLine":6,"endColumn":17},{"ruleId":"282","severity":1,"message":"298","line":7,"column":3,"nodeType":"284","messageId":"285","endLine":7,"endColumn":23},{"ruleId":"282","severity":1,"message":"299","line":22,"column":10,"nodeType":"284","messageId":"285","endLine":22,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":48,"column":3,"nodeType":"302","messageId":"303","endLine":51,"endColumn":4},{"ruleId":"282","severity":1,"message":"304","line":1,"column":26,"nodeType":"284","messageId":"285","endLine":1,"endColumn":39},{"ruleId":"282","severity":1,"message":"305","line":5,"column":10,"nodeType":"284","messageId":"285","endLine":5,"endColumn":21},{"ruleId":"282","severity":1,"message":"306","line":6,"column":10,"nodeType":"284","messageId":"285","endLine":6,"endColumn":16},{"ruleId":"282","severity":1,"message":"306","line":4,"column":10,"nodeType":"284","messageId":"285","endLine":4,"endColumn":16},{"ruleId":"282","severity":1,"message":"307","line":8,"column":3,"nodeType":"284","messageId":"285","endLine":8,"endColumn":13},{"ruleId":"282","severity":1,"message":"308","line":10,"column":3,"nodeType":"284","messageId":"285","endLine":10,"endColumn":12},{"ruleId":"309","severity":1,"message":"310","line":66,"column":57,"nodeType":"311","messageId":"312","endLine":66,"endColumn":59},{"ruleId":"309","severity":1,"message":"313","line":178,"column":27,"nodeType":"311","messageId":"312","endLine":178,"endColumn":29},{"ruleId":"282","severity":1,"message":"314","line":3,"column":9,"nodeType":"284","messageId":"285","endLine":3,"endColumn":17},{"ruleId":"282","severity":1,"message":"288","line":5,"column":8,"nodeType":"284","messageId":"285","endLine":5,"endColumn":13},{"ruleId":"282","severity":1,"message":"315","line":5,"column":17,"nodeType":"284","messageId":"285","endLine":5,"endColumn":30},{"ruleId":"282","severity":1,"message":"316","line":6,"column":8,"nodeType":"284","messageId":"285","endLine":6,"endColumn":16},{"ruleId":"282","severity":1,"message":"317","line":7,"column":8,"nodeType":"284","messageId":"285","endLine":7,"endColumn":11},{"ruleId":"318","severity":1,"message":"319","line":21,"column":6,"nodeType":"320","messageId":"321","endLine":21,"endColumn":51,"fix":"322"},{"ruleId":"318","severity":1,"message":"319","line":23,"column":6,"nodeType":"320","messageId":"321","endLine":23,"endColumn":26,"fix":"323"},{"ruleId":"318","severity":1,"message":"319","line":31,"column":6,"nodeType":"320","messageId":"321","endLine":31,"endColumn":21,"fix":"324"},{"ruleId":"282","severity":1,"message":"325","line":1,"column":8,"nodeType":"284","messageId":"285","endLine":1,"endColumn":20},{"ruleId":"282","severity":1,"message":"326","line":1,"column":23,"nodeType":"284","messageId":"285","endLine":1,"endColumn":36},{"ruleId":"282","severity":1,"message":"327","line":3,"column":5,"nodeType":"284","messageId":"285","endLine":3,"endColumn":10},{"ruleId":"282","severity":1,"message":"328","line":5,"column":8,"nodeType":"284","messageId":"285","endLine":5,"endColumn":23},{"ruleId":"282","severity":1,"message":"329","line":5,"column":10,"nodeType":"284","messageId":"285","endLine":5,"endColumn":16},{"ruleId":"282","severity":1,"message":"330","line":27,"column":17,"nodeType":"284","messageId":"285","endLine":27,"endColumn":22},{"ruleId":"282","severity":1,"message":"331","line":54,"column":6,"nodeType":"284","messageId":"285","endLine":54,"endColumn":14},{"ruleId":"282","severity":1,"message":"332","line":11,"column":8,"nodeType":"284","messageId":"285","endLine":11,"endColumn":17},{"ruleId":"333","severity":1,"message":"334","line":37,"column":3,"nodeType":"284","endLine":37,"endColumn":12},{"ruleId":"282","severity":1,"message":"335","line":42,"column":12,"nodeType":"284","messageId":"285","endLine":42,"endColumn":25},"@typescript-eslint/no-unused-vars","'UsersContainerHook' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'DialogPropsType' is defined but never used.","'React' is defined but never used.","'dialogsContainerPropsType' is defined but never used.","'s' is defined but never used.","'Field' is defined but never used.","'NavStateType' is defined but never used.","'Profile' is defined but never used.","'myPostsContainerPropsType' is defined but never used.","'Redirect' is defined but never used.","'ProfileStatus' is defined but never used.","'setCurrentPage' is defined but never used.","'setFollowingProgress' is defined but never used.","'ThunkDispatch' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as SetAuthUserDataActionType' instead of '<SetAuthUserDataActionType>'.","TSTypeAssertion","as","'ProfileAction' is defined but never used.","'ThunkAction' is defined but never used.","'Action' is defined but never used.","'photosType' is defined but never used.","'ThunkType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'required' is defined but never used.","'createElement' is defined but never used.","'ReactDOM' is defined but never used.","'App' is defined but never used.","jest/valid-title","should not have leading or trailing spaces","Literal","accidentalSpace",{"range":"336","text":"337"},{"range":"338","text":"339"},{"range":"340","text":"341"},"'usersReducer' is defined but never used.","'followSuccess' is defined but never used.","'State' is assigned a value but never used.","'UsersPagination' is defined but never used.","'Button' is defined but never used.","'input' is assigned a value but never used.","'PostType' is defined but never used.","'PreLoader' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","'onPageChanged' is defined but never used.",[518,563],"\"after deleting messages,increment expected\"",[610,630],"'deleting messages'",[853,868],"'add messages'"]